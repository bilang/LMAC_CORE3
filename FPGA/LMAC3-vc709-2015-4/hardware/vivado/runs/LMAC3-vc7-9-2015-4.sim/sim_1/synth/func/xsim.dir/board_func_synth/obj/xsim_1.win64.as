	.def	 _transaction_47;
	.scl	2;
	.type	32;
	.endef
	.text
	.globl	_transaction_47
	.align	16, 0x90
_transaction_47:                        # @_transaction_47
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	8880(%rbx), %r14
	cmpl	$0, 8896(%rbx)
	je	.LBB0_2
# BB#1:
	leaq	8744(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB0_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB0_4
# BB#3:
	addq	$444378408, %rbx        # imm = 0x1A7CAD28
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB0_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_48;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_48
	.align	16, 0x90
_transaction_48:                        # @_transaction_48
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	9120(%rbx), %r14
	cmpl	$0, 9136(%rbx)
	je	.LBB1_2
# BB#1:
	leaq	8984(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB1_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB1_4
# BB#3:
	addq	$444379352, %rbx        # imm = 0x1A7CB0D8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB1_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_257377;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257377
	.align	16, 0x90
_execute_257377:                        # @_execute_257377
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	-24(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$-1, -24(%rbp)
	leaq	296(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	96(%rsi), %rcx
	addq	$272, %rsi              # imm = 0x110
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257378;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257378
	.align	16, 0x90
_execute_257378:                        # @_execute_257378
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	104(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	464(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	40(%rsi), %rcx
	addq	$440, %rsi              # imm = 0x1B8
	movq	$100, 32(%rsp)
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_slow_dd0(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257381;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257381
	.align	16, 0x90
_execute_257381:                        # @_execute_257381
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	304(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	40(%rsi), %rcx
	addq	$280, %rsi              # imm = 0x118
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _transaction_67;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_67
	.align	16, 0x90
_transaction_67:                        # @_transaction_67
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$56, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r13
	movq	%rcx, %r12
	movl	48(%rbp), %r15d
	leaq	12256(%r12), %r14
	cmpl	$0, 12272(%r12)
	je	.LBB5_2
# BB#1:
	leaq	12120(%r12), %rcx
	movl	%r15d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r13, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r13
.LBB5_2:
	movl	%r15d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB5_8
# BB#3:
	cmpl	$9, %esi
	ja	.LBB5_5
# BB#4:
	movl	$9, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_5
# BB#9:
	leaq	168131416(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	cmpl	$1, %esi
	ja	.LBB5_11
# BB#10:
	movl	$1, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_11
# BB#24:
	leaq	168062792(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	testl	%esi, %esi
	jne	.LBB5_26
# BB#25:
	movl	$0, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_26
# BB#50:
	leaq	167312256(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB5_26:
	testl	%r15d, %r15d
	sete	%al
	cmpl	$1, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_11
# BB#27:
	movl	$1, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_11
# BB#28:
	leaq	167376664(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB5_11:
	cmpl	$2, %r15d
	setb	%al
	cmpl	$3, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_13
# BB#12:
	movl	$3, 40(%rsp)
	movl	$2, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_13
# BB#29:
	cmpl	$2, %r15d
	setb	%bl
	leaq	168062960(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	cmpl	$2, %esi
	seta	%al
	orb	%bl, %al
	jne	.LBB5_31
# BB#30:
	movl	$2, 40(%rsp)
	movl	$2, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_31
# BB#51:
	leaq	167395536(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB5_31:
	cmpl	$3, %r15d
	setb	%al
	cmpl	$3, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_13
# BB#32:
	movl	$3, 40(%rsp)
	movl	$3, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_13
# BB#33:
	leaq	167409208(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB5_13:
	cmpl	$4, %r15d
	setb	%al
	cmpl	$5, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_15
# BB#14:
	movl	$5, 40(%rsp)
	movl	$4, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_15
# BB#34:
	cmpl	$4, %r15d
	setb	%bl
	leaq	168056208(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	cmpl	$4, %esi
	seta	%al
	orb	%bl, %al
	jne	.LBB5_36
# BB#35:
	movl	$4, 40(%rsp)
	movl	$4, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_36
# BB#52:
	leaq	167428080(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB5_36:
	cmpl	$5, %r15d
	setb	%al
	cmpl	$5, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_15
# BB#37:
	movl	$5, 40(%rsp)
	movl	$5, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_15
# BB#38:
	leaq	167444856(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB5_15:
	cmpl	$6, %r15d
	setb	%al
	cmpl	$7, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_17
# BB#16:
	movl	$7, 40(%rsp)
	movl	$6, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_17
# BB#39:
	cmpl	$6, %r15d
	setb	%bl
	leaq	168056376(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	cmpl	$6, %esi
	seta	%al
	orb	%bl, %al
	jne	.LBB5_41
# BB#40:
	movl	$6, 40(%rsp)
	movl	$6, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_41
# BB#53:
	leaq	167463728(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB5_41:
	cmpl	$7, %r15d
	setb	%al
	cmpl	$7, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_17
# BB#42:
	movl	$7, 40(%rsp)
	movl	$7, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_17
# BB#43:
	leaq	167477400(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB5_17:
	cmpl	$8, %r15d
	setb	%al
	cmpl	$9, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_5
# BB#18:
	movl	$9, 40(%rsp)
	movl	$8, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_5
# BB#19:
	cmpl	$8, %r15d
	setb	%bl
	leaq	168056544(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	cmpl	$8, %esi
	seta	%al
	orb	%bl, %al
	jne	.LBB5_21
# BB#20:
	movl	$8, 40(%rsp)
	movl	$8, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_21
# BB#44:
	leaq	167496272(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB5_21:
	cmpl	$9, %r15d
	setb	%al
	cmpl	$9, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_5
# BB#22:
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_5
# BB#23:
	leaq	167513048(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB5_5:
	cmpl	$10, %r15d
	setb	%al
	cmpl	$11, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_7
# BB#6:
	movl	$11, 40(%rsp)
	movl	$10, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_7
# BB#45:
	cmpl	$10, %r15d
	setb	%bl
	leaq	168056712(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	cmpl	$10, %esi
	seta	%al
	orb	%bl, %al
	jne	.LBB5_47
# BB#46:
	movl	$10, 40(%rsp)
	movl	$10, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_47
# BB#54:
	leaq	167349320(%r12), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %rbx
	callq	*%rbx
	leaq	168131416(%r12), %rcx
	callq	*%rbx
.LBB5_47:
	cmpl	$11, %r15d
	setb	%al
	cmpl	$11, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB5_7
# BB#48:
	movl	$11, 40(%rsp)
	movl	$11, 32(%rsp)
	movq	%r14, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB5_7
# BB#49:
	leaq	167362992(%r12), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %rbx
	callq	*%rbx
	addq	$168132256, %r12        # imm = 0xA057EA0
	movq	%r12, %rcx
	callq	*%rbx
.LBB5_7:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB5_8:
	addq	$56, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_68;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_68
	.align	16, 0x90
_transaction_68:                        # @_transaction_68
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	15408(%rbx), %r14
	cmpl	$0, 15424(%rbx)
	je	.LBB6_2
# BB#1:
	leaq	15272(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB6_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB6_4
# BB#3:
	leaq	167308200(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	leaq	167946376(%rbx), %rcx
	callq	*%r12
	leaq	168007480(%rbx), %rcx
	callq	*%r12
	leaq	168017624(%rbx), %rcx
	callq	*%r12
	leaq	168027768(%rbx), %rcx
	callq	*%r12
	leaq	168037912(%rbx), %rcx
	callq	*%r12
	leaq	168051160(%rbx), %rcx
	callq	*%r12
	leaq	168093072(%rbx), %rcx
	callq	*%r12
	addq	$168153912, %rbx        # imm = 0xA05D338
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB6_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_69;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_69
	.align	16, 0x90
_transaction_69:                        # @_transaction_69
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rdi
	movl	48(%rbp), %r15d
	leaq	15832(%rdi), %r14
	cmpl	$0, 15848(%rdi)
	je	.LBB7_2
# BB#1:
	leaq	15696(%rdi), %rcx
	movl	%r15d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB7_2:
	movl	%r15d, %ebx
	subl	%esi, %ebx
	incl	%ebx
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%ebx, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB7_8
# BB#3:
	testl	%esi, %esi
	jne	.LBB7_5
# BB#4:
	movl	$0, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%r14, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB7_5
# BB#9:
	leaq	167569240(%rdi), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB7_5:
	testl	%r15d, %r15d
	sete	%al
	cmpl	$1, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB7_7
# BB#6:
	movl	$1, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB7_7
# BB#10:
	addq	$167620656, %rdi        # imm = 0x9FDB030
	movq	%rdi, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB7_7:
	movl	%ebx, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB7_8:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_70;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_70
	.align	16, 0x90
_transaction_70:                        # @_transaction_70
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$56, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	16504(%rbx), %r15
	cmpl	$0, 16520(%rbx)
	je	.LBB8_2
# BB#1:
	leaq	16368(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB8_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB8_40
# BB#3:
	testl	%esi, %esi
	jne	.LBB8_5
# BB#4:
	movl	$0, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_5
# BB#41:
	leaq	167320120(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167554976(%rbx), %rcx
	callq	*%r13
	leaq	167590880(%rbx), %rcx
	callq	*%r13
	leaq	167601344(%rbx), %rcx
	callq	*%r13
	leaq	167868496(%rbx), %rcx
	callq	*%r13
.LBB8_5:
	testl	%r14d, %r14d
	sete	%al
	cmpl	$1, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_7
# BB#6:
	movl	$1, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_7
# BB#42:
	leaq	167320456(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167591048(%rbx), %rcx
	callq	*%r13
	leaq	167601680(%rbx), %rcx
	callq	*%r13
.LBB8_7:
	cmpl	$2, %r14d
	setb	%al
	cmpl	$2, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_9
# BB#8:
	movl	$2, 40(%rsp)
	movl	$2, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_9
# BB#43:
	leaq	167381424(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167591216(%rbx), %rcx
	callq	*%r13
	leaq	167669688(%rbx), %rcx
	callq	*%r13
.LBB8_9:
	cmpl	$3, %r14d
	setb	%al
	cmpl	$3, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_11
# BB#10:
	movl	$3, 40(%rsp)
	movl	$3, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_11
# BB#44:
	leaq	167381760(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167596648(%rbx), %rcx
	callq	*%r13
	leaq	167664992(%rbx), %rcx
	callq	*%r13
	leaq	167670024(%rbx), %rcx
	callq	*%r13
	leaq	167723024(%rbx), %rcx
	callq	*%r13
	leaq	167789272(%rbx), %rcx
	callq	*%r13
	leaq	167976320(%rbx), %rcx
	callq	*%r13
.LBB8_11:
	cmpl	$4, %r14d
	setb	%al
	cmpl	$4, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_13
# BB#12:
	movl	$4, 40(%rsp)
	movl	$4, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_13
# BB#45:
	leaq	167413968(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167606544(%rbx), %rcx
	callq	*%r13
	leaq	167727720(%rbx), %rcx
	callq	*%r13
.LBB8_13:
	cmpl	$5, %r14d
	setb	%al
	cmpl	$5, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_15
# BB#14:
	movl	$5, 40(%rsp)
	movl	$5, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_15
# BB#46:
	leaq	167414304(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167606880(%rbx), %rcx
	callq	*%r13
	leaq	167728056(%rbx), %rcx
	callq	*%r13
.LBB8_15:
	cmpl	$6, %r14d
	setb	%al
	cmpl	$6, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_17
# BB#16:
	movl	$6, 40(%rsp)
	movl	$6, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_17
# BB#47:
	leaq	167449616(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167793968(%rbx), %rcx
	callq	*%r13
.LBB8_17:
	cmpl	$7, %r14d
	setb	%al
	cmpl	$7, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_19
# BB#18:
	movl	$7, 40(%rsp)
	movl	$7, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_19
# BB#48:
	leaq	ng0(%rip), %rcx
	movl	$11, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
.LBB8_19:
	cmpl	$8, %r14d
	setb	%al
	cmpl	$8, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_21
# BB#20:
	movl	$8, 40(%rsp)
	movl	$8, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_21
# BB#49:
	leaq	167482160(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB8_21:
	cmpl	$9, %r14d
	setb	%al
	cmpl	$9, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_23
# BB#22:
	movl	$9, 40(%rsp)
	movl	$9, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_23
# BB#50:
	leaq	167482496(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB8_23:
	cmpl	$10, %r14d
	setb	%al
	cmpl	$10, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_25
# BB#24:
	movl	$10, 40(%rsp)
	movl	$10, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_25
# BB#51:
	leaq	167335208(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB8_25:
	cmpl	$11, %r14d
	setb	%al
	cmpl	$11, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_27
# BB#26:
	movl	$11, 40(%rsp)
	movl	$11, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_27
# BB#52:
	leaq	167335544(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB8_27:
	cmpl	$12, %r14d
	setb	%al
	cmpl	$12, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_29
# BB#28:
	movl	$12, 40(%rsp)
	movl	$12, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_29
# BB#53:
	leaq	ng1(%rip), %rcx
	movl	$16, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
.LBB8_29:
	cmpl	$13, %r14d
	setb	%al
	cmpl	$13, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_31
# BB#30:
	movl	$13, 40(%rsp)
	movl	$13, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_31
# BB#54:
	leaq	ng2(%rip), %rcx
	movl	$12, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
.LBB8_31:
	cmpl	$14, %r14d
	setb	%al
	cmpl	$14, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_33
# BB#32:
	movl	$14, 40(%rsp)
	movl	$14, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_33
# BB#55:
	leaq	ng3(%rip), %rcx
	movl	$14, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
.LBB8_33:
	cmpl	$15, %r14d
	setb	%al
	cmpl	$15, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_35
# BB#34:
	movl	$15, 40(%rsp)
	movl	$15, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_35
# BB#56:
	leaq	ng4(%rip), %rcx
	movl	$12, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
.LBB8_35:
	cmpl	$16, %r14d
	setb	%al
	cmpl	$16, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_37
# BB#36:
	movl	$16, 40(%rsp)
	movl	$16, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_37
# BB#57:
	leaq	ng5(%rip), %rcx
	movl	$14, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
.LBB8_37:
	cmpl	$17, %r14d
	setb	%al
	cmpl	$17, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB8_39
# BB#38:
	movl	$17, 40(%rsp)
	movl	$17, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB8_39
# BB#58:
	leaq	167850280(%rbx), %rcx
	movl	%edi, %r13d
	movq	__imp__iki_schedule_process_priority(%rip), %rdi
	callq	*%rdi
	leaq	167908136(%rbx), %rcx
	callq	*%rdi
	leaq	167912088(%rbx), %rcx
	callq	*%rdi
	leaq	167921880(%rbx), %rcx
	callq	*%rdi
	leaq	167926272(%rbx), %rcx
	callq	*%rdi
	leaq	167935976(%rbx), %rcx
	callq	*%rdi
	leaq	167941344(%rbx), %rcx
	callq	*%rdi
	leaq	167988952(%rbx), %rcx
	callq	*%rdi
	movl	%r13d, %edi
.LBB8_39:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$16368, %rbx            # imm = 0x3FF0
	leaq	ng6(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$10, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB8_40:
	addq	$56, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_71;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_71
	.align	16, 0x90
_transaction_71:                        # @_transaction_71
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	16824(%rbx), %r14
	cmpl	$0, 16840(%rbx)
	je	.LBB9_2
# BB#1:
	leaq	16688(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB9_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB9_4
# BB#3:
	addq	$168250280, %rbx        # imm = 0xA074BA8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB9_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_72;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_72
	.align	16, 0x90
_transaction_72:                        # @_transaction_72
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	16984(%rbx), %r14
	cmpl	$0, 17000(%rbx)
	je	.LBB10_2
# BB#1:
	leaq	16848(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB10_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB10_4
# BB#3:
	addq	$167229544, %rbx        # imm = 0x9F7B868
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB10_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_73;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_73
	.align	16, 0x90
_transaction_73:                        # @_transaction_73
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	17144(%rbx), %r14
	cmpl	$0, 17160(%rbx)
	je	.LBB11_2
# BB#1:
	leaq	17008(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB11_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB11_4
# BB#3:
	addq	$167224600, %rbx        # imm = 0x9F7A518
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB11_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_74;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_74
	.align	16, 0x90
_transaction_74:                        # @_transaction_74
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	17304(%rbx), %r14
	cmpl	$0, 17320(%rbx)
	je	.LBB12_2
# BB#1:
	leaq	17168(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB12_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB12_4
# BB#3:
	addq	$167219656, %rbx        # imm = 0x9F791C8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB12_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_75;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_75
	.align	16, 0x90
_transaction_75:                        # @_transaction_75
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	17464(%rbx), %r15
	cmpl	$0, 17480(%rbx)
	je	.LBB13_2
# BB#1:
	leaq	17328(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB13_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB13_4
# BB#3:
	leaq	167239432(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	17328(%rbx), %rcx
	addq	$162090568, %rbx        # imm = 0x9A94E48
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB13_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_76;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_76
	.align	16, 0x90
_transaction_76:                        # @_transaction_76
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	17704(%rbx), %r15
	cmpl	$0, 17720(%rbx)
	je	.LBB14_2
# BB#1:
	leaq	17568(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB14_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB14_4
# BB#3:
	leaq	167234488(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	17568(%rbx), %rcx
	addq	$162090568, %rbx        # imm = 0x9A94E48
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB14_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_164;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_164
	.align	16, 0x90
_transaction_164:                       # @_transaction_164
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %rbx
	movl	48(%rbp), %edi
	leaq	162090680(%rcx), %r14
	cmpl	$0, 162090696(%rcx)
	je	.LBB15_2
# BB#1:
	addq	$162090568, %rcx        # imm = 0x9A94E48
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%rbx, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %rbx
.LBB15_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB15_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB15_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_257385;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257385
	.align	16, 0x90
_execute_257385:                        # @_execute_257385
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	%rcx, %rbx
	.align	16, 0x90
.LBB16_1:                               # =>This Inner Loop Header: Depth=1
	cmpq	$0, 584(%rsi)
	jne	.LBB16_1
# BB#2:
	leaq	40(%rsi), %r14
	movl	$1, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	leaq	-40(%rbp), %rdi
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	664(%rsi), %rdx
	addq	$167163368, %rbx        # imm = 0x9F6B5E8
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_udp_matching_64(%rip)
	movsbl	%al, %eax
	testl	%eax, %eax
	je	.LBB16_4
# BB#3:
	addq	$680, %rsi              # imm = 0x2A8
	movl	$1, 32(%rsp)
	leaq	-40(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
.LBB16_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_257382;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257382
	.align	16, 0x90
_execute_257382:                        # @_execute_257382
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movl	ng7(%rip), %eax
	andl	$1, %eax
	movl	%eax, 2200(%rdx)
	movl	ng7+4(%rip), %eax
	andl	$1, %eax
	movl	%eax, 2204(%rdx)
	leaq	936(%rdx), %rcx
	addq	$2176, %rdx             # imm = 0x880
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast(%rip)
	addq	$32, %rsp
	popq	%rbp
	ret

	.def	 _execute_257383;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257383
	.align	16, 0x90
_execute_257383:                        # @_execute_257383
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movq	720(%rsi), %rdx
	leaq	2368(%rsi), %rcx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	40(%rsi), %rcx
	addq	$2344, %rsi             # imm = 0x928
	movq	$0, 32(%rsp)
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_slow_specify_delay_dd0(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_8;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_8
	.align	16, 0x90
_execute_8:                             # @_execute_8
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB19_1:                               # =>This Inner Loop Header: Depth=1
	movl	$1, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1464(%rsi), %rax
	testq	%rax, %rax
	je	.LBB19_5
# BB#2:                                 #   in Loop: Header=BB19_1 Depth=1
	jmpq	*%rax
.Ltmp59:                                # Block address taken
.LBB19_3:
	movb	$0, 1544(%rsi)
	movq	944(%rsi), %rax
	movl	4(%rax), %ecx
	notl	%ecx
	testl	(%rax), %ecx
	je	.LBB19_4
# BB#6:
	movl	1420(%rsi), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1680(%rsi), %rdx
	testl	1416(%rsi), %eax
	je	.LBB19_7
# BB#9:
	leaq	ng8(%rip), %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %rdi
	xorl	%r9d, %r9d
	callq	*%rdi
	leaq	824(%rsi), %rcx
	leaq	1712(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB19_8
.LBB19_4:
	leaq	880(%rsi), %rcx
	leaq	1680(%rsi), %rdx
	leaq	ng7(%rip), %rdi
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	824(%rsi), %rcx
	leaq	1712(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	jmp	.LBB19_5
.LBB19_7:
	leaq	ng7(%rip), %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %rdi
	xorl	%r9d, %r9d
	callq	*%rdi
	leaq	824(%rsi), %rcx
	leaq	1712(%rsi), %rdx
	leaq	ng8(%rip), %r8
.LBB19_8:
	xorl	%r9d, %r9d
	callq	*%rdi
.LBB19_5:
	movb	$1, 1544(%rsi)
	leaq	.Ltmp59(%rip), %rax
	movq	%rax, 1464(%rsi)
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_10;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_10
	.align	16, 0x90
_execute_10:                            # @_execute_10
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB20_1:                               # =>This Inner Loop Header: Depth=1
	movl	$2, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1784(%rsi), %rax
	testq	%rax, %rax
	je	.LBB20_4
# BB#2:                                 #   in Loop: Header=BB20_1 Depth=1
	jmpq	*%rax
.Ltmp63:                                # Block address taken
.LBB20_3:
	movb	$0, 1864(%rsi)
	movq	328(%rsi), %r8
	leaq	712(%rsi), %rcx
	leaq	1872(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB20_4:
	movb	$1, 1864(%rsi)
	leaq	.Ltmp63(%rip), %rax
	movq	%rax, 1784(%rsi)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257389;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257389
	.align	16, 0x90
_execute_257389:                        # @_execute_257389
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$72, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rdi
	movl	$1, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB21_1
# BB#7:
	movl	$1, -32(%rbp)
	jmp	.LBB21_2
.LBB21_1:
	testl	%eax, %eax
	je	.LBB21_2
# BB#8:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB21_2:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	je	.LBB21_4
# BB#3:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB21_4:
	testb	%al, %al
	je	.LBB21_5
# BB#9:
	movl	$1, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	ng9(%rip), %eax
	jne	.LBB21_12
# BB#10:
	movl	4(%rdi), %eax
	cmpl	ng9+4(%rip), %eax
	jne	.LBB21_12
# BB#11:
	movl	$1, -40(%rbp)
.LBB21_12:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB21_13
# BB#16:
	movl	$1, -48(%rbp)
	jmp	.LBB21_14
.LBB21_5:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB21_6
.LBB21_13:
	testl	%eax, %eax
	je	.LBB21_14
# BB#17:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB21_14:
	movl	-32(%rbp), %eax
	orl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB21_6
# BB#15:
	orl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	notl	%eax
	andl	-32(%rbp), %eax
	notl	%eax
	andl	-52(%rbp), %eax
	movl	-44(%rbp), %ecx
	notl	%ecx
	andl	-48(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -52(%rbp)
.LBB21_6:
	leaq	3208(%rsi), %rcx
	leaq	-56(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3184, %rsi             # imm = 0xC70
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$72, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257390;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257390
	.align	16, 0x90
_execute_257390:                        # @_execute_257390
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	608(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -16(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -12(%rbp)
	je	.LBB22_2
# BB#1:
	orl	%eax, -16(%rbp)
.LBB22_2:
	leaq	3376(%rsi), %rcx
	leaq	-16(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3352, %rsi             # imm = 0xD18
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257391;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257391
	.align	16, 0x90
_execute_257391:                        # @_execute_257391
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$64, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %r14
	movl	$1, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	664(%rsi), %rcx
	movl	(%rax), %edx
	movl	4(%rax), %edi
	xorl	(%rcx), %edx
	movl	4(%rcx), %eax
	movl	%edi, %ebx
	orl	%eax, %ebx
	orl	%edx, %ebx
	orl	%eax, %edi
	cmovel	%edx, %ebx
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	%edi, %eax
	notl	%eax
	andl	%ebx, %eax
	testb	$1, %al
	je	.LBB23_1
# BB#7:
	movl	$1, -40(%rbp)
	jmp	.LBB23_2
.LBB23_1:
	testl	%edi, %edi
	je	.LBB23_2
# BB#8:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB23_2:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB23_4
# BB#3:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB23_4:
	testb	%al, %al
	je	.LBB23_5
# BB#9:
	movl	$1, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rdi
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	ng9(%rip), %eax
	jne	.LBB23_15
# BB#10:
	movl	4(%rdi), %eax
	cmpl	ng9+4(%rip), %eax
	je	.LBB23_11
.LBB23_15:
	movl	$1, -48(%rbp)
.LBB23_11:
	leaq	-56(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-44(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-48(%rbp), %ecx
	testb	$1, %cl
	je	.LBB23_12
# BB#16:
	movl	$1, -56(%rbp)
	jmp	.LBB23_13
.LBB23_5:
	leaq	-64(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -64(%rbp)
	andl	$1, -60(%rbp)
	jmp	.LBB23_6
.LBB23_12:
	testl	%eax, %eax
	je	.LBB23_13
# BB#17:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -56(%rbp)
.LBB23_13:
	movl	-40(%rbp), %eax
	andl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-36(%rbp), %eax
	orl	-52(%rbp), %eax
	movl	%eax, -60(%rbp)
	je	.LBB23_6
# BB#14:
	orl	%eax, -64(%rbp)
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-60(%rbp), %ecx
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -64(%rbp)
.LBB23_6:
	leaq	3544(%rsi), %rcx
	leaq	-64(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	488(%rsi), %rcx
	addq	$3520, %rsi             # imm = 0xDC0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_257392;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257392
	.align	16, 0x90
_execute_257392:                        # @_execute_257392
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	1328(%rsi), %rcx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlog_signal_handle_value_with_setback(%rip)
	leaq	3712(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3688, %rsi             # imm = 0xE68
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_11;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_11
	.align	16, 0x90
_execute_11:                            # @_execute_11
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	712(%rsi), %rcx
	addq	$2024, %rsi             # imm = 0x7E8
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257393;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257393
	.align	16, 0x90
_execute_257393:                        # @_execute_257393
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	992(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	leaq	3880(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3856, %rsi             # imm = 0xF10
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257394;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257394
	.align	16, 0x90
_execute_257394:                        # @_execute_257394
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	1160(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	leaq	4048(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$4024, %rsi             # imm = 0xFB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257395;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257395
	.align	16, 0x90
_execute_257395:                        # @_execute_257395
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	1272(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	leaq	4216(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4192, %rsi             # imm = 0x1060
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _transaction_165;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_165
	.align	16, 0x90
_transaction_165:                       # @_transaction_165
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	28904(%rbx), %r14
	cmpl	$0, 28920(%rbx)
	je	.LBB29_2
# BB#1:
	leaq	28768(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB29_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB29_4
# BB#3:
	leaq	167833464(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	leaq	167859768(%rbx), %rcx
	callq	*%r12
	leaq	167869000(%rbx), %rcx
	callq	*%r12
	leaq	167904248(%rbx), %rcx
	callq	*%r12
	leaq	167908304(%rbx), %rcx
	callq	*%r12
	leaq	167917016(%rbx), %rcx
	callq	*%r12
	leaq	167930712(%rbx), %rcx
	callq	*%r12
	leaq	167983856(%rbx), %rcx
	callq	*%r12
	addq	$168122248, %rbx        # imm = 0xA055788
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB29_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_166;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_166
	.align	16, 0x90
_transaction_166:                       # @_transaction_166
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	29328(%rbx), %r14
	cmpl	$0, 29344(%rbx)
	je	.LBB30_2
# BB#1:
	leaq	29192(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB30_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB30_4
# BB#3:
	addq	$167303104, %rbx        # imm = 0x9F8D7C0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB30_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_167;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_167
	.align	16, 0x90
_transaction_167:                       # @_transaction_167
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	29488(%rbx), %r14
	cmpl	$0, 29504(%rbx)
	je	.LBB31_2
# BB#1:
	leaq	29352(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB31_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB31_4
# BB#3:
	leaq	167569576(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	leaq	167620992(%rbx), %rcx
	callq	*%r12
	leaq	167644808(%rbx), %rcx
	callq	*%r12
	leaq	167679024(%rbx), %rcx
	callq	*%r12
	leaq	167702840(%rbx), %rcx
	callq	*%r12
	leaq	167745272(%rbx), %rcx
	callq	*%r12
	leaq	167769088(%rbx), %rcx
	callq	*%r12
	addq	$167803304, %rbx        # imm = 0xA0079A8
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB31_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_168;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_168
	.align	16, 0x90
_transaction_168:                       # @_transaction_168
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	29912(%rbx), %r14
	cmpl	$0, 29928(%rbx)
	je	.LBB32_2
# BB#1:
	leaq	29776(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB32_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB32_4
# BB#3:
	leaq	167569744(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	leaq	167621160(%rbx), %rcx
	callq	*%r12
	leaq	167644976(%rbx), %rcx
	callq	*%r12
	leaq	167679192(%rbx), %rcx
	callq	*%r12
	leaq	167703008(%rbx), %rcx
	callq	*%r12
	leaq	167745440(%rbx), %rcx
	callq	*%r12
	leaq	167769256(%rbx), %rcx
	callq	*%r12
	addq	$167803472, %rbx        # imm = 0xA007A50
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB32_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_169;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_169
	.align	16, 0x90
_transaction_169:                       # @_transaction_169
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	30336(%rbx), %r14
	cmpl	$0, 30352(%rbx)
	je	.LBB33_2
# BB#1:
	leaq	30200(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB33_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB33_4
# BB#3:
	addq	$167533424, %rbx        # imm = 0x9FC5B70
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB33_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_170;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_170
	.align	16, 0x90
_transaction_170:                       # @_transaction_170
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	30496(%rbx), %r14
	cmpl	$0, 30512(%rbx)
	je	.LBB34_2
# BB#1:
	leaq	30360(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB34_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB34_4
# BB#3:
	addq	$167538368, %rbx        # imm = 0x9FC6EC0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB34_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_171;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_171
	.align	16, 0x90
_transaction_171:                       # @_transaction_171
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	30656(%rbx), %r15
	cmpl	$0, 30672(%rbx)
	je	.LBB35_2
# BB#1:
	leaq	30520(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB35_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB35_4
# BB#3:
	leaq	167884872(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$30520, %rbx            # imm = 0x7738
	leaq	ng10(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB35_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_172;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_172
	.align	16, 0x90
_transaction_172:                       # @_transaction_172
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	30816(%rbx), %r15
	cmpl	$0, 30832(%rbx)
	je	.LBB36_2
# BB#1:
	leaq	30680(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB36_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB36_4
# BB#3:
	leaq	167885040(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$30680, %rbx            # imm = 0x77D8
	leaq	ng10(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB36_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_173;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_173
	.align	16, 0x90
_transaction_173:                       # @_transaction_173
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	30976(%rbx), %r15
	cmpl	$0, 30992(%rbx)
	je	.LBB37_2
# BB#1:
	leaq	30840(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB37_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB37_4
# BB#3:
	leaq	167885208(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$30840, %rbx            # imm = 0x7878
	leaq	ng11(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB37_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_174;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_174
	.align	16, 0x90
_transaction_174:                       # @_transaction_174
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	31136(%rbx), %r15
	cmpl	$0, 31152(%rbx)
	je	.LBB38_2
# BB#1:
	leaq	31000(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB38_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB38_4
# BB#3:
	leaq	167885376(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$31000, %rbx            # imm = 0x7918
	leaq	ng11(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB38_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_175;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_175
	.align	16, 0x90
_transaction_175:                       # @_transaction_175
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	31296(%rbx), %r15
	cmpl	$0, 31312(%rbx)
	je	.LBB39_2
# BB#1:
	leaq	31160(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB39_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB39_4
# BB#3:
	leaq	167885544(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$31160, %rbx            # imm = 0x79B8
	leaq	ng12(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB39_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_176;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_176
	.align	16, 0x90
_transaction_176:                       # @_transaction_176
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	31456(%rbx), %r15
	cmpl	$0, 31472(%rbx)
	je	.LBB40_2
# BB#1:
	leaq	31320(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB40_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB40_4
# BB#3:
	leaq	167890408(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$31320, %rbx            # imm = 0x7A58
	leaq	ng12(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB40_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_177;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_177
	.align	16, 0x90
_transaction_177:                       # @_transaction_177
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	31616(%rbx), %r15
	cmpl	$0, 31632(%rbx)
	je	.LBB41_2
# BB#1:
	leaq	31480(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB41_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB41_4
# BB#3:
	leaq	167890576(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$31480, %rbx            # imm = 0x7AF8
	leaq	ng13(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB41_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_178;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_178
	.align	16, 0x90
_transaction_178:                       # @_transaction_178
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	31776(%rbx), %r15
	cmpl	$0, 31792(%rbx)
	je	.LBB42_2
# BB#1:
	leaq	31640(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB42_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB42_4
# BB#3:
	leaq	167890744(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$31640, %rbx            # imm = 0x7B98
	leaq	ng13(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB42_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_179;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_179
	.align	16, 0x90
_transaction_179:                       # @_transaction_179
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	31936(%rbx), %r14
	cmpl	$0, 31952(%rbx)
	je	.LBB43_2
# BB#1:
	leaq	31800(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB43_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB43_4
# BB#3:
	addq	$167565184, %rbx        # imm = 0x9FCD780
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB43_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_180;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_180
	.align	16, 0x90
_transaction_180:                       # @_transaction_180
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	32232(%rbx), %r14
	movq	%r14, 32(%rsp)
	movq	%r15, %rcx
	movl	%r8d, %edx
	movl	%esi, %r8d
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_handle_force_release_and_driver_resolution(%rip)
	cmpl	$1, %eax
	je	.LBB44_6
# BB#1:
	leaq	32368(%rbx), %r12
	cmpl	$0, 32384(%rbx)
	je	.LBB44_3
# BB#2:
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r14, %rcx
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB44_3:
	subl	%esi, %edi
	incl	%edi
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB44_5
# BB#4:
	movq	%r14, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_compare_resolved_strength(%rip)
	testl	%eax, %eax
	je	.LBB44_6
.LBB44_5:
	addq	$167587136, %rbx        # imm = 0x9FD2D40
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	%r14, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_copy_resolved_strength(%rip)
.LBB44_6:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_181;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_181
	.align	16, 0x90
_transaction_181:                       # @_transaction_181
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	32568(%rbx), %r15
	cmpl	$0, 32584(%rbx)
	je	.LBB45_2
# BB#1:
	leaq	32432(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB45_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB45_4
# BB#3:
	leaq	167543312(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	32432(%rbx), %rcx
	addq	$162093936, %rbx        # imm = 0x9A95B70
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB45_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_182;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_182
	.align	16, 0x90
_transaction_182:                       # @_transaction_182
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	32808(%rbx), %r14
	cmpl	$0, 32824(%rbx)
	je	.LBB46_2
# BB#1:
	leaq	32672(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB46_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB46_4
# BB#3:
	leaq	167568904(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$167873760, %rbx        # imm = 0xA018CE0
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB46_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_183;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_183
	.align	16, 0x90
_transaction_183:                       # @_transaction_183
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	33232(%rbx), %r14
	cmpl	$0, 33248(%rbx)
	je	.LBB47_2
# BB#1:
	leaq	33096(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB47_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB47_4
# BB#3:
	leaq	167620320(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$167873928, %rbx        # imm = 0xA018D88
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB47_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_184;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_184
	.align	16, 0x90
_transaction_184:                       # @_transaction_184
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	33656(%rbx), %r14
	cmpl	$0, 33672(%rbx)
	je	.LBB48_2
# BB#1:
	leaq	33520(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB48_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB48_4
# BB#3:
	leaq	167644136(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$168096792, %rbx        # imm = 0xA04F418
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB48_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_185;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_185
	.align	16, 0x90
_transaction_185:                       # @_transaction_185
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	34080(%rbx), %r14
	cmpl	$0, 34096(%rbx)
	je	.LBB49_2
# BB#1:
	leaq	33944(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB49_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB49_4
# BB#3:
	leaq	167678352(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$168096960, %rbx        # imm = 0xA04F4C0
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB49_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_186;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_186
	.align	16, 0x90
_transaction_186:                       # @_transaction_186
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	34504(%rbx), %r14
	cmpl	$0, 34520(%rbx)
	je	.LBB50_2
# BB#1:
	leaq	34368(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB50_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB50_4
# BB#3:
	leaq	167702168(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$168097128, %rbx        # imm = 0xA04F568
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB50_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_187;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_187
	.align	16, 0x90
_transaction_187:                       # @_transaction_187
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	34928(%rbx), %r14
	cmpl	$0, 34944(%rbx)
	je	.LBB51_2
# BB#1:
	leaq	34792(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB51_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB51_4
# BB#3:
	leaq	167744600(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$168097296, %rbx        # imm = 0xA04F610
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB51_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_188;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_188
	.align	16, 0x90
_transaction_188:                       # @_transaction_188
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	35352(%rbx), %r14
	cmpl	$0, 35368(%rbx)
	je	.LBB52_2
# BB#1:
	leaq	35216(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB52_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB52_4
# BB#3:
	leaq	167768416(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$168097464, %rbx        # imm = 0xA04F6B8
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB52_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_189;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_189
	.align	16, 0x90
_transaction_189:                       # @_transaction_189
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	35776(%rbx), %r14
	cmpl	$0, 35792(%rbx)
	je	.LBB53_2
# BB#1:
	leaq	35640(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB53_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB53_4
# BB#3:
	leaq	167802632(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$168097632, %rbx        # imm = 0xA04F760
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB53_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_190;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_190
	.align	16, 0x90
_transaction_190:                       # @_transaction_190
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	36200(%rbx), %r14
	cmpl	$0, 36216(%rbx)
	je	.LBB54_2
# BB#1:
	leaq	36064(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB54_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB54_4
# BB#3:
	leaq	167579280(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	leaq	167630696(%rbx), %rcx
	callq	*%r12
	leaq	167654512(%rbx), %rcx
	callq	*%r12
	leaq	167688728(%rbx), %rcx
	callq	*%r12
	leaq	167712544(%rbx), %rcx
	callq	*%r12
	leaq	167754976(%rbx), %rcx
	callq	*%r12
	leaq	167778792(%rbx), %rcx
	callq	*%r12
	addq	$167813008, %rbx        # imm = 0xA009F90
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB54_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_191;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_191
	.align	16, 0x90
_transaction_191:                       # @_transaction_191
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	36360(%rbx), %r15
	cmpl	$0, 36376(%rbx)
	je	.LBB55_2
# BB#1:
	leaq	36224(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB55_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB55_4
# BB#3:
	leaq	167574016(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	36224(%rbx), %rcx
	addq	$162094880, %rbx        # imm = 0x9A95F20
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB55_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_192;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_192
	.align	16, 0x90
_transaction_192:                       # @_transaction_192
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	36600(%rbx), %r15
	cmpl	$0, 36616(%rbx)
	je	.LBB56_2
# BB#1:
	leaq	36464(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB56_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB56_4
# BB#3:
	leaq	167625432(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	36464(%rbx), %rcx
	addq	$162094880, %rbx        # imm = 0x9A95F20
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB56_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_193;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_193
	.align	16, 0x90
_transaction_193:                       # @_transaction_193
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	36840(%rbx), %r15
	cmpl	$0, 36856(%rbx)
	je	.LBB57_2
# BB#1:
	leaq	36704(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB57_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB57_4
# BB#3:
	leaq	167649248(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	36704(%rbx), %rcx
	addq	$162094880, %rbx        # imm = 0x9A95F20
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB57_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_194;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_194
	.align	16, 0x90
_transaction_194:                       # @_transaction_194
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	37080(%rbx), %r15
	cmpl	$0, 37096(%rbx)
	je	.LBB58_2
# BB#1:
	leaq	36944(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB58_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB58_4
# BB#3:
	leaq	167683464(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	36944(%rbx), %rcx
	addq	$162094880, %rbx        # imm = 0x9A95F20
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB58_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_195;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_195
	.align	16, 0x90
_transaction_195:                       # @_transaction_195
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	37320(%rbx), %r15
	cmpl	$0, 37336(%rbx)
	je	.LBB59_2
# BB#1:
	leaq	37184(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB59_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB59_4
# BB#3:
	leaq	167707280(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	37184(%rbx), %rcx
	addq	$162098504, %rbx        # imm = 0x9A96D48
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB59_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_196;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_196
	.align	16, 0x90
_transaction_196:                       # @_transaction_196
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	37560(%rbx), %r15
	cmpl	$0, 37576(%rbx)
	je	.LBB60_2
# BB#1:
	leaq	37424(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB60_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB60_4
# BB#3:
	leaq	167749712(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	37424(%rbx), %rcx
	addq	$162098504, %rbx        # imm = 0x9A96D48
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB60_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_197;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_197
	.align	16, 0x90
_transaction_197:                       # @_transaction_197
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	37800(%rbx), %r15
	cmpl	$0, 37816(%rbx)
	je	.LBB61_2
# BB#1:
	leaq	37664(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB61_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB61_4
# BB#3:
	leaq	167773528(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	37664(%rbx), %rcx
	addq	$162098504, %rbx        # imm = 0x9A96D48
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB61_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_198;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_198
	.align	16, 0x90
_transaction_198:                       # @_transaction_198
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	38040(%rbx), %r15
	cmpl	$0, 38056(%rbx)
	je	.LBB62_2
# BB#1:
	leaq	37904(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB62_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB62_4
# BB#3:
	leaq	167807744(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	37904(%rbx), %rcx
	addq	$162098504, %rbx        # imm = 0x9A96D48
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB62_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_199;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_199
	.align	16, 0x90
_transaction_199:                       # @_transaction_199
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$56, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	38280(%rbx), %r15
	cmpl	$0, 38296(%rbx)
	je	.LBB63_2
# BB#1:
	leaq	38144(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB63_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB63_4
# BB#3:
	leaq	167308536(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167555480(%rbx), %rcx
	callq	*%r13
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$38144, %rbx            # imm = 0x9500
	leaq	ng14(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$5, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB63_4:
	addq	$56, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_200;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_200
	.align	16, 0x90
_transaction_200:                       # @_transaction_200
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	38704(%rbx), %r14
	cmpl	$0, 38720(%rbx)
	je	.LBB64_2
# BB#1:
	leaq	38568(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB64_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB64_4
# BB#3:
	addq	$167551360, %rbx        # imm = 0x9FCA180
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB64_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_201;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_201
	.align	16, 0x90
_transaction_201:                       # @_transaction_201
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	38872(%rbx), %r15
	cmpl	$0, 38888(%rbx)
	je	.LBB65_2
# BB#1:
	leaq	38736(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB65_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB65_4
# BB#3:
	leaq	38736(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB65_5
.LBB65_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	38736(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162094192, %rbx        # imm = 0x9A95C70
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB65_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_202;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_202
	.align	16, 0x90
_transaction_202:                       # @_transaction_202
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	39120(%rbx), %r15
	cmpl	$0, 39136(%rbx)
	je	.LBB66_2
# BB#1:
	leaq	38984(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB66_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB66_4
# BB#3:
	leaq	38984(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB66_5
.LBB66_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	38984(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162094192, %rbx        # imm = 0x9A95C70
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB66_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_203;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_203
	.align	16, 0x90
_transaction_203:                       # @_transaction_203
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	39368(%rbx), %r15
	cmpl	$0, 39384(%rbx)
	je	.LBB67_2
# BB#1:
	leaq	39232(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB67_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB67_4
# BB#3:
	leaq	39232(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB67_5
.LBB67_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	39232(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162094192, %rbx        # imm = 0x9A95C70
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB67_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_204;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_204
	.align	16, 0x90
_transaction_204:                       # @_transaction_204
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r13
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	39480(%rbx), %r15
	movq	%r15, 32(%rsp)
	movq	%r13, %rcx
	movl	%r8d, %edx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_handle_force_release_and_driver_resolution(%rip)
	cmpl	$1, %eax
	je	.LBB68_6
# BB#1:
	leaq	39616(%rbx), %r12
	cmpl	$0, 39632(%rbx)
	je	.LBB68_3
# BB#2:
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r13
.LBB68_3:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB68_5
# BB#4:
	movq	%r15, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_compare_resolved_strength(%rip)
	testl	%eax, %eax
	je	.LBB68_6
.LBB68_5:
	leaq	167740688(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	%r15, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_copy_resolved_strength(%rip)
	addq	$162094192, %rbx        # imm = 0x9A95C70
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB68_6:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_205;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_205
	.align	16, 0x90
_transaction_205:                       # @_transaction_205
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	39904(%rbx), %r15
	cmpl	$0, 39920(%rbx)
	je	.LBB69_2
# BB#1:
	leaq	39768(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB69_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB69_4
# BB#3:
	leaq	39768(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB69_5
.LBB69_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	39768(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162097816, %rbx        # imm = 0x9A96A98
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB69_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_206;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_206
	.align	16, 0x90
_transaction_206:                       # @_transaction_206
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	40152(%rbx), %r15
	cmpl	$0, 40168(%rbx)
	je	.LBB70_2
# BB#1:
	leaq	40016(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB70_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB70_4
# BB#3:
	leaq	40016(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB70_5
.LBB70_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	40016(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162097816, %rbx        # imm = 0x9A96A98
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB70_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_207;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_207
	.align	16, 0x90
_transaction_207:                       # @_transaction_207
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	40400(%rbx), %r15
	cmpl	$0, 40416(%rbx)
	je	.LBB71_2
# BB#1:
	leaq	40264(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB71_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB71_4
# BB#3:
	leaq	40264(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB71_5
.LBB71_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	40264(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162097816, %rbx        # imm = 0x9A96A98
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB71_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_208;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_208
	.align	16, 0x90
_transaction_208:                       # @_transaction_208
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r13
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	40512(%rbx), %r15
	movq	%r15, 32(%rsp)
	movq	%r13, %rcx
	movl	%r8d, %edx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_handle_force_release_and_driver_resolution(%rip)
	cmpl	$1, %eax
	je	.LBB72_6
# BB#1:
	leaq	40648(%rbx), %r12
	cmpl	$0, 40664(%rbx)
	je	.LBB72_3
# BB#2:
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r13
.LBB72_3:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB72_5
# BB#4:
	movq	%r15, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_compare_resolved_strength(%rip)
	testl	%eax, %eax
	je	.LBB72_6
.LBB72_5:
	leaq	167546120(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	%r15, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_copy_resolved_strength(%rip)
	addq	$162097816, %rbx        # imm = 0x9A96A98
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB72_6:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_209;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_209
	.align	16, 0x90
_transaction_209:                       # @_transaction_209
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	40928(%rbx), %r15
	cmpl	$0, 40944(%rbx)
	je	.LBB73_2
# BB#1:
	leaq	40792(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB73_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB73_4
# BB#3:
	leaq	167523008(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167591384(%rbx), %rcx
	callq	*%r13
	leaq	167873592(%rbx), %rcx
	callq	*%r13
	leaq	167911248(%rbx), %rcx
	callq	*%r13
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	40792(%rbx), %rcx
	addq	$162105112, %rbx        # imm = 0x9A98718
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB73_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_210;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_210
	.align	16, 0x90
_transaction_210:                       # @_transaction_210
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	41352(%rbx), %r15
	cmpl	$0, 41368(%rbx)
	je	.LBB74_2
# BB#1:
	leaq	41216(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB74_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB74_4
# BB#3:
	leaq	167560088(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	41216(%rbx), %rcx
	addq	$162099768, %rbx        # imm = 0x9A97238
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB74_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_211;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_211
	.align	16, 0x90
_transaction_211:                       # @_transaction_211
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	41520(%rbx), %r15
	cmpl	$0, 41536(%rbx)
	je	.LBB75_2
# BB#1:
	leaq	41384(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB75_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB75_4
# BB#3:
	leaq	41384(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB75_5
.LBB75_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	41384(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162090840, %rbx        # imm = 0x9A94F58
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB75_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_212;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_212
	.align	16, 0x90
_transaction_212:                       # @_transaction_212
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	41768(%rbx), %r15
	cmpl	$0, 41784(%rbx)
	je	.LBB76_2
# BB#1:
	leaq	41632(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB76_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB76_4
# BB#3:
	leaq	41632(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB76_5
.LBB76_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	41632(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162090840, %rbx        # imm = 0x9A94F58
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB76_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_213;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_213
	.align	16, 0x90
_transaction_213:                       # @_transaction_213
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	42016(%rbx), %r15
	cmpl	$0, 42032(%rbx)
	je	.LBB77_2
# BB#1:
	leaq	41880(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB77_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB77_4
# BB#3:
	leaq	41880(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB77_5
.LBB77_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	41880(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162090840, %rbx        # imm = 0x9A94F58
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB77_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_214;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_214
	.align	16, 0x90
_transaction_214:                       # @_transaction_214
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r13
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	42128(%rbx), %r15
	movq	%r15, 32(%rsp)
	movq	%r13, %rcx
	movl	%r8d, %edx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_handle_force_release_and_driver_resolution(%rip)
	cmpl	$1, %eax
	je	.LBB78_6
# BB#1:
	leaq	42264(%rbx), %r12
	cmpl	$0, 42280(%rbx)
	je	.LBB78_3
# BB#2:
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r13
.LBB78_3:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB78_5
# BB#4:
	movq	%r15, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_compare_resolved_strength(%rip)
	testl	%eax, %eax
	je	.LBB78_6
.LBB78_5:
	leaq	167430720(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	%r15, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_copy_resolved_strength(%rip)
	addq	$162090840, %rbx        # imm = 0x9A94F58
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB78_6:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_215;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_215
	.align	16, 0x90
_transaction_215:                       # @_transaction_215
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	42552(%rbx), %r15
	cmpl	$0, 42568(%rbx)
	je	.LBB79_2
# BB#1:
	leaq	42416(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB79_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB79_4
# BB#3:
	leaq	42416(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB79_5
.LBB79_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	42416(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162091896, %rbx        # imm = 0x9A95378
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB79_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_216;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_216
	.align	16, 0x90
_transaction_216:                       # @_transaction_216
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	42800(%rbx), %r15
	cmpl	$0, 42816(%rbx)
	je	.LBB80_2
# BB#1:
	leaq	42664(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB80_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB80_4
# BB#3:
	leaq	42664(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB80_5
.LBB80_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	42664(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162091896, %rbx        # imm = 0x9A95378
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB80_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_217;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_217
	.align	16, 0x90
_transaction_217:                       # @_transaction_217
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	43048(%rbx), %r15
	cmpl	$0, 43064(%rbx)
	je	.LBB81_2
# BB#1:
	leaq	42912(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB81_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB81_4
# BB#3:
	leaq	42912(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB81_5
.LBB81_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	42912(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162091896, %rbx        # imm = 0x9A95378
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB81_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_218;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_218
	.align	16, 0x90
_transaction_218:                       # @_transaction_218
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r13
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	43160(%rbx), %r15
	movq	%r15, 32(%rsp)
	movq	%r13, %rcx
	movl	%r8d, %edx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_handle_force_release_and_driver_resolution(%rip)
	cmpl	$1, %eax
	je	.LBB82_6
# BB#1:
	leaq	43296(%rbx), %r12
	cmpl	$0, 43312(%rbx)
	je	.LBB82_3
# BB#2:
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r13
.LBB82_3:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB82_5
# BB#4:
	movq	%r15, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_compare_resolved_strength(%rip)
	testl	%eax, %eax
	je	.LBB82_6
.LBB82_5:
	leaq	167498912(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	%r15, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_copy_resolved_strength(%rip)
	addq	$162091896, %rbx        # imm = 0x9A95378
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB82_6:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_219;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_219
	.align	16, 0x90
_transaction_219:                       # @_transaction_219
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	43576(%rbx), %r15
	cmpl	$0, 43592(%rbx)
	je	.LBB83_2
# BB#1:
	leaq	43440(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB83_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB83_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	43440(%rbx), %rcx
	addq	$162092944, %rbx        # imm = 0x9A95790
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB83_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_220;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_220
	.align	16, 0x90
_transaction_220:                       # @_transaction_220
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	43816(%rbx), %r15
	cmpl	$0, 43832(%rbx)
	je	.LBB84_2
# BB#1:
	leaq	43680(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB84_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB84_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	43680(%rbx), %rcx
	addq	$162092944, %rbx        # imm = 0x9A95790
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB84_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_221;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_221
	.align	16, 0x90
_transaction_221:                       # @_transaction_221
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	44056(%rbx), %r15
	cmpl	$0, 44072(%rbx)
	je	.LBB85_2
# BB#1:
	leaq	43920(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB85_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB85_4
# BB#3:
	leaq	167712208(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$43920, %rbx            # imm = 0xAB90
	leaq	ng15(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$8, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB85_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_222;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_222
	.align	16, 0x90
_transaction_222:                       # @_transaction_222
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	44216(%rbx), %r15
	cmpl	$0, 44232(%rbx)
	je	.LBB86_2
# BB#1:
	leaq	44080(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB86_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB86_4
# BB#3:
	leaq	167754640(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$44080, %rbx            # imm = 0xAC30
	leaq	ng15(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$8, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB86_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_223;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_223
	.align	16, 0x90
_transaction_223:                       # @_transaction_223
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	44376(%rbx), %r14
	cmpl	$0, 44392(%rbx)
	je	.LBB87_2
# BB#1:
	leaq	44240(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB87_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB87_4
# BB#3:
	addq	$167778456, %rbx        # imm = 0xA001898
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB87_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_224;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_224
	.align	16, 0x90
_transaction_224:                       # @_transaction_224
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	44536(%rbx), %r14
	cmpl	$0, 44552(%rbx)
	je	.LBB88_2
# BB#1:
	leaq	44400(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB88_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB88_4
# BB#3:
	addq	$167812672, %rbx        # imm = 0xA009E40
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB88_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_225;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_225
	.align	16, 0x90
_transaction_225:                       # @_transaction_225
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	44696(%rbx), %r15
	cmpl	$0, 44712(%rbx)
	je	.LBB89_2
# BB#1:
	leaq	44560(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB89_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB89_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	44560(%rbx), %rcx
	addq	$162099440, %rbx        # imm = 0x9A970F0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB89_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_226;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_226
	.align	16, 0x90
_transaction_226:                       # @_transaction_226
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	44856(%rbx), %r15
	cmpl	$0, 44872(%rbx)
	je	.LBB90_2
# BB#1:
	leaq	44720(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB90_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB90_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	44720(%rbx), %rcx
	addq	$162103136, %rbx        # imm = 0x9A97F60
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB90_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_227;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_227
	.align	16, 0x90
_transaction_227:                       # @_transaction_227
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	45016(%rbx), %r15
	cmpl	$0, 45032(%rbx)
	je	.LBB91_2
# BB#1:
	leaq	44880(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB91_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB91_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	44880(%rbx), %rcx
	addq	$162103136, %rbx        # imm = 0x9A97F60
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB91_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_228;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_228
	.align	16, 0x90
_transaction_228:                       # @_transaction_228
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	45176(%rbx), %r15
	cmpl	$0, 45192(%rbx)
	je	.LBB92_2
# BB#1:
	leaq	45040(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB92_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB92_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	45040(%rbx), %rcx
	addq	$162103136, %rbx        # imm = 0x9A97F60
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB92_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_229;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_229
	.align	16, 0x90
_transaction_229:                       # @_transaction_229
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	45336(%rbx), %r15
	cmpl	$0, 45352(%rbx)
	je	.LBB93_2
# BB#1:
	leaq	45200(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB93_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB93_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	45200(%rbx), %rcx
	addq	$162103136, %rbx        # imm = 0x9A97F60
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB93_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_230;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_230
	.align	16, 0x90
_transaction_230:                       # @_transaction_230
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	45496(%rbx), %r15
	cmpl	$0, 45512(%rbx)
	je	.LBB94_2
# BB#1:
	leaq	45360(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB94_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB94_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	45360(%rbx), %rcx
	addq	$162104400, %rbx        # imm = 0x9A98450
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB94_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_231;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_231
	.align	16, 0x90
_transaction_231:                       # @_transaction_231
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	45656(%rbx), %r14
	cmpl	$0, 45672(%rbx)
	je	.LBB95_2
# BB#1:
	leaq	45520(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB95_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB95_4
# BB#3:
	leaq	167559920(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$168126856, %rbx        # imm = 0xA056988
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB95_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_232;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_232
	.align	16, 0x90
_transaction_232:                       # @_transaction_232
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	46080(%rbx), %r14
	cmpl	$0, 46096(%rbx)
	je	.LBB96_2
# BB#1:
	leaq	45944(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB96_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB96_4
# BB#3:
	addq	$167935472, %rbx        # imm = 0xA027DF0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB96_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_233;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_233
	.align	16, 0x90
_transaction_233:                       # @_transaction_233
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	46240(%rbx), %r14
	cmpl	$0, 46256(%rbx)
	je	.LBB97_2
# BB#1:
	leaq	46104(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB97_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB97_4
# BB#3:
	addq	$167833296, %rbx        # imm = 0xA00EED0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB97_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_234;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_234
	.align	16, 0x90
_transaction_234:                       # @_transaction_234
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	46400(%rbx), %r15
	cmpl	$0, 46416(%rbx)
	je	.LBB98_2
# BB#1:
	leaq	46264(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB98_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB98_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	46264(%rbx), %rcx
	addq	$162095240, %rbx        # imm = 0x9A96088
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB98_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_235;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_235
	.align	16, 0x90
_transaction_235:                       # @_transaction_235
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	46560(%rbx), %r15
	cmpl	$0, 46576(%rbx)
	je	.LBB99_2
# BB#1:
	leaq	46424(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB99_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB99_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	46424(%rbx), %rcx
	addq	$162095240, %rbx        # imm = 0x9A96088
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB99_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_236;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_236
	.align	16, 0x90
_transaction_236:                       # @_transaction_236
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	46720(%rbx), %r15
	cmpl	$0, 46736(%rbx)
	je	.LBB100_2
# BB#1:
	leaq	46584(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB100_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB100_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	46584(%rbx), %rcx
	addq	$162095240, %rbx        # imm = 0x9A96088
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB100_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_237;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_237
	.align	16, 0x90
_transaction_237:                       # @_transaction_237
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	46880(%rbx), %r15
	cmpl	$0, 46896(%rbx)
	je	.LBB101_2
# BB#1:
	leaq	46744(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB101_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB101_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	46744(%rbx), %rcx
	addq	$162095240, %rbx        # imm = 0x9A96088
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB101_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_238;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_238
	.align	16, 0x90
_transaction_238:                       # @_transaction_238
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	47040(%rbx), %r15
	cmpl	$0, 47056(%rbx)
	je	.LBB102_2
# BB#1:
	leaq	46904(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB102_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB102_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	46904(%rbx), %rcx
	addq	$162098864, %rbx        # imm = 0x9A96EB0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB102_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_239;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_239
	.align	16, 0x90
_transaction_239:                       # @_transaction_239
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	47200(%rbx), %r15
	cmpl	$0, 47216(%rbx)
	je	.LBB103_2
# BB#1:
	leaq	47064(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB103_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB103_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	47064(%rbx), %rcx
	addq	$162098864, %rbx        # imm = 0x9A96EB0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB103_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_240;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_240
	.align	16, 0x90
_transaction_240:                       # @_transaction_240
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	47360(%rbx), %r15
	cmpl	$0, 47376(%rbx)
	je	.LBB104_2
# BB#1:
	leaq	47224(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB104_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB104_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	47224(%rbx), %rcx
	addq	$162098864, %rbx        # imm = 0x9A96EB0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB104_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_241;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_241
	.align	16, 0x90
_transaction_241:                       # @_transaction_241
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	47520(%rbx), %r15
	cmpl	$0, 47536(%rbx)
	je	.LBB105_2
# BB#1:
	leaq	47384(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB105_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB105_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	47384(%rbx), %rcx
	addq	$162098864, %rbx        # imm = 0x9A96EB0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB105_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_242;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_242
	.align	16, 0x90
_transaction_242:                       # @_transaction_242
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	47680(%rbx), %r15
	cmpl	$0, 47696(%rbx)
	je	.LBB106_2
# BB#1:
	leaq	47544(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB106_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB106_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	47544(%rbx), %rcx
	addq	$162091560, %rbx        # imm = 0x9A95228
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB106_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_243;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_243
	.align	16, 0x90
_transaction_243:                       # @_transaction_243
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	47840(%rbx), %r15
	cmpl	$0, 47856(%rbx)
	je	.LBB107_2
# BB#1:
	leaq	47704(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB107_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB107_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	47704(%rbx), %rcx
	addq	$162091560, %rbx        # imm = 0x9A95228
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB107_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_244;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_244
	.align	16, 0x90
_transaction_244:                       # @_transaction_244
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	48000(%rbx), %r15
	cmpl	$0, 48016(%rbx)
	je	.LBB108_2
# BB#1:
	leaq	47864(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB108_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB108_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	47864(%rbx), %rcx
	addq	$162093608, %rbx        # imm = 0x9A95A28
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB108_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_245;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_245
	.align	16, 0x90
_transaction_245:                       # @_transaction_245
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	48160(%rbx), %r15
	cmpl	$0, 48176(%rbx)
	je	.LBB109_2
# BB#1:
	leaq	48024(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB109_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB109_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	48024(%rbx), %rcx
	addq	$162093608, %rbx        # imm = 0x9A95A28
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB109_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_246;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_246
	.align	16, 0x90
_transaction_246:                       # @_transaction_246
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	48320(%rbx), %r15
	cmpl	$0, 48336(%rbx)
	je	.LBB110_2
# BB#1:
	leaq	48184(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB110_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB110_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	48184(%rbx), %rcx
	addq	$162091560, %rbx        # imm = 0x9A95228
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB110_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_247;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_247
	.align	16, 0x90
_transaction_247:                       # @_transaction_247
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	48480(%rbx), %r15
	cmpl	$0, 48496(%rbx)
	je	.LBB111_2
# BB#1:
	leaq	48344(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB111_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB111_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	48344(%rbx), %rcx
	addq	$162091560, %rbx        # imm = 0x9A95228
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB111_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_248;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_248
	.align	16, 0x90
_transaction_248:                       # @_transaction_248
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	48640(%rbx), %r15
	cmpl	$0, 48656(%rbx)
	je	.LBB112_2
# BB#1:
	leaq	48504(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB112_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB112_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	48504(%rbx), %rcx
	addq	$162092616, %rbx        # imm = 0x9A95648
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB112_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_249;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_249
	.align	16, 0x90
_transaction_249:                       # @_transaction_249
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	48800(%rbx), %r15
	cmpl	$0, 48816(%rbx)
	je	.LBB113_2
# BB#1:
	leaq	48664(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB113_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB113_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	48664(%rbx), %rcx
	addq	$162092616, %rbx        # imm = 0x9A95648
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB113_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_250;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_250
	.align	16, 0x90
_transaction_250:                       # @_transaction_250
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	48960(%rbx), %r15
	cmpl	$0, 48976(%rbx)
	je	.LBB114_2
# BB#1:
	leaq	48824(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB114_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB114_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	48824(%rbx), %rcx
	addq	$162092616, %rbx        # imm = 0x9A95648
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB114_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_251;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_251
	.align	16, 0x90
_transaction_251:                       # @_transaction_251
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	49120(%rbx), %r15
	cmpl	$0, 49136(%rbx)
	je	.LBB115_2
# BB#1:
	leaq	48984(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB115_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB115_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	48984(%rbx), %rcx
	addq	$162092616, %rbx        # imm = 0x9A95648
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB115_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_252;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_252
	.align	16, 0x90
_transaction_252:                       # @_transaction_252
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	49280(%rbx), %r15
	cmpl	$0, 49296(%rbx)
	je	.LBB116_2
# BB#1:
	leaq	49144(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB116_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB116_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	49144(%rbx), %rcx
	addq	$162093608, %rbx        # imm = 0x9A95A28
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB116_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_253;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_253
	.align	16, 0x90
_transaction_253:                       # @_transaction_253
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	49440(%rbx), %r15
	cmpl	$0, 49456(%rbx)
	je	.LBB117_2
# BB#1:
	leaq	49304(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB117_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB117_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	49304(%rbx), %rcx
	addq	$162093608, %rbx        # imm = 0x9A95A28
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB117_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_254;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_254
	.align	16, 0x90
_transaction_254:                       # @_transaction_254
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	49600(%rbx), %r15
	cmpl	$0, 49616(%rbx)
	je	.LBB118_2
# BB#1:
	leaq	49464(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB118_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB118_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	49464(%rbx), %rcx
	addq	$162103824, %rbx        # imm = 0x9A98210
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB118_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_255;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_255
	.align	16, 0x90
_transaction_255:                       # @_transaction_255
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	49760(%rbx), %r15
	cmpl	$0, 49776(%rbx)
	je	.LBB119_2
# BB#1:
	leaq	49624(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB119_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB119_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	49624(%rbx), %rcx
	addq	$162103824, %rbx        # imm = 0x9A98210
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB119_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_256;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_256
	.align	16, 0x90
_transaction_256:                       # @_transaction_256
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	49920(%rbx), %r15
	cmpl	$0, 49936(%rbx)
	je	.LBB120_2
# BB#1:
	leaq	49784(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB120_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB120_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	49784(%rbx), %rcx
	addq	$162103824, %rbx        # imm = 0x9A98210
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB120_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_257;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_257
	.align	16, 0x90
_transaction_257:                       # @_transaction_257
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	50080(%rbx), %r15
	cmpl	$0, 50096(%rbx)
	je	.LBB121_2
# BB#1:
	leaq	49944(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB121_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB121_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	49944(%rbx), %rcx
	addq	$162103824, %rbx        # imm = 0x9A98210
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB121_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_258;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_258
	.align	16, 0x90
_transaction_258:                       # @_transaction_258
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	50240(%rbx), %r15
	cmpl	$0, 50256(%rbx)
	je	.LBB122_2
# BB#1:
	leaq	50104(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB122_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB122_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	50104(%rbx), %rcx
	addq	$162104880, %rbx        # imm = 0x9A98630
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB122_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_259;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_259
	.align	16, 0x90
_transaction_259:                       # @_transaction_259
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	50400(%rbx), %r14
	cmpl	$0, 50416(%rbx)
	je	.LBB123_2
# BB#1:
	leaq	50264(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB123_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB123_4
# BB#3:
	addq	$167868664, %rbx        # imm = 0xA0178F8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB123_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_260;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_260
	.align	16, 0x90
_transaction_260:                       # @_transaction_260
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %rbx
	movl	48(%rbp), %edi
	leaq	50560(%rcx), %r14
	cmpl	$0, 50576(%rcx)
	je	.LBB124_2
# BB#1:
	addq	$50424, %rcx            # imm = 0xC4F8
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%rbx, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %rbx
.LBB124_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB124_4
# BB#3:
	leaq	ng16(%rip), %rcx
	movl	$23, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB124_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _transaction_261;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_261
	.align	16, 0x90
_transaction_261:                       # @_transaction_261
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	50984(%rbx), %r14
	cmpl	$0, 51000(%rbx)
	je	.LBB125_2
# BB#1:
	leaq	50848(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB125_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB125_4
# BB#3:
	addq	$167854824, %rbx        # imm = 0xA0142E8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB125_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_262;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_262
	.align	16, 0x90
_transaction_262:                       # @_transaction_262
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	51144(%rbx), %r14
	cmpl	$0, 51160(%rbx)
	je	.LBB126_2
# BB#1:
	leaq	51008(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB126_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB126_4
# BB#3:
	addq	$168078088, %rbx        # imm = 0xA04AB08
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB126_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_263;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_263
	.align	16, 0x90
_transaction_263:                       # @_transaction_263
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	51568(%rbx), %r14
	cmpl	$0, 51584(%rbx)
	je	.LBB127_2
# BB#1:
	leaq	51432(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB127_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB127_4
# BB#3:
	leaq	167308032(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$167868328, %rbx        # imm = 0xA0177A8
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB127_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_264;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_264
	.align	16, 0x90
_transaction_264:                       # @_transaction_264
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	51992(%rbx), %r14
	cmpl	$0, 52008(%rbx)
	je	.LBB128_2
# BB#1:
	leaq	51856(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB128_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB128_4
# BB#3:
	addq	$167864712, %rbx        # imm = 0xA016988
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB128_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_265;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_265
	.align	16, 0x90
_transaction_265:                       # @_transaction_265
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %rbx
	movl	48(%rbp), %edi
	leaq	52152(%rcx), %r14
	cmpl	$0, 52168(%rcx)
	je	.LBB129_2
# BB#1:
	addq	$52016, %rcx            # imm = 0xCB30
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%rbx, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %rbx
.LBB129_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB129_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB129_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _transaction_266;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_266
	.align	16, 0x90
_transaction_266:                       # @_transaction_266
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	52312(%rbx), %r14
	cmpl	$0, 52328(%rbx)
	je	.LBB130_2
# BB#1:
	leaq	52176(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB130_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB130_4
# BB#3:
	addq	$167308704, %rbx        # imm = 0x9F8EDA0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB130_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_267;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_267
	.align	16, 0x90
_transaction_267:                       # @_transaction_267
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	52472(%rbx), %r15
	cmpl	$0, 52488(%rbx)
	je	.LBB131_2
# BB#1:
	leaq	52336(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB131_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB131_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	52336(%rbx), %rcx
	addq	$162094552, %rbx        # imm = 0x9A95DD8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB131_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_268;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_268
	.align	16, 0x90
_transaction_268:                       # @_transaction_268
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	52632(%rbx), %r15
	cmpl	$0, 52648(%rbx)
	je	.LBB132_2
# BB#1:
	leaq	52496(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB132_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB132_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	52496(%rbx), %rcx
	addq	$162094552, %rbx        # imm = 0x9A95DD8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB132_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_269;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_269
	.align	16, 0x90
_transaction_269:                       # @_transaction_269
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	52792(%rbx), %r15
	cmpl	$0, 52808(%rbx)
	je	.LBB133_2
# BB#1:
	leaq	52656(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB133_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB133_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	52656(%rbx), %rcx
	addq	$162094552, %rbx        # imm = 0x9A95DD8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB133_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_270;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_270
	.align	16, 0x90
_transaction_270:                       # @_transaction_270
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	52952(%rbx), %r15
	cmpl	$0, 52968(%rbx)
	je	.LBB134_2
# BB#1:
	leaq	52816(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB134_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB134_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	52816(%rbx), %rcx
	addq	$162094552, %rbx        # imm = 0x9A95DD8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB134_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_271;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_271
	.align	16, 0x90
_transaction_271:                       # @_transaction_271
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	53112(%rbx), %r15
	cmpl	$0, 53128(%rbx)
	je	.LBB135_2
# BB#1:
	leaq	52976(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB135_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB135_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	52976(%rbx), %rcx
	addq	$162098176, %rbx        # imm = 0x9A96C00
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB135_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_272;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_272
	.align	16, 0x90
_transaction_272:                       # @_transaction_272
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	53272(%rbx), %r15
	cmpl	$0, 53288(%rbx)
	je	.LBB136_2
# BB#1:
	leaq	53136(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB136_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB136_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	53136(%rbx), %rcx
	addq	$162098176, %rbx        # imm = 0x9A96C00
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB136_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_273;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_273
	.align	16, 0x90
_transaction_273:                       # @_transaction_273
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	53432(%rbx), %r15
	cmpl	$0, 53448(%rbx)
	je	.LBB137_2
# BB#1:
	leaq	53296(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB137_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB137_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	53296(%rbx), %rcx
	addq	$162098176, %rbx        # imm = 0x9A96C00
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB137_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_274;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_274
	.align	16, 0x90
_transaction_274:                       # @_transaction_274
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	53592(%rbx), %r15
	cmpl	$0, 53608(%rbx)
	je	.LBB138_2
# BB#1:
	leaq	53456(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB138_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB138_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	53456(%rbx), %rcx
	addq	$162098176, %rbx        # imm = 0x9A96C00
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB138_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_275;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_275
	.align	16, 0x90
_transaction_275:                       # @_transaction_275
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	53752(%rbx), %r15
	cmpl	$0, 53768(%rbx)
	je	.LBB139_2
# BB#1:
	leaq	53616(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB139_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB139_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	53616(%rbx), %rcx
	addq	$162101952, %rbx        # imm = 0x9A97AC0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB139_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_276;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_276
	.align	16, 0x90
_transaction_276:                       # @_transaction_276
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	53912(%rbx), %r15
	cmpl	$0, 53928(%rbx)
	je	.LBB140_2
# BB#1:
	leaq	53776(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB140_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB140_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	53776(%rbx), %rcx
	addq	$162102488, %rbx        # imm = 0x9A97CD8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB140_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_277;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_277
	.align	16, 0x90
_transaction_277:                       # @_transaction_277
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	54072(%rbx), %r15
	cmpl	$0, 54088(%rbx)
	je	.LBB141_2
# BB#1:
	leaq	53936(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB141_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB141_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	53936(%rbx), %rcx
	addq	$162099440, %rbx        # imm = 0x9A970F0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB141_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_278;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_278
	.align	16, 0x90
_transaction_278:                       # @_transaction_278
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	54232(%rbx), %r15
	cmpl	$0, 54248(%rbx)
	je	.LBB142_2
# BB#1:
	leaq	54096(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB142_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB142_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	54096(%rbx), %rcx
	addq	$162099768, %rbx        # imm = 0x9A97238
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB142_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_279;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_279
	.align	16, 0x90
_transaction_279:                       # @_transaction_279
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	54392(%rbx), %r15
	cmpl	$0, 54408(%rbx)
	je	.LBB143_2
# BB#1:
	leaq	54256(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB143_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB143_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	54256(%rbx), %rcx
	addq	$162099440, %rbx        # imm = 0x9A970F0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB143_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_280;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_280
	.align	16, 0x90
_transaction_280:                       # @_transaction_280
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	54552(%rbx), %r15
	cmpl	$0, 54568(%rbx)
	je	.LBB144_2
# BB#1:
	leaq	54416(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB144_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB144_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	54416(%rbx), %rcx
	addq	$162099768, %rbx        # imm = 0x9A97238
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB144_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_281;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_281
	.align	16, 0x90
_transaction_281:                       # @_transaction_281
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	54712(%rbx), %r14
	cmpl	$0, 54728(%rbx)
	je	.LBB145_2
# BB#1:
	leaq	54576(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB145_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB145_4
# BB#3:
	leaq	167903912(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$167916680, %rbx        # imm = 0xA023488
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB145_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_282;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_282
	.align	16, 0x90
_transaction_282:                       # @_transaction_282
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$56, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rdi
	movl	48(%rbp), %r15d
	leaq	54872(%rdi), %r14
	cmpl	$0, 54888(%rdi)
	je	.LBB146_2
# BB#1:
	leaq	54736(%rdi), %rcx
	movl	%r15d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB146_2:
	movl	%r15d, %ebx
	subl	%esi, %ebx
	incl	%ebx
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%ebx, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB146_8
# BB#3:
	testl	%esi, %esi
	jne	.LBB146_5
# BB#4:
	movl	$0, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%r14, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB146_5
# BB#9:
	leaq	167825856(%rdi), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167836320(%rdi), %rcx
	callq	*%r13
.LBB146_5:
	testl	%r15d, %r15d
	sete	%al
	cmpl	$1, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB146_7
# BB#6:
	movl	$1, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB146_7
# BB#10:
	leaq	167828616(%rdi), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r15
	callq	*%r15
	addq	$167979008, %rdi        # imm = 0xA032800
	movq	%rdi, %rcx
	callq	*%r15
.LBB146_7:
	movl	%ebx, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB146_8:
	addq	$56, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_283;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_283
	.align	16, 0x90
_transaction_283:                       # @_transaction_283
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %rbx
	movl	48(%rbp), %edi
	leaq	55032(%rcx), %r14
	cmpl	$0, 55048(%rcx)
	je	.LBB147_2
# BB#1:
	addq	$54896, %rcx            # imm = 0xD670
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%rbx, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %rbx
.LBB147_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB147_4
# BB#3:
	leaq	ng17(%rip), %rcx
	movl	$13, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB147_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _transaction_284;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_284
	.align	16, 0x90
_transaction_284:                       # @_transaction_284
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %rbx
	movl	48(%rbp), %edi
	leaq	55192(%rcx), %r14
	cmpl	$0, 55208(%rcx)
	je	.LBB148_2
# BB#1:
	addq	$55056, %rcx            # imm = 0xD710
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%rbx, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %rbx
.LBB148_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB148_4
# BB#3:
	leaq	ng18(%rip), %rcx
	movl	$12, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB148_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _transaction_285;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_285
	.align	16, 0x90
_transaction_285:                       # @_transaction_285
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %rbx
	movl	48(%rbp), %edi
	leaq	55352(%rcx), %r14
	cmpl	$0, 55368(%rcx)
	je	.LBB149_2
# BB#1:
	addq	$55216, %rcx            # imm = 0xD7B0
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%rbx, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %rbx
.LBB149_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB149_4
# BB#3:
	leaq	ng19(%rip), %rcx
	movl	$12, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB149_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _transaction_286;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_286
	.align	16, 0x90
_transaction_286:                       # @_transaction_286
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	55512(%rbx), %r14
	cmpl	$0, 55528(%rbx)
	je	.LBB150_2
# BB#1:
	leaq	55376(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB150_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB150_4
# BB#3:
	leaq	167579448(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	leaq	167630864(%rbx), %rcx
	callq	*%r12
	leaq	167654680(%rbx), %rcx
	callq	*%r12
	leaq	167688896(%rbx), %rcx
	callq	*%r12
	leaq	167712712(%rbx), %rcx
	callq	*%r12
	leaq	167755144(%rbx), %rcx
	callq	*%r12
	leaq	167778960(%rbx), %rcx
	callq	*%r12
	addq	$167813176, %rbx        # imm = 0xA00A038
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB150_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_287;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_287
	.align	16, 0x90
_transaction_287:                       # @_transaction_287
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	55672(%rbx), %r14
	cmpl	$0, 55688(%rbx)
	je	.LBB151_2
# BB#1:
	leaq	55536(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB151_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB151_4
# BB#3:
	leaq	167579616(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	leaq	167631032(%rbx), %rcx
	callq	*%r12
	leaq	167654848(%rbx), %rcx
	callq	*%r12
	leaq	167689064(%rbx), %rcx
	callq	*%r12
	leaq	167712880(%rbx), %rcx
	callq	*%r12
	leaq	167755312(%rbx), %rcx
	callq	*%r12
	leaq	167779128(%rbx), %rcx
	callq	*%r12
	addq	$167813344, %rbx        # imm = 0xA00A0E0
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB151_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_288;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_288
	.align	16, 0x90
_transaction_288:                       # @_transaction_288
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	55832(%rbx), %r15
	cmpl	$0, 55848(%rbx)
	je	.LBB152_2
# BB#1:
	leaq	55696(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB152_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB152_4
# BB#3:
	leaq	167565352(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	55696(%rbx), %rcx
	addq	$162102184, %rbx        # imm = 0x9A97BA8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB152_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_289;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_289
	.align	16, 0x90
_transaction_289:                       # @_transaction_289
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	56072(%rbx), %r14
	cmpl	$0, 56088(%rbx)
	je	.LBB153_2
# BB#1:
	leaq	55936(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB153_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB153_4
# BB#3:
	leaq	167904080(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$167916848, %rbx        # imm = 0xA023530
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB153_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_290;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_290
	.align	16, 0x90
_transaction_290:                       # @_transaction_290
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	56232(%rbx), %r15
	cmpl	$0, 56248(%rbx)
	je	.LBB154_2
# BB#1:
	leaq	56096(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB154_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB154_4
# BB#3:
	leaq	167325336(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	56096(%rbx), %rcx
	addq	$162091200, %rbx        # imm = 0x9A950C0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB154_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_291;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_291
	.align	16, 0x90
_transaction_291:                       # @_transaction_291
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	56472(%rbx), %r15
	cmpl	$0, 56488(%rbx)
	je	.LBB155_2
# BB#1:
	leaq	56336(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB155_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB155_4
# BB#3:
	leaq	167367768(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	56336(%rbx), %rcx
	addq	$162091200, %rbx        # imm = 0x9A950C0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB155_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_292;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_292
	.align	16, 0x90
_transaction_292:                       # @_transaction_292
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	56712(%rbx), %r15
	cmpl	$0, 56728(%rbx)
	je	.LBB156_2
# BB#1:
	leaq	56576(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB156_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB156_4
# BB#3:
	leaq	167340424(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	56576(%rbx), %rcx
	addq	$162093248, %rbx        # imm = 0x9A958C0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB156_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_293;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_293
	.align	16, 0x90
_transaction_293:                       # @_transaction_293
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	56952(%rbx), %r15
	cmpl	$0, 56968(%rbx)
	je	.LBB157_2
# BB#1:
	leaq	56816(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB157_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB157_4
# BB#3:
	leaq	167354096(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	56816(%rbx), %rcx
	addq	$162093248, %rbx        # imm = 0x9A958C0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB157_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_294;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_294
	.align	16, 0x90
_transaction_294:                       # @_transaction_294
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	57192(%rbx), %r15
	cmpl	$0, 57208(%rbx)
	je	.LBB158_2
# BB#1:
	leaq	57056(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB158_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB158_4
# BB#3:
	leaq	167386640(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	57056(%rbx), %rcx
	addq	$162091200, %rbx        # imm = 0x9A950C0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB158_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_295;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_295
	.align	16, 0x90
_transaction_295:                       # @_transaction_295
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	57432(%rbx), %r15
	cmpl	$0, 57448(%rbx)
	je	.LBB159_2
# BB#1:
	leaq	57296(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB159_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB159_4
# BB#3:
	leaq	167400312(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	57296(%rbx), %rcx
	addq	$162091200, %rbx        # imm = 0x9A950C0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB159_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_296;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_296
	.align	16, 0x90
_transaction_296:                       # @_transaction_296
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	57672(%rbx), %r15
	cmpl	$0, 57688(%rbx)
	je	.LBB160_2
# BB#1:
	leaq	57536(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB160_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB160_4
# BB#3:
	leaq	167419184(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	57536(%rbx), %rcx
	addq	$162092256, %rbx        # imm = 0x9A954E0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB160_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_297;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_297
	.align	16, 0x90
_transaction_297:                       # @_transaction_297
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	57912(%rbx), %r15
	cmpl	$0, 57928(%rbx)
	je	.LBB161_2
# BB#1:
	leaq	57776(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB161_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB161_4
# BB#3:
	leaq	167435960(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	57776(%rbx), %rcx
	addq	$162092256, %rbx        # imm = 0x9A954E0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB161_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_298;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_298
	.align	16, 0x90
_transaction_298:                       # @_transaction_298
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	58152(%rbx), %r15
	cmpl	$0, 58168(%rbx)
	je	.LBB162_2
# BB#1:
	leaq	58016(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB162_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB162_4
# BB#3:
	leaq	167454832(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	58016(%rbx), %rcx
	addq	$162092256, %rbx        # imm = 0x9A954E0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB162_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_299;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_299
	.align	16, 0x90
_transaction_299:                       # @_transaction_299
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	58392(%rbx), %r15
	cmpl	$0, 58408(%rbx)
	je	.LBB163_2
# BB#1:
	leaq	58256(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB163_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB163_4
# BB#3:
	leaq	167468504(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	58256(%rbx), %rcx
	addq	$162092256, %rbx        # imm = 0x9A954E0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB163_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_300;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_300
	.align	16, 0x90
_transaction_300:                       # @_transaction_300
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	58632(%rbx), %r15
	cmpl	$0, 58648(%rbx)
	je	.LBB164_2
# BB#1:
	leaq	58496(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB164_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB164_4
# BB#3:
	leaq	167487376(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	58496(%rbx), %rcx
	addq	$162093248, %rbx        # imm = 0x9A958C0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB164_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_301;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_301
	.align	16, 0x90
_transaction_301:                       # @_transaction_301
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	58872(%rbx), %r15
	cmpl	$0, 58888(%rbx)
	je	.LBB165_2
# BB#1:
	leaq	58736(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB165_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB165_4
# BB#3:
	leaq	167504152(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	58736(%rbx), %rcx
	addq	$162093248, %rbx        # imm = 0x9A958C0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB165_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_302;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_302
	.align	16, 0x90
_transaction_302:                       # @_transaction_302
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	59112(%rbx), %r14
	cmpl	$0, 59128(%rbx)
	je	.LBB166_2
# BB#1:
	leaq	58976(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB166_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB166_4
# BB#3:
	addq	$167312088, %rbx        # imm = 0x9F8FAD8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB166_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_303;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_303
	.align	16, 0x90
_transaction_303:                       # @_transaction_303
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	59272(%rbx), %r14
	cmpl	$0, 59288(%rbx)
	je	.LBB167_2
# BB#1:
	leaq	59136(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB167_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB167_4
# BB#3:
	addq	$167376496, %rbx        # imm = 0x9F9F670
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB167_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_304;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_304
	.align	16, 0x90
_transaction_304:                       # @_transaction_304
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	59432(%rbx), %r14
	cmpl	$0, 59448(%rbx)
	je	.LBB168_2
# BB#1:
	leaq	59296(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB168_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB168_4
# BB#3:
	addq	$167349152, %rbx        # imm = 0x9F98BA0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB168_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_305;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_305
	.align	16, 0x90
_transaction_305:                       # @_transaction_305
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	59592(%rbx), %r14
	cmpl	$0, 59608(%rbx)
	je	.LBB169_2
# BB#1:
	leaq	59456(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB169_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB169_4
# BB#3:
	addq	$167362824, %rbx        # imm = 0x9F9C108
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB169_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_306;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_306
	.align	16, 0x90
_transaction_306:                       # @_transaction_306
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	59752(%rbx), %r14
	cmpl	$0, 59768(%rbx)
	je	.LBB170_2
# BB#1:
	leaq	59616(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB170_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB170_4
# BB#3:
	addq	$167395368, %rbx        # imm = 0x9FA4028
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB170_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_307;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_307
	.align	16, 0x90
_transaction_307:                       # @_transaction_307
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	59912(%rbx), %r14
	cmpl	$0, 59928(%rbx)
	je	.LBB171_2
# BB#1:
	leaq	59776(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB171_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB171_4
# BB#3:
	addq	$167409040, %rbx        # imm = 0x9FA7590
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB171_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_308;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_308
	.align	16, 0x90
_transaction_308:                       # @_transaction_308
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	60072(%rbx), %r14
	cmpl	$0, 60088(%rbx)
	je	.LBB172_2
# BB#1:
	leaq	59936(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB172_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB172_4
# BB#3:
	addq	$167427912, %rbx        # imm = 0x9FABF48
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB172_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_309;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_309
	.align	16, 0x90
_transaction_309:                       # @_transaction_309
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	60232(%rbx), %r14
	cmpl	$0, 60248(%rbx)
	je	.LBB173_2
# BB#1:
	leaq	60096(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB173_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB173_4
# BB#3:
	addq	$167444688, %rbx        # imm = 0x9FB00D0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB173_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_310;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_310
	.align	16, 0x90
_transaction_310:                       # @_transaction_310
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	60392(%rbx), %r14
	cmpl	$0, 60408(%rbx)
	je	.LBB174_2
# BB#1:
	leaq	60256(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB174_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB174_4
# BB#3:
	addq	$167463560, %rbx        # imm = 0x9FB4A88
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB174_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_311;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_311
	.align	16, 0x90
_transaction_311:                       # @_transaction_311
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	60552(%rbx), %r14
	cmpl	$0, 60568(%rbx)
	je	.LBB175_2
# BB#1:
	leaq	60416(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB175_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB175_4
# BB#3:
	addq	$167477232, %rbx        # imm = 0x9FB7FF0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB175_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_312;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_312
	.align	16, 0x90
_transaction_312:                       # @_transaction_312
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	60712(%rbx), %r14
	cmpl	$0, 60728(%rbx)
	je	.LBB176_2
# BB#1:
	leaq	60576(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB176_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB176_4
# BB#3:
	addq	$167496104, %rbx        # imm = 0x9FBC9A8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB176_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_313;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_313
	.align	16, 0x90
_transaction_313:                       # @_transaction_313
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	60872(%rbx), %r14
	cmpl	$0, 60888(%rbx)
	je	.LBB177_2
# BB#1:
	leaq	60736(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB177_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB177_4
# BB#3:
	addq	$167512880, %rbx        # imm = 0x9FC0B30
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB177_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_314;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_314
	.align	16, 0x90
_transaction_314:                       # @_transaction_314
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	61032(%rbx), %r14
	cmpl	$0, 61048(%rbx)
	je	.LBB178_2
# BB#1:
	leaq	60896(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB178_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB178_4
# BB#3:
	leaq	168006976(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	leaq	168017120(%rbx), %rcx
	callq	*%r12
	leaq	168027264(%rbx), %rcx
	callq	*%r12
	leaq	168037408(%rbx), %rcx
	callq	*%r12
	addq	$168050656, %rbx        # imm = 0xA043FE0
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB178_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_315;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_315
	.align	16, 0x90
_transaction_315:                       # @_transaction_315
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$56, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	61192(%rbx), %r15
	cmpl	$0, 61208(%rbx)
	je	.LBB179_2
# BB#1:
	leaq	61056(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB179_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB179_12
# BB#3:
	testl	%esi, %esi
	jne	.LBB179_5
# BB#4:
	movl	$0, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB179_5
# BB#13:
	leaq	167578944(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167839416(%rbx), %rcx
	callq	*%r13
	leaq	167842176(%rbx), %rcx
	callq	*%r13
.LBB179_5:
	testl	%r14d, %r14d
	sete	%al
	cmpl	$1, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB179_7
# BB#6:
	movl	$1, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB179_7
# BB#14:
	leaq	167630360(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167839080(%rbx), %rcx
	callq	*%r13
	leaq	167841840(%rbx), %rcx
	callq	*%r13
.LBB179_7:
	cmpl	$2, %r14d
	setb	%al
	cmpl	$2, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB179_9
# BB#8:
	movl	$2, 40(%rsp)
	movl	$2, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB179_9
# BB#15:
	leaq	167654176(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167836656(%rbx), %rcx
	callq	*%r13
	leaq	167839584(%rbx), %rcx
	callq	*%r13
	leaq	167842344(%rbx), %rcx
	callq	*%r13
	leaq	167979344(%rbx), %rcx
	callq	*%r13
.LBB179_9:
	cmpl	$3, %r14d
	setb	%al
	cmpl	$3, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB179_11
# BB#10:
	movl	$3, 40(%rsp)
	movl	$3, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB179_11
# BB#16:
	leaq	167688392(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167826192(%rbx), %rcx
	callq	*%r13
	leaq	167828952(%rbx), %rcx
	callq	*%r13
.LBB179_11:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$61056, %rbx            # imm = 0xEE80
	leaq	ng15(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$8, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB179_12:
	addq	$56, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_316;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_316
	.align	16, 0x90
_transaction_316:                       # @_transaction_316
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	61352(%rbx), %r14
	cmpl	$0, 61368(%rbx)
	je	.LBB180_2
# BB#1:
	leaq	61216(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB180_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB180_4
# BB#3:
	leaq	168007144(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	leaq	168017288(%rbx), %rcx
	callq	*%r12
	leaq	168027432(%rbx), %rcx
	callq	*%r12
	leaq	168037576(%rbx), %rcx
	callq	*%r12
	addq	$168050824, %rbx        # imm = 0xA044088
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB180_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_317;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_317
	.align	16, 0x90
_transaction_317:                       # @_transaction_317
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %rbx
	movl	48(%rbp), %edi
	leaq	61512(%rcx), %r14
	cmpl	$0, 61528(%rcx)
	je	.LBB181_2
# BB#1:
	addq	$61376, %rcx            # imm = 0xEFC0
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%rbx, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %rbx
.LBB181_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB181_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB181_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _transaction_318;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_318
	.align	16, 0x90
_transaction_318:                       # @_transaction_318
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	61672(%rbx), %r14
	cmpl	$0, 61688(%rbx)
	je	.LBB182_2
# BB#1:
	leaq	61536(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB182_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB182_4
# BB#3:
	addq	$167555648, %rbx        # imm = 0x9FCB240
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB182_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_319;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_319
	.align	16, 0x90
_transaction_319:                       # @_transaction_319
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	61832(%rbx), %r14
	cmpl	$0, 61848(%rbx)
	je	.LBB183_2
# BB#1:
	leaq	61696(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB183_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB183_4
# BB#3:
	leaq	167879984(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$168103248, %rbx        # imm = 0xA050D50
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB183_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_320;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_320
	.align	16, 0x90
_transaction_320:                       # @_transaction_320
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	62256(%rbx), %r14
	cmpl	$0, 62272(%rbx)
	je	.LBB184_2
# BB#1:
	leaq	62120(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB184_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB184_4
# BB#3:
	addq	$167935640, %rbx        # imm = 0xA027E98
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB184_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_321;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_321
	.align	16, 0x90
_transaction_321:                       # @_transaction_321
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	62416(%rbx), %r14
	cmpl	$0, 62432(%rbx)
	je	.LBB185_2
# BB#1:
	leaq	62280(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB185_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB185_4
# BB#3:
	addq	$167930544, %rbx        # imm = 0xA026AB0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB185_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_323;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_323
	.align	16, 0x90
_transaction_323:                       # @_transaction_323
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	62736(%rbx), %r14
	cmpl	$0, 62752(%rbx)
	je	.LBB186_2
# BB#1:
	leaq	62600(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB186_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB186_4
# BB#3:
	addq	$167946544, %rbx        # imm = 0xA02A930
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB186_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_324;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_324
	.align	16, 0x90
_transaction_324:                       # @_transaction_324
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	62896(%rbx), %r14
	cmpl	$0, 62912(%rbx)
	je	.LBB187_2
# BB#1:
	leaq	62760(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB187_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB187_4
# BB#3:
	addq	$167320288, %rbx        # imm = 0x9F91AE0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB187_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_325;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_325
	.align	16, 0x90
_transaction_325:                       # @_transaction_325
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	63320(%rbx), %r14
	cmpl	$0, 63336(%rbx)
	je	.LBB188_2
# BB#1:
	leaq	63184(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB188_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB188_4
# BB#3:
	addq	$167320624, %rbx        # imm = 0x9F91C30
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB188_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_326;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_326
	.align	16, 0x90
_transaction_326:                       # @_transaction_326
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	63744(%rbx), %r14
	cmpl	$0, 63760(%rbx)
	je	.LBB189_2
# BB#1:
	leaq	63608(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB189_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB189_4
# BB#3:
	addq	$167335376, %rbx        # imm = 0x9F955D0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB189_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_327;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_327
	.align	16, 0x90
_transaction_327:                       # @_transaction_327
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	64168(%rbx), %r14
	cmpl	$0, 64184(%rbx)
	je	.LBB190_2
# BB#1:
	leaq	64032(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB190_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB190_4
# BB#3:
	addq	$167335712, %rbx        # imm = 0x9F95720
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB190_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_328;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_328
	.align	16, 0x90
_transaction_328:                       # @_transaction_328
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	64592(%rbx), %r14
	cmpl	$0, 64608(%rbx)
	je	.LBB191_2
# BB#1:
	leaq	64456(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB191_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB191_4
# BB#3:
	addq	$167381592, %rbx        # imm = 0x9FA0A58
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB191_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_329;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_329
	.align	16, 0x90
_transaction_329:                       # @_transaction_329
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	65016(%rbx), %r14
	cmpl	$0, 65032(%rbx)
	je	.LBB192_2
# BB#1:
	leaq	64880(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB192_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB192_4
# BB#3:
	addq	$167381928, %rbx        # imm = 0x9FA0BA8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB192_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_330;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_330
	.align	16, 0x90
_transaction_330:                       # @_transaction_330
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	65440(%rbx), %r14
	cmpl	$0, 65456(%rbx)
	je	.LBB193_2
# BB#1:
	leaq	65304(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB193_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB193_4
# BB#3:
	addq	$167414136, %rbx        # imm = 0x9FA8978
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB193_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_331;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_331
	.align	16, 0x90
_transaction_331:                       # @_transaction_331
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	65864(%rbx), %r14
	cmpl	$0, 65880(%rbx)
	je	.LBB194_2
# BB#1:
	leaq	65728(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB194_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB194_4
# BB#3:
	addq	$167414472, %rbx        # imm = 0x9FA8AC8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB194_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_332;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_332
	.align	16, 0x90
_transaction_332:                       # @_transaction_332
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	66288(%rbx), %r14
	cmpl	$0, 66304(%rbx)
	je	.LBB195_2
# BB#1:
	leaq	66152(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB195_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB195_4
# BB#3:
	addq	$167449784, %rbx        # imm = 0x9FB14B8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB195_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_333;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_333
	.align	16, 0x90
_transaction_333:                       # @_transaction_333
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	66712(%rbx), %r14
	cmpl	$0, 66728(%rbx)
	je	.LBB196_2
# BB#1:
	leaq	66576(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB196_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB196_4
# BB#3:
	addq	$167450120, %rbx        # imm = 0x9FB1608
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB196_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_334;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_334
	.align	16, 0x90
_transaction_334:                       # @_transaction_334
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	67136(%rbx), %r14
	cmpl	$0, 67152(%rbx)
	je	.LBB197_2
# BB#1:
	leaq	67000(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB197_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB197_4
# BB#3:
	addq	$167482328, %rbx        # imm = 0x9FB93D8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB197_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_335;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_335
	.align	16, 0x90
_transaction_335:                       # @_transaction_335
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	67560(%rbx), %r14
	cmpl	$0, 67576(%rbx)
	je	.LBB198_2
# BB#1:
	leaq	67424(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB198_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB198_4
# BB#3:
	addq	$167482664, %rbx        # imm = 0x9FB9528
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB198_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_336;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_336
	.align	16, 0x90
_transaction_336:                       # @_transaction_336
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	67984(%rbx), %r14
	cmpl	$0, 68000(%rbx)
	je	.LBB199_2
# BB#1:
	leaq	67848(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB199_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB199_4
# BB#3:
	addq	$167903744, %rbx        # imm = 0xA020200
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB199_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_337;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_337
	.align	16, 0x90
_transaction_337:                       # @_transaction_337
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	68144(%rbx), %r15
	cmpl	$0, 68160(%rbx)
	je	.LBB200_2
# BB#1:
	leaq	68008(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB200_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB200_4
# BB#3:
	leaq	167945872(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	68008(%rbx), %rcx
	addq	$162105344, %rbx        # imm = 0x9A98800
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB200_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_338;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_338
	.align	16, 0x90
_transaction_338:                       # @_transaction_338
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	68568(%rbx), %r14
	cmpl	$0, 68584(%rbx)
	je	.LBB201_2
# BB#1:
	leaq	68432(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB201_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB201_4
# BB#3:
	addq	$167952424, %rbx        # imm = 0xA02C028
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB201_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_339;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_339
	.align	16, 0x90
_transaction_339:                       # @_transaction_339
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	68728(%rbx), %r14
	cmpl	$0, 68744(%rbx)
	je	.LBB202_2
# BB#1:
	leaq	68592(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB202_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB202_4
# BB#3:
	addq	$167555144, %rbx        # imm = 0x9FCB048
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB202_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_340;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_340
	.align	16, 0x90
_transaction_340:                       # @_transaction_340
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	69152(%rbx), %r14
	cmpl	$0, 69168(%rbx)
	je	.LBB203_2
# BB#1:
	leaq	69016(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB203_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB203_4
# BB#3:
	addq	$167976152, %rbx        # imm = 0xA031CD8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB203_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_341;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_341
	.align	16, 0x90
_transaction_341:                       # @_transaction_341
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	69576(%rbx), %r15
	cmpl	$0, 69592(%rbx)
	je	.LBB204_2
# BB#1:
	leaq	69440(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB204_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB204_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	69440(%rbx), %rcx
	addq	$162099440, %rbx        # imm = 0x9A970F0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB204_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_342;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_342
	.align	16, 0x90
_transaction_342:                       # @_transaction_342
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	70000(%rbx), %r14
	cmpl	$0, 70016(%rbx)
	je	.LBB205_2
# BB#1:
	leaq	69864(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB205_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB205_4
# BB#3:
	addq	$167967256, %rbx        # imm = 0xA02FA18
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB205_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_343;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_343
	.align	16, 0x90
_transaction_343:                       # @_transaction_343
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	70424(%rbx), %r14
	cmpl	$0, 70440(%rbx)
	je	.LBB206_2
# BB#1:
	leaq	70288(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB206_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB206_4
# BB#3:
	addq	$167565016, %rbx        # imm = 0x9FCD6D8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB206_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_344;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_344
	.align	16, 0x90
_transaction_344:                       # @_transaction_344
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	70848(%rbx), %r14
	cmpl	$0, 70864(%rbx)
	je	.LBB207_2
# BB#1:
	leaq	70712(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB207_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB207_4
# BB#3:
	addq	$167972200, %rbx        # imm = 0xA030D68
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB207_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_345;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_345
	.align	16, 0x90
_transaction_345:                       # @_transaction_345
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	71008(%rbx), %r14
	cmpl	$0, 71024(%rbx)
	je	.LBB208_2
# BB#1:
	leaq	70872(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB208_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB208_4
# BB#3:
	leaq	167595976(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$167789104, %rbx        # imm = 0xA004230
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB208_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_346;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_346
	.align	16, 0x90
_transaction_346:                       # @_transaction_346
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	71168(%rbx), %r14
	cmpl	$0, 71184(%rbx)
	je	.LBB209_2
# BB#1:
	leaq	71032(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB209_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB209_4
# BB#3:
	addq	$167569072, %rbx        # imm = 0x9FCE6B0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB209_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_347;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_347
	.align	16, 0x90
_transaction_347:                       # @_transaction_347
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	71592(%rbx), %r14
	cmpl	$0, 71608(%rbx)
	je	.LBB210_2
# BB#1:
	leaq	71456(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB210_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB210_4
# BB#3:
	addq	$167620488, %rbx        # imm = 0x9FDAF88
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB210_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_348;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_348
	.align	16, 0x90
_transaction_348:                       # @_transaction_348
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	72016(%rbx), %r14
	cmpl	$0, 72032(%rbx)
	je	.LBB211_2
# BB#1:
	leaq	71880(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB211_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB211_4
# BB#3:
	addq	$167644304, %rbx        # imm = 0x9FE0C90
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB211_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_349;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_349
	.align	16, 0x90
_transaction_349:                       # @_transaction_349
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	72440(%rbx), %r14
	cmpl	$0, 72456(%rbx)
	je	.LBB212_2
# BB#1:
	leaq	72304(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB212_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB212_4
# BB#3:
	addq	$167678520, %rbx        # imm = 0x9FE9238
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB212_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_350;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_350
	.align	16, 0x90
_transaction_350:                       # @_transaction_350
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	72864(%rbx), %r14
	cmpl	$0, 72880(%rbx)
	je	.LBB213_2
# BB#1:
	leaq	72728(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB213_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB213_4
# BB#3:
	addq	$167702336, %rbx        # imm = 0x9FEEF40
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB213_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_351;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_351
	.align	16, 0x90
_transaction_351:                       # @_transaction_351
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	73288(%rbx), %r14
	cmpl	$0, 73304(%rbx)
	je	.LBB214_2
# BB#1:
	leaq	73152(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB214_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB214_4
# BB#3:
	addq	$167744768, %rbx        # imm = 0x9FF9500
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB214_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_352;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_352
	.align	16, 0x90
_transaction_352:                       # @_transaction_352
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	73712(%rbx), %r14
	cmpl	$0, 73728(%rbx)
	je	.LBB215_2
# BB#1:
	leaq	73576(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB215_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB215_4
# BB#3:
	addq	$167768584, %rbx        # imm = 0x9FFF208
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB215_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_353;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_353
	.align	16, 0x90
_transaction_353:                       # @_transaction_353
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	74136(%rbx), %r14
	cmpl	$0, 74152(%rbx)
	je	.LBB216_2
# BB#1:
	leaq	74000(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB216_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB216_4
# BB#3:
	addq	$167802800, %rbx        # imm = 0xA0077B0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB216_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_354;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_354
	.align	16, 0x90
_transaction_354:                       # @_transaction_354
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	74560(%rbx), %r14
	cmpl	$0, 74576(%rbx)
	je	.LBB217_2
# BB#1:
	leaq	74424(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB217_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB217_4
# BB#3:
	addq	$167584160, %rbx        # imm = 0x9FD21A0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB217_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_355;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_355
	.align	16, 0x90
_transaction_355:                       # @_transaction_355
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	74720(%rbx), %r14
	cmpl	$0, 74736(%rbx)
	je	.LBB218_2
# BB#1:
	leaq	74584(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB218_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB218_4
# BB#3:
	addq	$167635576, %rbx        # imm = 0x9FDEA78
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB218_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_356;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_356
	.align	16, 0x90
_transaction_356:                       # @_transaction_356
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	74880(%rbx), %r14
	cmpl	$0, 74896(%rbx)
	je	.LBB219_2
# BB#1:
	leaq	74744(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB219_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB219_4
# BB#3:
	addq	$167659392, %rbx        # imm = 0x9FE4780
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB219_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_357;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_357
	.align	16, 0x90
_transaction_357:                       # @_transaction_357
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	75040(%rbx), %r14
	cmpl	$0, 75056(%rbx)
	je	.LBB220_2
# BB#1:
	leaq	74904(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB220_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB220_4
# BB#3:
	addq	$167693608, %rbx        # imm = 0x9FECD28
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB220_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_358;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_358
	.align	16, 0x90
_transaction_358:                       # @_transaction_358
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	75200(%rbx), %r14
	cmpl	$0, 75216(%rbx)
	je	.LBB221_2
# BB#1:
	leaq	75064(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB221_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB221_4
# BB#3:
	addq	$167717424, %rbx        # imm = 0x9FF2A30
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB221_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_359;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_359
	.align	16, 0x90
_transaction_359:                       # @_transaction_359
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	75360(%rbx), %r14
	cmpl	$0, 75376(%rbx)
	je	.LBB222_2
# BB#1:
	leaq	75224(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB222_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB222_4
# BB#3:
	addq	$167759856, %rbx        # imm = 0x9FFCFF0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB222_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_360;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_360
	.align	16, 0x90
_transaction_360:                       # @_transaction_360
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	75520(%rbx), %r14
	cmpl	$0, 75536(%rbx)
	je	.LBB223_2
# BB#1:
	leaq	75384(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB223_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB223_4
# BB#3:
	addq	$167783672, %rbx        # imm = 0xA002CF8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB223_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_361;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_361
	.align	16, 0x90
_transaction_361:                       # @_transaction_361
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	75680(%rbx), %r14
	cmpl	$0, 75696(%rbx)
	je	.LBB224_2
# BB#1:
	leaq	75544(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB224_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB224_4
# BB#3:
	addq	$167817888, %rbx        # imm = 0xA00B2A0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB224_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_362;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_362
	.align	16, 0x90
_transaction_362:                       # @_transaction_362
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	75840(%rbx), %r14
	cmpl	$0, 75856(%rbx)
	je	.LBB225_2
# BB#1:
	leaq	75704(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB225_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB225_4
# BB#3:
	addq	$168093576, %rbx        # imm = 0xA04E788
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB225_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_363;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_363
	.align	16, 0x90
_transaction_363:                       # @_transaction_363
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	76264(%rbx), %r14
	cmpl	$0, 76280(%rbx)
	je	.LBB226_2
# BB#1:
	leaq	76128(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB226_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB226_4
# BB#3:
	addq	$167569408, %rbx        # imm = 0x9FCE800
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB226_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_364;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_364
	.align	16, 0x90
_transaction_364:                       # @_transaction_364
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	76688(%rbx), %r14
	cmpl	$0, 76704(%rbx)
	je	.LBB227_2
# BB#1:
	leaq	76552(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB227_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB227_4
# BB#3:
	addq	$167620824, %rbx        # imm = 0x9FDB0D8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB227_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_365;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_365
	.align	16, 0x90
_transaction_365:                       # @_transaction_365
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	77112(%rbx), %r14
	cmpl	$0, 77128(%rbx)
	je	.LBB228_2
# BB#1:
	leaq	76976(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB228_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB228_4
# BB#3:
	addq	$167644640, %rbx        # imm = 0x9FE0DE0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB228_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_366;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_366
	.align	16, 0x90
_transaction_366:                       # @_transaction_366
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	77536(%rbx), %r14
	cmpl	$0, 77552(%rbx)
	je	.LBB229_2
# BB#1:
	leaq	77400(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB229_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB229_4
# BB#3:
	addq	$167678856, %rbx        # imm = 0x9FE9388
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB229_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_367;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_367
	.align	16, 0x90
_transaction_367:                       # @_transaction_367
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	77960(%rbx), %r14
	cmpl	$0, 77976(%rbx)
	je	.LBB230_2
# BB#1:
	leaq	77824(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB230_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB230_4
# BB#3:
	addq	$167702672, %rbx        # imm = 0x9FEF090
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB230_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_368;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_368
	.align	16, 0x90
_transaction_368:                       # @_transaction_368
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	78384(%rbx), %r14
	cmpl	$0, 78400(%rbx)
	je	.LBB231_2
# BB#1:
	leaq	78248(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB231_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB231_4
# BB#3:
	addq	$167745104, %rbx        # imm = 0x9FF9650
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB231_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_369;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_369
	.align	16, 0x90
_transaction_369:                       # @_transaction_369
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	78808(%rbx), %r14
	cmpl	$0, 78824(%rbx)
	je	.LBB232_2
# BB#1:
	leaq	78672(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB232_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB232_4
# BB#3:
	addq	$167768920, %rbx        # imm = 0x9FFF358
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB232_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_370;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_370
	.align	16, 0x90
_transaction_370:                       # @_transaction_370
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	79232(%rbx), %r14
	cmpl	$0, 79248(%rbx)
	je	.LBB233_2
# BB#1:
	leaq	79096(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB233_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB233_4
# BB#3:
	addq	$167803136, %rbx        # imm = 0xA007900
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB233_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_371;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_371
	.align	16, 0x90
_transaction_371:                       # @_transaction_371
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	79656(%rbx), %r14
	cmpl	$0, 79672(%rbx)
	je	.LBB234_2
# BB#1:
	leaq	79520(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB234_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB234_4
# BB#3:
	leaq	167612472(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$167733648, %rbx        # imm = 0x9FF6990
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB234_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_372;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_372
	.align	16, 0x90
_transaction_372:                       # @_transaction_372
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	80080(%rbx), %r14
	cmpl	$0, 80096(%rbx)
	je	.LBB235_2
# BB#1:
	leaq	79944(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB235_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB235_4
# BB#3:
	addq	$167983688, %rbx        # imm = 0xA033A48
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB235_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_381;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_381
	.align	16, 0x90
_transaction_381:                       # @_transaction_381
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	81520(%rbx), %r15
	cmpl	$0, 81536(%rbx)
	je	.LBB236_2
# BB#1:
	leaq	81384(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB236_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB236_4
# BB#3:
	leaq	167957368(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	81384(%rbx), %rcx
	addq	$162105840, %rbx        # imm = 0x9A989F0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB236_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_382;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_382
	.align	16, 0x90
_transaction_382:                       # @_transaction_382
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	81760(%rbx), %r15
	cmpl	$0, 81776(%rbx)
	je	.LBB237_2
# BB#1:
	leaq	81624(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB237_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB237_4
# BB#3:
	leaq	167993832(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	81624(%rbx), %rcx
	addq	$162105840, %rbx        # imm = 0x9A989F0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB237_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_383;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_383
	.align	16, 0x90
_transaction_383:                       # @_transaction_383
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	82000(%rbx), %r15
	cmpl	$0, 82016(%rbx)
	je	.LBB238_2
# BB#1:
	leaq	81864(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB238_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB238_4
# BB#3:
	leaq	167962312(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	81864(%rbx), %rcx
	addq	$162105576, %rbx        # imm = 0x9A988E8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB238_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_385;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_385
	.align	16, 0x90
_transaction_385:                       # @_transaction_385
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %rbx
	movq	%rcx, %r12
	movl	48(%rbp), %r15d
	leaq	82400(%r12), %r14
	cmpl	$0, 82416(%r12)
	je	.LBB239_2
# BB#1:
	leaq	82264(%r12), %rcx
	movl	%r15d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%rbx, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %rbx
.LBB239_2:
	movl	%r15d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB239_14
# BB#3:
	leaq	ng20(%rip), %rcx
	movl	$14, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
	testl	%esi, %esi
	jne	.LBB239_5
# BB#4:
	movl	$0, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%r14, %rcx
	movq	%rbx, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB239_5
# BB#15:
	leaq	168006808(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB239_5:
	testl	%r15d, %r15d
	sete	%al
	cmpl	$1, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB239_7
# BB#6:
	movl	$1, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rcx
	movq	%rbx, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB239_7
# BB#16:
	leaq	168016952(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB239_7:
	cmpl	$2, %r15d
	setb	%al
	cmpl	$2, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB239_9
# BB#8:
	movl	$2, 40(%rsp)
	movl	$2, 32(%rsp)
	movq	%r14, %rcx
	movq	%rbx, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB239_9
# BB#17:
	leaq	168027096(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB239_9:
	cmpl	$3, %r15d
	setb	%al
	cmpl	$3, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB239_11
# BB#10:
	movl	$3, 40(%rsp)
	movl	$3, 32(%rsp)
	movq	%r14, %rcx
	movq	%rbx, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB239_11
# BB#18:
	leaq	168037240(%r12), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB239_11:
	cmpl	$4, %r15d
	setb	%al
	cmpl	$4, %esi
	seta	%cl
	orb	%al, %cl
	jne	.LBB239_13
# BB#12:
	movl	$4, 40(%rsp)
	movl	$4, 32(%rsp)
	movq	%r14, %rcx
	movq	%rbx, %rdx
	movl	%esi, %r8d
	movl	%r15d, %r9d
	callq	*__imp__iki_vlog_cmp_val_NSROverlap(%rip)
	testl	%eax, %eax
	je	.LBB239_13
# BB#19:
	addq	$168050488, %r12        # imm = 0xA043F38
	movq	%r12, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
.LBB239_13:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB239_14:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_386;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_386
	.align	16, 0x90
_transaction_386:                       # @_transaction_386
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	83824(%rbx), %r15
	cmpl	$0, 83840(%rbx)
	je	.LBB240_2
# BB#1:
	leaq	83688(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB240_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB240_4
# BB#3:
	leaq	83688(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB240_5
.LBB240_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	83688(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162102776, %rbx        # imm = 0x9A97DF8
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB240_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_387;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_387
	.align	16, 0x90
_transaction_387:                       # @_transaction_387
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	84072(%rbx), %r15
	cmpl	$0, 84088(%rbx)
	je	.LBB241_2
# BB#1:
	leaq	83936(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB241_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB241_4
# BB#3:
	leaq	83936(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB241_5
.LBB241_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	83936(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162102776, %rbx        # imm = 0x9A97DF8
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB241_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_388;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_388
	.align	16, 0x90
_transaction_388:                       # @_transaction_388
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	84320(%rbx), %r15
	cmpl	$0, 84336(%rbx)
	je	.LBB242_2
# BB#1:
	leaq	84184(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB242_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB242_4
# BB#3:
	leaq	84184(%rbx), %rcx
	movl	%edi, 32(%rsp)
	movq	$0, 40(%rsp)
	xorl	%r9d, %r9d
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_strengthcmp(%rip)
	testl	%eax, %eax
	je	.LBB242_5
.LBB242_4:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	84184(%rbx), %r15
	movq	$0, 32(%rsp)
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_strength_copy(%rip)
	addq	$162102776, %rbx        # imm = 0x9A97DF8
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB242_5:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_389;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_389
	.align	16, 0x90
_transaction_389:                       # @_transaction_389
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r13
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	84432(%rbx), %r15
	movq	%r15, 32(%rsp)
	movq	%r13, %rcx
	movl	%r8d, %edx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_handle_force_release_and_driver_resolution(%rip)
	cmpl	$1, %eax
	je	.LBB243_6
# BB#1:
	leaq	84568(%rbx), %r12
	cmpl	$0, 84584(%rbx)
	je	.LBB243_3
# BB#2:
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r13
.LBB243_3:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	je	.LBB243_5
# BB#4:
	movq	%r15, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_compare_resolved_strength(%rip)
	testl	%eax, %eax
	je	.LBB243_6
.LBB243_5:
	leaq	168045264(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movl	%esi, %edx
	movq	%r13, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	%r15, %rcx
	movl	%esi, %edx
	callq	*__imp__iki_vlog_copy_resolved_strength(%rip)
	addq	$162102776, %rbx        # imm = 0x9A97DF8
	movq	%rbx, 32(%rsp)
	movq	%r15, %rcx
	movq	%r13, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB243_6:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_390;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_390
	.align	16, 0x90
_transaction_390:                       # @_transaction_390
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	84848(%rbx), %r15
	cmpl	$0, 84864(%rbx)
	je	.LBB244_2
# BB#1:
	leaq	84712(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB244_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB244_4
# BB#3:
	leaq	167946208(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	84712(%rbx), %rcx
	addq	$162104152, %rbx        # imm = 0x9A98358
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB244_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_391;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_391
	.align	16, 0x90
_transaction_391:                       # @_transaction_391
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	85088(%rbx), %r15
	cmpl	$0, 85104(%rbx)
	je	.LBB245_2
# BB#1:
	leaq	84952(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB245_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB245_4
# BB#3:
	leaq	167998776(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	84952(%rbx), %rcx
	addq	$162103464, %rbx        # imm = 0x9A980A8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB245_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_392;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_392
	.align	16, 0x90
_transaction_392:                       # @_transaction_392
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	85328(%rbx), %r15
	cmpl	$0, 85344(%rbx)
	je	.LBB246_2
# BB#1:
	leaq	85192(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB246_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB246_4
# BB#3:
	leaq	168012024(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	85192(%rbx), %rcx
	addq	$162103464, %rbx        # imm = 0x9A980A8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB246_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_393;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_393
	.align	16, 0x90
_transaction_393:                       # @_transaction_393
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	85568(%rbx), %r15
	cmpl	$0, 85584(%rbx)
	je	.LBB247_2
# BB#1:
	leaq	85432(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB247_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB247_4
# BB#3:
	leaq	168022168(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	85432(%rbx), %rcx
	addq	$162103464, %rbx        # imm = 0x9A980A8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB247_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_394;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_394
	.align	16, 0x90
_transaction_394:                       # @_transaction_394
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	85808(%rbx), %r15
	cmpl	$0, 85824(%rbx)
	je	.LBB248_2
# BB#1:
	leaq	85672(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB248_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB248_4
# BB#3:
	leaq	168032312(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	85672(%rbx), %rcx
	addq	$162103464, %rbx        # imm = 0x9A980A8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB248_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_395;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_395
	.align	16, 0x90
_transaction_395:                       # @_transaction_395
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	86048(%rbx), %r15
	cmpl	$0, 86064(%rbx)
	je	.LBB249_2
# BB#1:
	leaq	85912(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB249_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB249_4
# BB#3:
	leaq	168042456(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	85912(%rbx), %rcx
	addq	$162104632, %rbx        # imm = 0x9A98538
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB249_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_396;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_396
	.align	16, 0x90
_transaction_396:                       # @_transaction_396
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	86288(%rbx), %r15
	cmpl	$0, 86304(%rbx)
	je	.LBB250_2
# BB#1:
	leaq	86152(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB250_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB250_4
# BB#3:
	leaq	168068200(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	86152(%rbx), %rcx
	addq	$162105576, %rbx        # imm = 0x9A988E8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB250_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_397;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_397
	.align	16, 0x90
_transaction_397:                       # @_transaction_397
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	86528(%rbx), %r14
	cmpl	$0, 86544(%rbx)
	je	.LBB251_2
# BB#1:
	leaq	86392(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB251_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB251_4
# BB#3:
	leaq	167922048(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	addq	$167989120, %rbx        # imm = 0xA034F80
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB251_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_398;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_398
	.align	16, 0x90
_transaction_398:                       # @_transaction_398
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	86688(%rbx), %r15
	cmpl	$0, 86704(%rbx)
	je	.LBB252_2
# BB#1:
	leaq	86552(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB252_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB252_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	addq	$86552, %rbx            # imm = 0x15218
	leaq	ng21(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$4, 40(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction_multiple(%rip)
.LBB252_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_399;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_399
	.align	16, 0x90
_transaction_399:                       # @_transaction_399
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	87112(%rbx), %r14
	cmpl	$0, 87128(%rbx)
	je	.LBB253_2
# BB#1:
	leaq	86976(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB253_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB253_4
# BB#3:
	addq	$168073144, %rbx        # imm = 0xA0497B8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB253_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_400;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_400
	.align	16, 0x90
_transaction_400:                       # @_transaction_400
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	87272(%rbx), %r14
	cmpl	$0, 87288(%rbx)
	je	.LBB254_2
# BB#1:
	leaq	87136(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB254_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB254_4
# BB#3:
	addq	$167308368, %rbx        # imm = 0x9F8EC50
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB254_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_401;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_401
	.align	16, 0x90
_transaction_401:                       # @_transaction_401
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %rbx
	movl	48(%rbp), %edi
	leaq	87696(%rcx), %r14
	cmpl	$0, 87712(%rcx)
	je	.LBB255_2
# BB#1:
	addq	$87560, %rcx            # imm = 0x15608
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%rbx, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %rbx
.LBB255_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB255_4
# BB#3:
	leaq	ng22(%rip), %rcx
	movl	$25, %edx
	callq	*__imp__iki_schedule_process_priority_multiple(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB255_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _transaction_402;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_402
	.align	16, 0x90
_transaction_402:                       # @_transaction_402
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	88120(%rbx), %r14
	cmpl	$0, 88136(%rbx)
	je	.LBB256_2
# BB#1:
	leaq	87984(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB256_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB256_4
# BB#3:
	addq	$168083032, %rbx        # imm = 0xA04BE58
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB256_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_403;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_403
	.align	16, 0x90
_transaction_403:                       # @_transaction_403
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	88280(%rbx), %r14
	cmpl	$0, 88296(%rbx)
	je	.LBB257_2
# BB#1:
	leaq	88144(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB257_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB257_4
# BB#3:
	addq	$168087976, %rbx        # imm = 0xA04D1A8
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB257_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_404;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_404
	.align	16, 0x90
_transaction_404:                       # @_transaction_404
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	88440(%rbx), %r15
	cmpl	$0, 88456(%rbx)
	je	.LBB258_2
# BB#1:
	leaq	88304(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB258_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB258_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	88304(%rbx), %rcx
	addq	$162102488, %rbx        # imm = 0x9A97CD8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB258_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_405;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_405
	.align	16, 0x90
_transaction_405:                       # @_transaction_405
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	88600(%rbx), %r15
	cmpl	$0, 88616(%rbx)
	je	.LBB259_2
# BB#1:
	leaq	88464(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB259_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB259_4
# BB#3:
	leaq	167722520(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167732976(%rbx), %rcx
	callq	*%r13
	leaq	167754808(%rbx), %rcx
	callq	*%r13
	leaq	167788600(%rbx), %rcx
	callq	*%r13
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	88464(%rbx), %rcx
	addq	$162107960, %rbx        # imm = 0x9A99238
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB259_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_406;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_406
	.align	16, 0x90
_transaction_406:                       # @_transaction_406
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	88840(%rbx), %r15
	cmpl	$0, 88856(%rbx)
	je	.LBB260_2
# BB#1:
	leaq	88704(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB260_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB260_4
# BB#3:
	leaq	167664824(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167712376(%rbx), %rcx
	callq	*%r13
	leaq	167722688(%rbx), %rcx
	callq	*%r13
	leaq	167732808(%rbx), %rcx
	callq	*%r13
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	88704(%rbx), %rcx
	addq	$162107960, %rbx        # imm = 0x9A99238
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB260_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_407;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_407
	.align	16, 0x90
_transaction_407:                       # @_transaction_407
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	89080(%rbx), %r15
	cmpl	$0, 89096(%rbx)
	je	.LBB261_2
# BB#1:
	leaq	88944(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB261_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB261_4
# BB#3:
	leaq	167591720(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167733312(%rbx), %rcx
	callq	*%r13
	leaq	167788768(%rbx), %rcx
	callq	*%r13
	leaq	167812840(%rbx), %rcx
	callq	*%r13
	leaq	167975984(%rbx), %rcx
	callq	*%r13
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	88944(%rbx), %rcx
	addq	$162108224, %rbx        # imm = 0x9A99340
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB261_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_408;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_408
	.align	16, 0x90
_transaction_408:                       # @_transaction_408
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	89320(%rbx), %r15
	cmpl	$0, 89336(%rbx)
	je	.LBB262_2
# BB#1:
	leaq	89184(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB262_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB262_4
# BB#3:
	leaq	167722856(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167733144(%rbx), %rcx
	callq	*%r13
	leaq	167778624(%rbx), %rcx
	callq	*%r13
	leaq	167788936(%rbx), %rcx
	callq	*%r13
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	89184(%rbx), %rcx
	addq	$162108224, %rbx        # imm = 0x9A99340
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB262_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_409;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_409
	.align	16, 0x90
_transaction_409:                       # @_transaction_409
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	89560(%rbx), %r15
	cmpl	$0, 89576(%rbx)
	je	.LBB263_2
# BB#1:
	leaq	89424(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB263_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB263_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	89424(%rbx), %rcx
	addq	$162099768, %rbx        # imm = 0x9A97238
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB263_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_410;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_410
	.align	16, 0x90
_transaction_410:                       # @_transaction_410
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	89720(%rbx), %r14
	cmpl	$0, 89736(%rbx)
	je	.LBB264_2
# BB#1:
	leaq	89584(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB264_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB264_4
# BB#3:
	addq	$167890072, %rbx        # imm = 0xA01CC98
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB264_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_411;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_411
	.align	16, 0x90
_transaction_411:                       # @_transaction_411
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	90144(%rbx), %r14
	cmpl	$0, 90160(%rbx)
	je	.LBB265_2
# BB#1:
	leaq	90008(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB265_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB265_4
# BB#3:
	addq	$168111936, %rbx        # imm = 0xA052F40
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB265_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_412;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_412
	.align	16, 0x90
_transaction_412:                       # @_transaction_412
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	90304(%rbx), %r14
	cmpl	$0, 90320(%rbx)
	je	.LBB266_2
# BB#1:
	leaq	90168(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB266_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB266_4
# BB#3:
	leaq	167826024(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r12
	callq	*%r12
	leaq	167828784(%rbx), %rcx
	callq	*%r12
	leaq	167836488(%rbx), %rcx
	callq	*%r12
	addq	$167979176, %rbx        # imm = 0xA0328A8
	movq	%rbx, %rcx
	callq	*%r12
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB266_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_413;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_413
	.align	16, 0x90
_transaction_413:                       # @_transaction_413
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r15
	movq	%rcx, %rbx
	movl	48(%rbp), %edi
	leaq	90728(%rbx), %r14
	cmpl	$0, 90744(%rbx)
	je	.LBB267_2
# BB#1:
	leaq	90592(%rbx), %rcx
	movl	%edi, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r15, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r15
.LBB267_2:
	subl	%esi, %edi
	incl	%edi
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB267_4
# BB#3:
	addq	$168122080, %rbx        # imm = 0xA0556E0
	movq	%rbx, %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movl	%esi, %edx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
.LBB267_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_414;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_414
	.align	16, 0x90
_transaction_414:                       # @_transaction_414
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	90888(%rbx), %r15
	cmpl	$0, 90904(%rbx)
	je	.LBB268_2
# BB#1:
	leaq	90752(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB268_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB268_4
# BB#3:
	leaq	167890240(%rbx), %rcx
	movq	__imp__iki_schedule_process_priority(%rip), %r13
	callq	*%r13
	leaq	167911416(%rbx), %rcx
	callq	*%r13
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	90752(%rbx), %rcx
	addq	$162105112, %rbx        # imm = 0x9A98718
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB268_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_415;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_415
	.align	16, 0x90
_transaction_415:                       # @_transaction_415
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	91312(%rbx), %r15
	cmpl	$0, 91328(%rbx)
	je	.LBB269_2
# BB#1:
	leaq	91176(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB269_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB269_4
# BB#3:
	leaq	168127024(%rbx), %rcx
	callq	*__imp__iki_schedule_process_priority(%rip)
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	91176(%rbx), %rcx
	addq	$162099192, %rbx        # imm = 0x9A96FF8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB269_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_416;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_416
	.align	16, 0x90
_transaction_416:                       # @_transaction_416
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	91552(%rbx), %r15
	cmpl	$0, 91568(%rbx)
	je	.LBB270_2
# BB#1:
	leaq	91416(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB270_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB270_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	91416(%rbx), %rcx
	addq	$162092944, %rbx        # imm = 0x9A95790
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB270_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_420;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_420
	.align	16, 0x90
_transaction_420:                       # @_transaction_420
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	92272(%rbx), %r15
	cmpl	$0, 92288(%rbx)
	je	.LBB271_2
# BB#1:
	leaq	92136(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB271_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB271_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	92136(%rbx), %rcx
	addq	$162093936, %rbx        # imm = 0x9A95B70
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB271_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_422;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_422
	.align	16, 0x90
_transaction_422:                       # @_transaction_422
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	92672(%rbx), %r15
	cmpl	$0, 92688(%rbx)
	je	.LBB272_2
# BB#1:
	leaq	92536(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB272_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB272_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	92536(%rbx), %rcx
	addq	$162099192, %rbx        # imm = 0x9A96FF8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB272_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_425;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_425
	.align	16, 0x90
_transaction_425:                       # @_transaction_425
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	93232(%rbx), %r15
	cmpl	$0, 93248(%rbx)
	je	.LBB273_2
# BB#1:
	leaq	93096(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB273_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB273_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	93096(%rbx), %rcx
	addq	$162101952, %rbx        # imm = 0x9A97AC0
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB273_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_426;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_426
	.align	16, 0x90
_transaction_426:                       # @_transaction_426
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	93392(%rbx), %r15
	cmpl	$0, 93408(%rbx)
	je	.LBB274_2
# BB#1:
	leaq	93256(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB274_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB274_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	93256(%rbx), %rcx
	addq	$162102184, %rbx        # imm = 0x9A97BA8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB274_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_427;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_427
	.align	16, 0x90
_transaction_427:                       # @_transaction_427
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	93712(%rbx), %r15
	cmpl	$0, 93728(%rbx)
	je	.LBB275_2
# BB#1:
	leaq	93576(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB275_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB275_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	93576(%rbx), %rcx
	addq	$162102488, %rbx        # imm = 0x9A97CD8
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB275_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_428;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_428
	.align	16, 0x90
_transaction_428:                       # @_transaction_428
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	93872(%rbx), %r15
	cmpl	$0, 93888(%rbx)
	je	.LBB276_2
# BB#1:
	leaq	93736(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB276_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB276_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	93736(%rbx), %rcx
	addq	$162104152, %rbx        # imm = 0x9A98358
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB276_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_429;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_429
	.align	16, 0x90
_transaction_429:                       # @_transaction_429
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	94112(%rbx), %r15
	cmpl	$0, 94128(%rbx)
	je	.LBB277_2
# BB#1:
	leaq	93976(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB277_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB277_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	93976(%rbx), %rcx
	addq	$162104400, %rbx        # imm = 0x9A98450
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB277_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_430;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_430
	.align	16, 0x90
_transaction_430:                       # @_transaction_430
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	94272(%rbx), %r15
	cmpl	$0, 94288(%rbx)
	je	.LBB278_2
# BB#1:
	leaq	94136(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB278_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB278_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	94136(%rbx), %rcx
	addq	$162104632, %rbx        # imm = 0x9A98538
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB278_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _transaction_431;
	.scl	2;
	.type	32;
	.endef
	.globl	_transaction_431
	.align	16, 0x90
_transaction_431:                       # @_transaction_431
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movl	%r9d, %esi
	movq	%rdx, %r12
	movq	%rcx, %rbx
	movl	48(%rbp), %r14d
	leaq	94512(%rbx), %r15
	cmpl	$0, 94528(%rbx)
	je	.LBB279_2
# BB#1:
	leaq	94376(%rbx), %rcx
	movl	%r14d, %r9d
	subl	%esi, %r9d
	incl	%r9d
	movq	%r12, %rdx
	movl	%esi, %r8d
	callq	*__imp__iki_vlog_event_callback(%rip)
	movq	%rax, %r12
.LBB279_2:
	movl	%r14d, %edi
	subl	%esi, %edi
	incl	%edi
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	movl	%edi, %r9d
	callq	*__imp__iki_vlog_memcmp_0(%rip)
	cmpl	$1, %eax
	jne	.LBB279_4
# BB#3:
	movl	%edi, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movl	%esi, %edx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	leaq	94376(%rbx), %rcx
	addq	$162104880, %rbx        # imm = 0x9A98630
	movq	%rbx, 32(%rsp)
	movq	%r12, %rdx
	movl	%esi, %r8d
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_propagate_transaction(%rip)
.LBB279_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_257466;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257466
	.align	16, 0x90
_execute_257466:                        # @_execute_257466
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257467;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257467
	.align	16, 0x90
_execute_257467:                        # @_execute_257467
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257468;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257468
	.align	16, 0x90
_execute_257468:                        # @_execute_257468
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257469;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257469
	.align	16, 0x90
_execute_257469:                        # @_execute_257469
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257470;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257470
	.align	16, 0x90
_execute_257470:                        # @_execute_257470
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257471;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257471
	.align	16, 0x90
_execute_257471:                        # @_execute_257471
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257472;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257472
	.align	16, 0x90
_execute_257472:                        # @_execute_257472
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257473;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257473
	.align	16, 0x90
_execute_257473:                        # @_execute_257473
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_39;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_39
	.align	16, 0x90
_execute_39:                            # @_execute_39
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$4, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_40;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_40
	.align	16, 0x90
_execute_40:                            # @_execute_40
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB289_1:                              # =>This Inner Loop Header: Depth=1
	movl	$5, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB289_29
# BB#2:                                 #   in Loop: Header=BB289_1 Depth=1
	jmpq	*%rax
.Ltmp871:                               # Block address taken
.LBB289_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB289_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB289_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB289_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB289_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB289_32
.LBB289_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB289_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB289_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB289_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB289_9
# BB#34:
	movq	664(%rsi), %r8
.LBB289_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB289_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB289_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp871(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB289_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB289_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB289_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB289_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB289_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB289_13
.LBB289_12:
	testl	%eax, %eax
	je	.LBB289_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB289_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB289_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB289_15:
	testb	%al, %al
	je	.LBB289_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB289_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB289_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB289_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB289_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB289_42
.LBB289_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB289_17
.LBB289_41:
	testl	%eax, %eax
	je	.LBB289_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB289_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB289_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB289_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB289_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB289_28
.LBB289_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB289_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB289_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB289_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB289_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB289_22
.LBB289_21:
	testl	%eax, %eax
	je	.LBB289_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB289_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB289_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB289_24:
	testb	%al, %al
	je	.LBB289_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB289_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB289_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB289_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB289_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB289_55
.LBB289_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB289_26
.LBB289_54:
	testl	%eax, %eax
	je	.LBB289_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB289_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB289_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB289_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB289_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB289_28
.LBB289_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB289_28

	.def	 _execute_41;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_41
	.align	16, 0x90
_execute_41:                            # @_execute_41
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB290_1:                              # =>This Inner Loop Header: Depth=1
	movl	$6, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB290_17
# BB#2:                                 #   in Loop: Header=BB290_1 Depth=1
	jmpq	*%rax
.Ltmp875:                               # Block address taken
.LBB290_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB290_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB290_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB290_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB290_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB290_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB290_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB290_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB290_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB290_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB290_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB290_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB290_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB290_11
.LBB290_10:
	testl	%eax, %eax
	je	.LBB290_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB290_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB290_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB290_13:
	testb	%al, %al
	je	.LBB290_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB290_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB290_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB290_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB290_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB290_29
.LBB290_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB290_15
.LBB290_28:
	testl	%eax, %eax
	je	.LBB290_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB290_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB290_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB290_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB290_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB290_17
.LBB290_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167178608, %ecx        # imm = 0x9F6F170
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167175264, %ecx        # imm = 0x9F6E460
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_ae8a4be_1(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175264, %ecx        # imm = 0x9F6E460
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_ae8a4be_1(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175264, %ecx        # imm = 0x9F6E460
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_ae8a4be_1(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175264, %ecx        # imm = 0x9F6E460
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_ae8a4be_1(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_ae8a4be_2(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167178608, %ecx        # imm = 0x9F6F170
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167175264, %ecx        # imm = 0x9F6E460
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_ae8a4be_1(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175264, %ecx        # imm = 0x9F6E460
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_ae8a4be_1(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167175264, %ecx        # imm = 0x9F6E460
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167175264, %ecx        # imm = 0x9F6E460
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_ae8a4be_1(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_ae8a4be_2(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB290_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp875(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_ae8a4be_1;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_ae8a4be_1
	.align	16, 0x90
_subprog_m_7ddf9423_ae8a4be_1:          # @_subprog_m_7ddf9423_ae8a4be_1
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB291_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB291_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB291_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB291_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB291_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB291_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB291_6
.LBB291_5:
	testl	%eax, %eax
	je	.LBB291_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB291_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB291_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB291_8:
	testb	%al, %al
	je	.LBB291_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB291_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB291_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB291_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB291_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB291_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB291_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB291_160
.LBB291_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB291_10
.LBB291_159:
	testl	%eax, %eax
	je	.LBB291_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB291_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB291_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB291_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB291_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB291_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB291_148
.LBB291_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB291_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB291_13
.LBB291_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB291_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB291_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB291_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB291_148
.LBB291_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB291_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB291_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB291_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB291_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB291_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB291_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB291_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB291_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB291_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB291_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB291_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB291_23
.LBB291_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB291_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB291_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB291_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB291_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB291_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB291_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB291_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB291_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB291_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB291_182
.LBB291_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB291_27
.LBB291_181:
	testl	%eax, %eax
	je	.LBB291_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB291_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB291_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB291_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB291_29
.LBB291_28:
	testl	%eax, %eax
	je	.LBB291_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB291_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB291_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB291_31:
	testb	%al, %al
	je	.LBB291_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB291_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB291_195
.LBB291_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB291_33
.LBB291_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB291_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB291_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB291_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB291_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB291_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB291_228
.LBB291_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB291_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB291_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB291_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB291_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB291_39
.LBB291_38:
	testl	%eax, %eax
	je	.LBB291_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB291_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB291_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB291_41:
	testb	%al, %al
	je	.LBB291_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB291_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB291_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB291_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB291_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB291_209
.LBB291_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB291_43
.LBB291_208:
	testl	%eax, %eax
	je	.LBB291_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB291_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB291_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB291_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB291_45
.LBB291_44:
	testl	%eax, %eax
	je	.LBB291_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB291_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB291_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB291_47:
	testb	%al, %al
	je	.LBB291_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB291_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB291_222
.LBB291_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB291_49
.LBB291_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB291_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB291_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB291_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB291_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB291_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB291_227
.LBB291_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB291_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB291_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB291_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB291_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB291_55
.LBB291_54:
	testl	%eax, %eax
	je	.LBB291_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB291_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB291_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB291_57:
	testb	%al, %al
	je	.LBB291_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB291_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB291_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB291_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB291_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB291_240
.LBB291_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB291_59
.LBB291_239:
	testl	%eax, %eax
	je	.LBB291_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB291_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB291_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB291_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB291_61
.LBB291_60:
	testl	%eax, %eax
	je	.LBB291_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB291_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB291_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB291_63:
	testb	%al, %al
	je	.LBB291_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB291_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB291_253
.LBB291_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB291_65
.LBB291_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB291_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB291_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB291_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB291_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB291_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB291_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB291_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB291_229
.LBB291_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB291_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB291_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB291_70
.LBB291_69:
	testl	%eax, %eax
	je	.LBB291_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB291_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB291_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB291_72:
	testb	%al, %al
	je	.LBB291_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB291_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB291_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB291_265
.LBB291_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB291_74
.LBB291_264:
	testl	%eax, %eax
	je	.LBB291_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB291_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB291_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB291_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB291_76
.LBB291_75:
	testl	%eax, %eax
	je	.LBB291_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB291_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB291_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB291_78:
	testb	%al, %al
	je	.LBB291_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB291_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB291_277
.LBB291_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB291_80
.LBB291_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB291_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB291_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB291_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB291_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB291_82
.LBB291_81:
	testl	%eax, %eax
	je	.LBB291_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB291_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB291_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB291_84:
	testb	%al, %al
	je	.LBB291_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB291_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB291_288
.LBB291_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB291_86
.LBB291_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB291_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB291_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB291_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB291_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB291_88
.LBB291_87:
	testl	%eax, %eax
	je	.LBB291_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB291_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB291_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB291_90:
	testb	%al, %al
	je	.LBB291_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB291_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB291_299
.LBB291_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB291_92
.LBB291_298:
	testl	%eax, %eax
	je	.LBB291_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB291_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB291_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB291_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB291_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB291_351
.LBB291_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB291_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB291_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB291_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB291_97
.LBB291_96:
	testl	%eax, %eax
	je	.LBB291_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB291_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB291_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB291_99:
	testb	%al, %al
	je	.LBB291_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB291_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB291_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB291_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB291_311
.LBB291_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB291_101
.LBB291_310:
	testl	%eax, %eax
	je	.LBB291_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB291_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB291_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB291_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB291_103
.LBB291_102:
	testl	%eax, %eax
	je	.LBB291_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB291_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB291_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB291_105:
	testb	%al, %al
	je	.LBB291_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB291_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB291_323
.LBB291_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB291_107
.LBB291_322:
	testl	%eax, %eax
	je	.LBB291_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB291_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB291_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB291_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB291_109
.LBB291_108:
	testl	%eax, %eax
	je	.LBB291_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB291_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB291_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB291_111:
	testb	%al, %al
	je	.LBB291_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB291_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB291_334
.LBB291_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB291_113
.LBB291_333:
	testl	%eax, %eax
	je	.LBB291_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB291_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB291_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB291_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB291_115
.LBB291_114:
	testl	%eax, %eax
	je	.LBB291_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB291_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB291_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB291_117:
	testb	%al, %al
	je	.LBB291_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB291_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB291_345
.LBB291_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB291_119
.LBB291_344:
	testl	%eax, %eax
	je	.LBB291_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB291_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB291_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB291_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB291_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB291_350
.LBB291_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB291_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB291_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB291_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB291_124
.LBB291_123:
	testl	%eax, %eax
	je	.LBB291_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB291_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB291_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB291_126:
	testb	%al, %al
	je	.LBB291_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB291_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB291_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB291_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB291_359
.LBB291_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB291_128
.LBB291_358:
	testl	%eax, %eax
	je	.LBB291_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB291_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB291_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB291_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB291_130
.LBB291_129:
	testl	%eax, %eax
	je	.LBB291_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB291_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB291_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB291_132:
	testb	%al, %al
	je	.LBB291_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB291_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB291_371
.LBB291_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB291_134
.LBB291_370:
	testl	%eax, %eax
	je	.LBB291_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB291_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB291_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB291_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB291_136
.LBB291_135:
	testl	%eax, %eax
	je	.LBB291_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB291_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB291_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB291_138:
	testb	%al, %al
	je	.LBB291_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB291_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB291_382
.LBB291_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB291_140
.LBB291_381:
	testl	%eax, %eax
	je	.LBB291_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB291_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB291_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB291_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB291_142
.LBB291_141:
	testl	%eax, %eax
	je	.LBB291_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB291_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB291_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB291_144:
	testb	%al, %al
	je	.LBB291_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB291_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB291_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB291_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB291_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB291_393
.LBB291_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB291_146
.LBB291_392:
	testl	%eax, %eax
	je	.LBB291_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB291_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB291_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB291_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB291_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB291_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB291_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB291_148
.LBB291_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB291_148

	.def	 _subprog_m_7ddf9423_ae8a4be_2;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_ae8a4be_2
	.align	16, 0x90
_subprog_m_7ddf9423_ae8a4be_2:          # @_subprog_m_7ddf9423_ae8a4be_2
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB292_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB292_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB292_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB292_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB292_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB292_5
.LBB292_4:
	testl	%eax, %eax
	je	.LBB292_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB292_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB292_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB292_7:
	testb	%al, %al
	je	.LBB292_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB292_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB292_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB292_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB292_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB292_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB292_73
.LBB292_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB292_9
.LBB292_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB292_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB292_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB292_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB292_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB292_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB292_63
.LBB292_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB292_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB292_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB292_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB292_15
.LBB292_14:
	testl	%eax, %eax
	je	.LBB292_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB292_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB292_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB292_17:
	testb	%al, %al
	je	.LBB292_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB292_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB292_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB292_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB292_87
.LBB292_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB292_19
.LBB292_86:
	testl	%eax, %eax
	je	.LBB292_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB292_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB292_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB292_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB292_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB292_21
.LBB292_20:
	testl	%eax, %eax
	je	.LBB292_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB292_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB292_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB292_23:
	testb	%al, %al
	je	.LBB292_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB292_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB292_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB292_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB292_98
.LBB292_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB292_25
.LBB292_97:
	testl	%eax, %eax
	je	.LBB292_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB292_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB292_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB292_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB292_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB292_103
.LBB292_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB292_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB292_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB292_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB292_30
.LBB292_29:
	testl	%eax, %eax
	je	.LBB292_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB292_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB292_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB292_32:
	testb	%al, %al
	je	.LBB292_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB292_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB292_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB292_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB292_114
.LBB292_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB292_34
.LBB292_113:
	testl	%eax, %eax
	je	.LBB292_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB292_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB292_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB292_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB292_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB292_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB292_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB292_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB292_39
.LBB292_38:
	testl	%eax, %eax
	je	.LBB292_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB292_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB292_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB292_41:
	testb	%al, %al
	je	.LBB292_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB292_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB292_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB292_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB292_126
.LBB292_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB292_43
.LBB292_125:
	testl	%eax, %eax
	je	.LBB292_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB292_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB292_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB292_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB292_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB292_104
.LBB292_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB292_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB292_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB292_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB292_48
.LBB292_47:
	testl	%eax, %eax
	je	.LBB292_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB292_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB292_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB292_50:
	testb	%al, %al
	je	.LBB292_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB292_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB292_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB292_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB292_139
.LBB292_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB292_52
.LBB292_138:
	testl	%eax, %eax
	je	.LBB292_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB292_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB292_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB292_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB292_53
.LBB292_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB292_103:
	xorl	%r8d, %r8d
.LBB292_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB292_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB292_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB292_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB292_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB292_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB292_57
.LBB292_56:
	testl	%eax, %eax
	je	.LBB292_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB292_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB292_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB292_59:
	testb	%al, %al
	je	.LBB292_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB292_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB292_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB292_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB292_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB292_152
.LBB292_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB292_61
.LBB292_151:
	testl	%eax, %eax
	je	.LBB292_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB292_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB292_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB292_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB292_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB292_104
.LBB292_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB292_63

	.def	 _execute_44;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_44
	.align	16, 0x90
_execute_44:                            # @_execute_44
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$7, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng37(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257474;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257474
	.align	16, 0x90
_execute_257474:                        # @_execute_257474
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	2048(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$2024, %rsi             # imm = 0x7E8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257475;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257475
	.align	16, 0x90
_execute_257475:                        # @_execute_257475
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	2216(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	488(%rsi), %rcx
	addq	$2192, %rsi             # imm = 0x890
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257476;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257476
	.align	16, 0x90
_execute_257476:                        # @_execute_257476
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	2384(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	544(%rsi), %rcx
	addq	$2360, %rsi             # imm = 0x938
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257477;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257477
	.align	16, 0x90
_execute_257477:                        # @_execute_257477
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	2552(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	600(%rsi), %rcx
	addq	$2528, %rsi             # imm = 0x9E0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257478;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257478
	.align	16, 0x90
_execute_257478:                        # @_execute_257478
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	2720(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	656(%rsi), %rcx
	addq	$2696, %rsi             # imm = 0xA88
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257479;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257479
	.align	16, 0x90
_execute_257479:                        # @_execute_257479
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	376(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	2888(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	712(%rsi), %rcx
	addq	$2864, %rsi             # imm = 0xB30
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257480;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257480
	.align	16, 0x90
_execute_257480:                        # @_execute_257480
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	776(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3056(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	40(%rsi), %rcx
	addq	$3032, %rsi             # imm = 0xBD8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_46;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_46
	.align	16, 0x90
_execute_46:                            # @_execute_46
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$616, %rsp              # imm = 0x268
	movq	%rdx, %rsi
	leaq	1096(%rsi), %r14
	.align	16, 0x90
.LBB301_1:                              # =>This Inner Loop Header: Depth=1
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1136(%rsi), %rax
	testq	%rax, %rax
	je	.LBB301_19
# BB#2:                                 #   in Loop: Header=BB301_1 Depth=1
	jmpq	*%rax
.Ltmp909:                               # Block address taken
.LBB301_3:
	movb	$0, 1216(%rsi)
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB301_4
# BB#20:
	orl	%eax, -64(%rbp)
.LBB301_4:
	movq	552(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB301_5
# BB#21:
	orl	%eax, -72(%rbp)
.LBB301_5:
	movq	608(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB301_6
# BB#22:
	orl	%eax, -80(%rbp)
.LBB301_6:
	movq	664(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB301_7
# BB#23:
	orl	%eax, -88(%rbp)
.LBB301_7:
	movq	720(%rsi), %rcx
	movl	-88(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -96(%rbp)
	movl	-84(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -92(%rbp)
	je	.LBB301_8
# BB#24:
	orl	%eax, -96(%rbp)
.LBB301_8:
	leaq	880(%rsi), %rbx
	leaq	1224(%rsi), %rdx
	leaq	-96(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	888(%rsi), %rdi
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB301_10
# BB#9:
	testl	%edi, %edi
	movl	$1, -64(%rbp)
	je	.LBB301_10
# BB#25:
	movl	$1, -60(%rbp)
.LBB301_10:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB301_11
# BB#26:
	movl	$1, -72(%rbp)
	jmp	.LBB301_12
.LBB301_11:
	testl	%eax, %eax
	je	.LBB301_12
# BB#27:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB301_12:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB301_14
# BB#13:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB301_14:
	testb	%al, %al
	je	.LBB301_15
# BB#28:
	movq	8(%rbx), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB301_30
# BB#29:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB301_30
# BB#34:
	movl	$1, -76(%rbp)
.LBB301_30:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB301_31
# BB#35:
	movl	$1, -88(%rbp)
	jmp	.LBB301_32
.LBB301_15:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB301_16
.LBB301_31:
	testl	%eax, %eax
	je	.LBB301_32
# BB#36:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB301_32:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB301_16
# BB#33:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB301_16:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB301_17
# BB#37:
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movq	552(%rsi), %rdx
	movq	608(%rsi), %rbx
	movq	664(%rsi), %rdi
	movq	720(%rsi), %r8
	movq	%rax, 112(%rsp)
	movq	%rcx, 96(%rsp)
	movq	%rdx, 80(%rsp)
	movq	%rbx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r8, 32(%rsp)
	movl	$1, 120(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-112(%rbp), %rdi
	movl	$6, %edx
	movl	$6, %r8d
	movl	$6, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	952(%rsi), %r9
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	824(%rsi), %rcx
	leaq	1288(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB301_18
.LBB301_17:
	leaq	3728(%rsi), %rdi
	movq	%rdi, -504(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movl	$167170616, %ecx        # imm = 0x9F6D238
	movl	$152, %r8d
	movq	%rdi, %rdx
	callq	*%rbx
	movq	%rax, -512(%rbp)        # 8-byte Spill
	movl	$167170616, %ecx        # imm = 0x9F6D238
	movl	$152, %r8d
	movq	%rdi, %rdx
	callq	*%rbx
	movq	%rax, %r13
	movl	$1, -128(%rbp)
	movl	$63, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	1080(%rsi), %r9
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %r15
	movl	$1, %edx
	movl	$8, %r8d
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movq	552(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	3616(%rsi), %rcx
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	leaq	1832(%rsi), %rdx
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rcx, %r12
	movq	%r15, %r8
	callq	*%rbx
	leaq	3672(%rsi), %rcx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	leaq	1864(%rsi), %rdx
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	leaq	_subprog_m_8a82f32d_25ba9140_3(%rip), %r8
	movq	%r14, %rcx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	movq	%r13, %rdx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	3560(%rsi), %rcx
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r14
	leaq	-88(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%r14, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1176(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167170616, %ecx        # imm = 0x9F6D238
	movl	$152, %r8d
	movq	-504(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rbx
	movl	$1, -144(%rbp)
	movl	$63, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	1064(%rsi), %r9
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rdi
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movq	552(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-496(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%r15
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-464(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	%rbx, %rdx
	leaq	_subprog_m_8a82f32d_25ba9140_3(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-456(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	leaq	-112(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1176(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167170616, %ecx        # imm = 0x9F6D238
	movl	$152, %r8d
	movq	%r13, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r13
	movl	$1, -176(%rbp)
	movl	$63, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	1048(%rsi), %r9
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rdi
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movq	552(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	movq	%r12, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-464(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	%r13, %rdx
	leaq	_subprog_m_8a82f32d_25ba9140_3(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-456(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	leaq	-192(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1176(%rsi), %rcx
	callq	*%r15
	movl	$167170616, %ecx        # imm = 0x9F6D238
	movl	$152, %r8d
	movq	-504(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rax
	callq	*%rax
	movq	%rax, %rdi
	movl	$1, -224(%rbp)
	movl	$63, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	1032(%rsi), %r9
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rbx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movq	552(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-496(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-464(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rdx
	movq	%r14, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-472(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rcx
	movq	%rdi, %rdx
	leaq	_subprog_m_8a82f32d_25ba9140_3(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	leaq	-240(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1176(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167170616, %ecx        # imm = 0x9F6D238
	movl	$152, %r8d
	movq	-504(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rbx
	movl	$1, -272(%rbp)
	movl	$63, -268(%rbp)
	movl	$0, -264(%rbp)
	leaq	1016(%rsi), %r9
	leaq	-272(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng39(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-248(%rbp), %rdi
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movq	552(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %r13
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r13, %rcx
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-496(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	movq	%r13, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	%r14, %rcx
	movq	%rbx, %rdx
	leaq	_subprog_m_8a82f32d_25ba9140_3(%rip), %r13
	movq	%r13, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r15
	callq	*%r15
	movl	$1, %edx
	movq	-456(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	leaq	-288(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1176(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167170616, %ecx        # imm = 0x9F6D238
	movl	$152, %r8d
	movq	-504(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rbx
	movl	$1, -320(%rbp)
	movl	$63, -316(%rbp)
	movl	$0, -312(%rbp)
	leaq	1000(%rsi), %r9
	leaq	-320(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng41(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng40(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-296(%rbp), %rdi
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r12
	callq	*%r12
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movq	552(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-328(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-496(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-464(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	%rbx, %rdx
	leaq	_subprog_m_8a82f32d_25ba9140_3(%rip), %r8
	movq	%rsi, %r9
	callq	*%r15
	movl	$1, %edx
	movq	-456(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r15
	callq	*%r15
	movq	%rax, %rdi
	leaq	-336(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1176(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167170616, %ecx        # imm = 0x9F6D238
	movl	$152, %r8d
	movq	%r13, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rbx
	movl	$1, -368(%rbp)
	movl	$63, -364(%rbp)
	movl	$0, -360(%rbp)
	leaq	984(%rsi), %r9
	leaq	-368(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng43(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng42(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-344(%rbp), %rdi
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r12
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movq	552(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r13
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-488(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rcx
	movq	-496(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-480(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	-464(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	%rbx, %rdx
	leaq	_subprog_m_8a82f32d_25ba9140_3(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-456(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r13
	leaq	-384(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	movq	__imp__iki_std_memset(%rip), %rax
	callq	*%rax
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%r13, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1176(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167170616, %ecx        # imm = 0x9F6D238
	movl	$152, %r8d
	movq	-504(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -504(%rbp)        # 8-byte Spill
	movl	$1, -416(%rbp)
	movl	$63, -412(%rbp)
	movl	$0, -408(%rbp)
	leaq	968(%rsi), %r9
	leaq	-416(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng44(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-392(%rbp), %rbx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movq	552(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r12, %rdx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movq	-464(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	callq	*%rbx
	movq	%rbx, %r12
	movl	$0, 32(%rsp)
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-504(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_8a82f32d_25ba9140_3(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-456(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	leaq	-432(%rbp), %r14
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%r14, %rcx
	movq	__imp__iki_std_memset(%rip), %rax
	callq	*%rax
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1176(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	leaq	-88(%rbp), %rax
	movq	%rax, 144(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 128(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 112(%rsp)
	leaq	-240(%rbp), %rax
	movq	%rax, 96(%rsp)
	leaq	-288(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-336(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-384(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%r14, 32(%rsp)
	movl	$1, 152(%rsp)
	movl	$1, 136(%rsp)
	movl	$1, 120(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %r14
	movl	$8, %edx
	movl	$8, %r8d
	movl	$8, %r9d
	movq	%r14, %rcx
	movq	__imp__iki_vlog_concat(%rip), %rdi
	callq	*%rdi
	movq	608(%rsi), %rax
	movq	664(%rsi), %rcx
	movq	720(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-440(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-488(%rbp), %rcx        # 8-byte Reload
	movq	-496(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	callq	*%r12
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-464(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_8a82f32d_25ba9140_3(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-456(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	leaq	-448(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1176(%rsi), %rcx
	callq	*%r15
	leaq	824(%rsi), %rcx
	leaq	1288(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
.LBB301_18:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB301_19:
	movb	$1, 1216(%rsi)
	leaq	.Ltmp909(%rip), %rax
	movq	%rax, 1136(%rsi)
	addq	$616, %rsp              # imm = 0x268
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_8a82f32d_25ba9140_3;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_8a82f32d_25ba9140_3
	.align	16, 0x90
_subprog_m_8a82f32d_25ba9140_3:         # @_subprog_m_8a82f32d_25ba9140_3
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	3672(%r12), %rdi
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r14
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%r14
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r15
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%r14
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r15
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB302_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB302_1:
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB302_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB302_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB302_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB302_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB302_6
.LBB302_5:
	testl	%eax, %eax
	je	.LBB302_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB302_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB302_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB302_8:
	testb	%al, %al
	je	.LBB302_9
# BB#154:
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%r14
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%r14
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r15
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB302_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB302_155:
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB302_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB302_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB302_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB302_158:
	movq	%rdi, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB302_160
.LBB302_9:
	movq	%rdi, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB302_10
.LBB302_159:
	testl	%eax, %eax
	je	.LBB302_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB302_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB302_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB302_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	3616(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB302_11
# BB#167:
	movl	$3, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB302_201:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	3560(%r12), %rcx
	addq	$3528, %r12             # imm = 0xDC8
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB302_148
.LBB302_11:
	movq	%rbx, -440(%rbp)        # 8-byte Spill
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB302_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %r13
	jmp	.LBB302_13
.LBB302_12:
	testl	%eax, %eax
	movq	%r14, %r13
	je	.LBB302_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB302_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB302_14
# BB#170:
	movq	%r12, %rdx
	leaq	3560(%rdx), %rcx
	addq	$3528, %rdx             # imm = 0xDC8
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB302_148
.LBB302_14:
	movl	$8, %edx
	movq	-440(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB302_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB302_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB302_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB302_18
# BB#172:
	movq	%r12, %rdx
	leaq	3560(%rdx), %rcx
	addq	$3528, %rdx             # imm = 0xDC8
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB302_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB302_18:
	movl	$3, %edx
	movq	%r13, %rcx
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r15
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rsi
	movq	%rsi, %r14
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r15
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB302_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB302_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB302_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB302_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	-440(%rbp), %r15        # 8-byte Reload
	je	.LBB302_22
# BB#175:
	movl	$1, -96(%rbp)
	jmp	.LBB302_23
.LBB302_22:
	testl	%eax, %eax
	je	.LBB302_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB302_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB302_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB302_25:
	testb	%al, %al
	je	.LBB302_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB302_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB302_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB302_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB302_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB302_182
.LBB302_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB302_27
.LBB302_181:
	testl	%eax, %eax
	je	.LBB302_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB302_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB302_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB302_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB302_29
.LBB302_28:
	testl	%eax, %eax
	je	.LBB302_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB302_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB302_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB302_31:
	testb	%al, %al
	je	.LBB302_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%r14
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	%r15, %r12
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rbx, %r15
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r14
	movq	%r14, %rbx
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r15
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	(%rbx), %ecx
	movl	4(%rbx), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_192
# BB#191:
	testl	%edi, %edi
	movl	$1, -248(%rbp)
	je	.LBB302_192
# BB#196:
	movl	$1, -244(%rbp)
.LBB302_192:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_193
# BB#197:
	movl	$1, -256(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r14
	movq	%r12, %r15
	jmp	.LBB302_194
.LBB302_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB302_33
.LBB302_193:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r14
	movq	%r12, %r15
	je	.LBB302_194
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB302_194:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB302_33
# BB#195:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB302_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB302_34
# BB#199:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%r14
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB302_200
.LBB302_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB302_36
# BB#203:
	movl	$1, -76(%rbp)
.LBB302_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB302_37
# BB#204:
	orl	%eax, -88(%rbp)
.LBB302_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_38
# BB#205:
	movl	$1, -96(%rbp)
	jmp	.LBB302_39
.LBB302_38:
	testl	%eax, %eax
	je	.LBB302_39
# BB#206:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB302_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB302_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB302_41:
	testb	%al, %al
	je	.LBB302_42
# BB#207:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_209
# BB#208:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB302_209
# BB#214:
	movl	$1, -116(%rbp)
.LBB302_209:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB302_210
# BB#215:
	orl	%eax, -128(%rbp)
.LBB302_210:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_211
# BB#216:
	movl	$1, -136(%rbp)
	jmp	.LBB302_212
.LBB302_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB302_43
.LBB302_211:
	testl	%eax, %eax
	je	.LBB302_212
# BB#217:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB302_212:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB302_43
# BB#213:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB302_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_44
# BB#218:
	movl	$1, -152(%rbp)
	jmp	.LBB302_45
.LBB302_44:
	testl	%eax, %eax
	je	.LBB302_45
# BB#219:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB302_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB302_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB302_47:
	testb	%al, %al
	je	.LBB302_48
# BB#220:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%r14
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rsi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rsi
	movq	%rsi, %r12
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%r14
	movq	%rax, %r15
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	(%rbx), %ecx
	movl	4(%rbx), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_222
# BB#221:
	testl	%edi, %edi
	movl	$1, -264(%rbp)
	je	.LBB302_222
# BB#226:
	movl	$1, -260(%rbp)
.LBB302_222:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_223
# BB#227:
	movl	$1, -272(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r14
	movq	-440(%rbp), %r15        # 8-byte Reload
	jmp	.LBB302_224
.LBB302_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB302_49
.LBB302_223:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r14
	movq	-440(%rbp), %r15        # 8-byte Reload
	je	.LBB302_224
# BB#228:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB302_224:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB302_49
# BB#225:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB302_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB302_50
# BB#229:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%r14
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB302_200:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB302_201
.LBB302_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rbx
	callq	*%rbx
	movq	%r14, %rsi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rsi
	movq	%rsi, %rdi
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rbx
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_52
# BB#51:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB302_52
# BB#230:
	movl	$1, -76(%rbp)
.LBB302_52:
	movl	(%r14), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%r14), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB302_53
# BB#231:
	orl	%eax, -88(%rbp)
.LBB302_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_54
# BB#232:
	movl	$1, -96(%rbp)
	jmp	.LBB302_55
.LBB302_54:
	testl	%eax, %eax
	je	.LBB302_55
# BB#233:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB302_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB302_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB302_57:
	testb	%al, %al
	je	.LBB302_58
# BB#234:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_236
# BB#235:
	testl	%ebx, %ebx
	movl	$1, -120(%rbp)
	je	.LBB302_236
# BB#241:
	movl	$1, -116(%rbp)
.LBB302_236:
	movl	(%r14), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%r14), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB302_237
# BB#242:
	orl	%eax, -128(%rbp)
.LBB302_237:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_238
# BB#243:
	movl	$1, -136(%rbp)
	jmp	.LBB302_239
.LBB302_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB302_59
.LBB302_238:
	testl	%eax, %eax
	je	.LBB302_239
# BB#244:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB302_239:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB302_59
# BB#240:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB302_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_60
# BB#245:
	movl	$1, -152(%rbp)
	jmp	.LBB302_61
.LBB302_60:
	testl	%eax, %eax
	je	.LBB302_61
# BB#246:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB302_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB302_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB302_63:
	testb	%al, %al
	je	.LBB302_64
# BB#247:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %r12
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%r12, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rcx
	movq	%rax, %r15
	movl	$8, %edx
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %ecx
	movl	4(%r15), %edi
	xorl	(%rbx), %ecx
	movl	4(%rbx), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_249
# BB#248:
	testl	%edi, %edi
	movl	$1, -264(%rbp)
	je	.LBB302_249
# BB#253:
	movl	$1, -260(%rbp)
.LBB302_249:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_250
# BB#254:
	movl	$1, -272(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rdi
	movq	-440(%rbp), %r15        # 8-byte Reload
	jmp	.LBB302_251
.LBB302_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB302_65
.LBB302_250:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rdi
	movq	-440(%rbp), %r15        # 8-byte Reload
	je	.LBB302_251
# BB#255:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB302_251:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB302_65
# BB#252:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB302_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB302_66
# BB#256:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	jmp	.LBB302_201
.LBB302_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB302_68
# BB#257:
	movl	$1, -68(%rbp)
.LBB302_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_69
# BB#258:
	movl	$1, -80(%rbp)
	jmp	.LBB302_70
.LBB302_69:
	testl	%eax, %eax
	je	.LBB302_70
# BB#259:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB302_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB302_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB302_72:
	testb	%al, %al
	je	.LBB302_73
# BB#260:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_262
# BB#261:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB302_262
# BB#266:
	movl	$1, -92(%rbp)
.LBB302_262:
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_263
# BB#267:
	movl	$1, -104(%rbp)
	jmp	.LBB302_264
.LBB302_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB302_74
.LBB302_263:
	testl	%eax, %eax
	je	.LBB302_264
# BB#268:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB302_264:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB302_74
# BB#265:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB302_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_75
# BB#269:
	movl	$1, -120(%rbp)
	jmp	.LBB302_76
.LBB302_75:
	testl	%eax, %eax
	je	.LBB302_76
# BB#270:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB302_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB302_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB302_78:
	testb	%al, %al
	je	.LBB302_79
# BB#271:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-136(%rbp), %r12
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%r12, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rcx
	movq	%rax, %r15
	movl	$8, %edx
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %ecx
	movl	4(%r15), %edi
	xorl	(%rbx), %ecx
	movl	4(%rbx), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_273
# BB#272:
	testl	%edi, %edi
	movl	$1, -176(%rbp)
	je	.LBB302_273
# BB#277:
	movl	$1, -172(%rbp)
.LBB302_273:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_274
# BB#278:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rdi
	movq	-440(%rbp), %r15        # 8-byte Reload
	jmp	.LBB302_275
.LBB302_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB302_80
.LBB302_274:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rdi
	movq	-440(%rbp), %r15        # 8-byte Reload
	je	.LBB302_275
# BB#279:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB302_275:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB302_80
# BB#276:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB302_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_81
# BB#280:
	movl	$1, -224(%rbp)
	jmp	.LBB302_82
.LBB302_81:
	testl	%eax, %eax
	je	.LBB302_82
# BB#281:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB302_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB302_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB302_84:
	testb	%al, %al
	je	.LBB302_85
# BB#282:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-256(%rbp), %r12
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%r12, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rcx
	movq	%rax, %r15
	movl	$8, %edx
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %ecx
	movl	4(%r15), %edi
	xorl	(%rbx), %ecx
	movl	4(%rbx), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_284
# BB#283:
	testl	%edi, %edi
	movl	$1, -312(%rbp)
	je	.LBB302_284
# BB#288:
	movl	$1, -308(%rbp)
.LBB302_284:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_285
# BB#289:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rdi
	movq	-440(%rbp), %r15        # 8-byte Reload
	jmp	.LBB302_286
.LBB302_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB302_86
.LBB302_285:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rdi
	movq	-440(%rbp), %r15        # 8-byte Reload
	je	.LBB302_286
# BB#290:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB302_286:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB302_86
# BB#287:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB302_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_87
# BB#291:
	movl	$1, -336(%rbp)
	jmp	.LBB302_88
.LBB302_87:
	testl	%eax, %eax
	je	.LBB302_88
# BB#292:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB302_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB302_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB302_90:
	testb	%al, %al
	je	.LBB302_91
# BB#293:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %r12
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%r12, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rcx
	movq	%rax, %r15
	movl	$8, %edx
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %ecx
	movl	4(%r15), %edi
	xorl	(%rbx), %ecx
	movl	4(%rbx), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_295
# BB#294:
	testl	%edi, %edi
	movl	$1, -392(%rbp)
	je	.LBB302_295
# BB#299:
	movl	$1, -388(%rbp)
.LBB302_295:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_296
# BB#300:
	movl	$1, -400(%rbp)
	jmp	.LBB302_297
.LBB302_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB302_92
.LBB302_296:
	testl	%eax, %eax
	je	.LBB302_297
# BB#301:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB302_297:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %rdi
	movq	-440(%rbp), %r15        # 8-byte Reload
	je	.LBB302_92
# BB#298:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB302_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB302_93
# BB#302:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB302_350
.LBB302_93:
	movq	%r15, %r12
	movq	%rdi, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB302_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB302_95
# BB#303:
	movl	$1, -68(%rbp)
.LBB302_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_96
# BB#304:
	movl	$1, -80(%rbp)
	jmp	.LBB302_97
.LBB302_96:
	testl	%eax, %eax
	je	.LBB302_97
# BB#305:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB302_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB302_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB302_99:
	testb	%al, %al
	je	.LBB302_100
# BB#306:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB302_308
# BB#307:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB302_308
# BB#312:
	movl	$1, -92(%rbp)
.LBB302_308:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_309
# BB#313:
	movl	$1, -104(%rbp)
	jmp	.LBB302_310
.LBB302_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB302_101
.LBB302_309:
	testl	%eax, %eax
	je	.LBB302_310
# BB#314:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB302_310:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB302_101
# BB#311:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB302_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_102
# BB#315:
	movl	$1, -120(%rbp)
	jmp	.LBB302_103
.LBB302_102:
	testl	%eax, %eax
	je	.LBB302_103
# BB#316:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB302_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB302_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB302_105:
	testb	%al, %al
	je	.LBB302_106
# BB#317:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r15
	callq	*%r15
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rbx
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r14
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r15
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rdi
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	(%rdi), %ecx
	movl	4(%rdi), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB302_319
# BB#318:
	testl	%eax, %eax
	movl	$1, -176(%rbp)
	je	.LBB302_319
# BB#323:
	movl	$1, -172(%rbp)
.LBB302_319:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_320
# BB#324:
	movl	$1, -184(%rbp)
	jmp	.LBB302_321
.LBB302_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB302_107
.LBB302_320:
	testl	%eax, %eax
	je	.LBB302_321
# BB#325:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB302_321:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB302_107
# BB#322:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB302_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_108
# BB#326:
	movl	$1, -224(%rbp)
	jmp	.LBB302_109
.LBB302_108:
	testl	%eax, %eax
	je	.LBB302_109
# BB#327:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB302_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB302_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB302_111:
	testb	%al, %al
	je	.LBB302_112
# BB#328:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r15
	callq	*%r15
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rbx
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r14
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r15
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rdi
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	(%rdi), %ecx
	movl	4(%rdi), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB302_330
# BB#329:
	testl	%eax, %eax
	movl	$1, -312(%rbp)
	je	.LBB302_330
# BB#334:
	movl	$1, -308(%rbp)
.LBB302_330:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_331
# BB#335:
	movl	$1, -320(%rbp)
	jmp	.LBB302_332
.LBB302_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB302_113
.LBB302_331:
	testl	%eax, %eax
	je	.LBB302_332
# BB#336:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB302_332:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB302_113
# BB#333:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB302_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_114
# BB#337:
	movl	$1, -336(%rbp)
	jmp	.LBB302_115
.LBB302_114:
	testl	%eax, %eax
	je	.LBB302_115
# BB#338:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB302_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB302_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB302_117:
	testb	%al, %al
	je	.LBB302_118
# BB#339:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r14
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r15
	callq	*%r15
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r14
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r15
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rdi
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rdi
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	(%rdi), %ecx
	movl	4(%rdi), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB302_341
# BB#340:
	testl	%eax, %eax
	movl	$1, -392(%rbp)
	je	.LBB302_341
# BB#345:
	movl	$1, -388(%rbp)
.LBB302_341:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_342
# BB#346:
	movl	$1, -400(%rbp)
	jmp	.LBB302_343
.LBB302_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB302_119
.LBB302_342:
	testl	%eax, %eax
	je	.LBB302_343
# BB#347:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB302_343:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB302_119
# BB#344:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB302_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB302_120
# BB#348:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r14, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB302_349
.LBB302_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB302_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB302_122
# BB#351:
	movl	$1, -68(%rbp)
.LBB302_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_123
# BB#352:
	movl	$1, -80(%rbp)
	jmp	.LBB302_124
.LBB302_123:
	testl	%eax, %eax
	je	.LBB302_124
# BB#353:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB302_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB302_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB302_126:
	testb	%al, %al
	je	.LBB302_127
# BB#354:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB302_356
# BB#355:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB302_356
# BB#360:
	movl	$1, -92(%rbp)
.LBB302_356:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_357
# BB#361:
	movl	$1, -104(%rbp)
	jmp	.LBB302_358
.LBB302_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB302_128
.LBB302_357:
	testl	%eax, %eax
	je	.LBB302_358
# BB#362:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB302_358:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB302_128
# BB#359:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB302_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_129
# BB#363:
	movl	$1, -120(%rbp)
	jmp	.LBB302_130
.LBB302_129:
	testl	%eax, %eax
	je	.LBB302_130
# BB#364:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB302_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB302_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB302_132:
	testb	%al, %al
	je	.LBB302_133
# BB#365:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r15
	callq	*%r15
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rbx
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r14
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r15
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rdi
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	(%rdi), %ecx
	movl	4(%rdi), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB302_367
# BB#366:
	testl	%eax, %eax
	movl	$1, -176(%rbp)
	je	.LBB302_367
# BB#371:
	movl	$1, -172(%rbp)
.LBB302_367:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_368
# BB#372:
	movl	$1, -184(%rbp)
	jmp	.LBB302_369
.LBB302_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB302_134
.LBB302_368:
	testl	%eax, %eax
	je	.LBB302_369
# BB#373:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB302_369:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB302_134
# BB#370:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB302_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_135
# BB#374:
	movl	$1, -224(%rbp)
	jmp	.LBB302_136
.LBB302_135:
	testl	%eax, %eax
	je	.LBB302_136
# BB#375:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB302_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB302_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB302_138:
	testb	%al, %al
	je	.LBB302_139
# BB#376:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r15
	callq	*%r15
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rbx
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r14
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r15
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rdi
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	(%rdi), %ecx
	movl	4(%rdi), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB302_378
# BB#377:
	testl	%eax, %eax
	movl	$1, -312(%rbp)
	je	.LBB302_378
# BB#382:
	movl	$1, -308(%rbp)
.LBB302_378:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_379
# BB#383:
	movl	$1, -320(%rbp)
	jmp	.LBB302_380
.LBB302_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB302_140
.LBB302_379:
	testl	%eax, %eax
	je	.LBB302_380
# BB#384:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB302_380:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB302_140
# BB#381:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB302_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_141
# BB#385:
	movl	$1, -336(%rbp)
	jmp	.LBB302_142
.LBB302_141:
	testl	%eax, %eax
	je	.LBB302_142
# BB#386:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB302_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB302_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB302_144:
	testb	%al, %al
	je	.LBB302_145
# BB#387:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r14
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r15
	callq	*%r15
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r14
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r14
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r15
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rdi
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rdi
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	(%rdi), %ecx
	movl	4(%rdi), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB302_389
# BB#388:
	testl	%eax, %eax
	movl	$1, -392(%rbp)
	je	.LBB302_389
# BB#393:
	movl	$1, -388(%rbp)
.LBB302_389:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB302_390
# BB#394:
	movl	$1, -400(%rbp)
	jmp	.LBB302_391
.LBB302_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB302_146
.LBB302_390:
	testl	%eax, %eax
	je	.LBB302_391
# BB#395:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB302_391:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB302_146
# BB#392:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB302_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB302_147
# BB#396:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r14, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB302_349:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB302_350:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	3560(%rdx), %rcx
	addq	$3528, %rdx             # imm = 0xDC8
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB302_148
.LBB302_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	3560(%rdx), %rax
	addq	$3528, %rdx             # imm = 0xDC8
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB302_148

	.def	 _execute_257482;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257482
	.align	16, 0x90
_execute_257482:                        # @_execute_257482
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	-24(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	leaq	912(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	152(%rsi), %rcx
	addq	$888, %rsi              # imm = 0x378
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257483;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257483
	.align	16, 0x90
_execute_257483:                        # @_execute_257483
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	-24(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	leaq	1072(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	208(%rsi), %rcx
	addq	$1048, %rsi             # imm = 0x418
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257490;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257490
	.align	16, 0x90
_execute_257490:                        # @_execute_257490
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$160, %rsp
	movq	%rdx, %rsi
	movq	608(%rsi), %r14
	movq	440(%rsi), %rbx
	movq	552(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$3, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng45(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$3, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$3, 40(%rsp)
	leaq	-40(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$2, %r9d
	callq	*__imp__iki_vlog_concat(%rip)
	movl	(%rbx), %eax
	xorl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	4(%rbx), %eax
	orl	-36(%rbp), %eax
	movl	%eax, -68(%rbp)
	je	.LBB305_2
# BB#1:
	orl	%eax, -72(%rbp)
.LBB305_2:
	leaq	2248(%rsi), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	488(%rsi), %rcx
	addq	$2224, %rsi             # imm = 0x8B0
	xorl	%r8d, %r8d
	movl	$3, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$160, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_257491;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257491
	.align	16, 0x90
_execute_257491:                        # @_execute_257491
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	movq	440(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rdi), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rdi), %ecx
	testb	$1, %cl
	je	.LBB306_1
# BB#13:
	movl	$1, -32(%rbp)
	jmp	.LBB306_2
.LBB306_1:
	testl	%eax, %eax
	je	.LBB306_2
# BB#14:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB306_2:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB306_4
# BB#3:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB306_4:
	testb	%al, %al
                                        # implicit-def: RDI
	je	.LBB306_5
# BB#15:
	movq	608(%rsi), %rdi
.LBB306_5:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	je	.LBB306_7
# BB#6:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB306_7:
	testb	%al, %al
                                        # implicit-def: RAX
	je	.LBB306_8
# BB#16:
	movq	384(%rsi), %rdx
	leaq	-48(%rbp), %rcx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
.LBB306_8:
	cmpl	$0, -28(%rbp)
	je	.LBB306_9
# BB#17:
	movq	%rax, 32(%rsp)
	movl	$1, 40(%rsp)
	leaq	-24(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_unsigned_bit_combine(%rip)
	jmp	.LBB306_12
.LBB306_9:
	cmpl	$0, -32(%rbp)
	je	.LBB306_10
# BB#18:
	leaq	-24(%rbp), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	jmp	.LBB306_11
.LBB306_10:
	leaq	-24(%rbp), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
.LBB306_11:
	callq	*__imp__iki_std_memcpy(%rip)
.LBB306_12:
	movl	-24(%rbp), %eax
	andl	$1, %eax
	movl	%eax, 2416(%rsi)
	movl	-20(%rbp), %eax
	andl	$1, %eax
	movl	%eax, 2420(%rsi)
	leaq	544(%rsi), %rcx
	addq	$2392, %rsi             # imm = 0x958
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257492;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257492
	.align	16, 0x90
_execute_257492:                        # @_execute_257492
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$96, %rsp
	movq	%rdx, %rsi
	movq	440(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rdi), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rdi), %ecx
	testb	$1, %cl
	je	.LBB307_1
# BB#13:
	movl	$1, -32(%rbp)
	jmp	.LBB307_2
.LBB307_1:
	testl	%eax, %eax
	je	.LBB307_2
# BB#14:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB307_2:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB307_4
# BB#3:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB307_4:
	testb	%al, %al
                                        # implicit-def: RDI
	je	.LBB307_5
# BB#15:
	movq	552(%rsi), %rdx
	leaq	-48(%rbp), %rcx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
.LBB307_5:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	je	.LBB307_7
# BB#6:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB307_7:
	testb	%al, %al
                                        # implicit-def: RAX
	je	.LBB307_8
# BB#16:
	movq	384(%rsi), %rdx
	leaq	-56(%rbp), %rcx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
.LBB307_8:
	cmpl	$0, -28(%rbp)
	je	.LBB307_9
# BB#17:
	movq	%rax, 32(%rsp)
	movl	$1, 40(%rsp)
	leaq	-24(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_unsigned_bit_combine(%rip)
	jmp	.LBB307_12
.LBB307_9:
	cmpl	$0, -32(%rbp)
	je	.LBB307_10
# BB#18:
	leaq	-24(%rbp), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	jmp	.LBB307_11
.LBB307_10:
	leaq	-24(%rbp), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
.LBB307_11:
	callq	*__imp__iki_std_memcpy(%rip)
.LBB307_12:
	movl	-24(%rbp), %eax
	andl	$1, %eax
	movl	%eax, 2584(%rsi)
	movl	-20(%rbp), %eax
	andl	$1, %eax
	movl	%eax, 2588(%rsi)
	leaq	544(%rsi), %rcx
	addq	$2560, %rsi             # imm = 0xA00
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$96, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257493;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257493
	.align	16, 0x90
_execute_257493:                        # @_execute_257493
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$96, %rsp
	movq	%rdx, %rsi
	movq	440(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	movl	$2, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rdi), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rdi), %ecx
	testb	$1, %cl
	je	.LBB308_1
# BB#13:
	movl	$1, -32(%rbp)
	jmp	.LBB308_2
.LBB308_1:
	testl	%eax, %eax
	je	.LBB308_2
# BB#14:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB308_2:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB308_4
# BB#3:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB308_4:
	testb	%al, %al
                                        # implicit-def: RDI
	je	.LBB308_5
# BB#15:
	movq	552(%rsi), %rdx
	leaq	-48(%rbp), %rcx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
.LBB308_5:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	je	.LBB308_7
# BB#6:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB308_7:
	testb	%al, %al
                                        # implicit-def: RAX
	je	.LBB308_8
# BB#16:
	movq	384(%rsi), %rdx
	leaq	-56(%rbp), %rcx
	movl	$2, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
.LBB308_8:
	cmpl	$0, -28(%rbp)
	je	.LBB308_9
# BB#17:
	movq	%rax, 32(%rsp)
	movl	$1, 40(%rsp)
	leaq	-24(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_unsigned_bit_combine(%rip)
	jmp	.LBB308_12
.LBB308_9:
	cmpl	$0, -32(%rbp)
	je	.LBB308_10
# BB#18:
	leaq	-24(%rbp), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	jmp	.LBB308_11
.LBB308_10:
	leaq	-24(%rbp), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
.LBB308_11:
	callq	*__imp__iki_std_memcpy(%rip)
.LBB308_12:
	movl	-24(%rbp), %eax
	andl	$1, %eax
	movl	%eax, 2752(%rsi)
	movl	-20(%rbp), %eax
	andl	$1, %eax
	movl	%eax, 2756(%rsi)
	leaq	544(%rsi), %rcx
	addq	$2728, %rsi             # imm = 0xAA8
	movl	$2, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$96, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257494;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257494
	.align	16, 0x90
_execute_257494:                        # @_execute_257494
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$96, %rsp
	movq	%rdx, %rsi
	movq	440(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	movl	$3, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rdi), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rdi), %ecx
	testb	$1, %cl
	je	.LBB309_1
# BB#13:
	movl	$1, -32(%rbp)
	jmp	.LBB309_2
.LBB309_1:
	testl	%eax, %eax
	je	.LBB309_2
# BB#14:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB309_2:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB309_4
# BB#3:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB309_4:
	testb	%al, %al
                                        # implicit-def: RDI
	je	.LBB309_5
# BB#15:
	movq	552(%rsi), %rdx
	leaq	-48(%rbp), %rcx
	movl	$2, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
.LBB309_5:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	je	.LBB309_7
# BB#6:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB309_7:
	testb	%al, %al
                                        # implicit-def: RAX
	je	.LBB309_8
# BB#16:
	movq	384(%rsi), %rdx
	leaq	-56(%rbp), %rcx
	movl	$3, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
.LBB309_8:
	cmpl	$0, -28(%rbp)
	je	.LBB309_9
# BB#17:
	movq	%rax, 32(%rsp)
	movl	$1, 40(%rsp)
	leaq	-24(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_unsigned_bit_combine(%rip)
	jmp	.LBB309_12
.LBB309_9:
	cmpl	$0, -32(%rbp)
	je	.LBB309_10
# BB#18:
	leaq	-24(%rbp), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	jmp	.LBB309_11
.LBB309_10:
	leaq	-24(%rbp), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
.LBB309_11:
	callq	*__imp__iki_std_memcpy(%rip)
.LBB309_12:
	movl	-24(%rbp), %eax
	andl	$1, %eax
	movl	%eax, 2920(%rsi)
	movl	-20(%rbp), %eax
	andl	$1, %eax
	movl	%eax, 2924(%rsi)
	leaq	544(%rsi), %rcx
	addq	$2896, %rsi             # imm = 0xB50
	movl	$3, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$96, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257495;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257495
	.align	16, 0x90
_execute_257495:                        # @_execute_257495
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movq	664(%rsi), %rcx
	movq	720(%rsi), %rax
	movl	(%rcx), %edx
	orl	(%rax), %edx
	movl	%edx, -16(%rbp)
	movl	4(%rcx), %edx
	orl	4(%rax), %edx
	movl	%edx, -12(%rbp)
	je	.LBB310_2
# BB#1:
	orl	%edx, -16(%rbp)
	movl	4(%rcx), %edx
	notl	%edx
	andl	(%rcx), %edx
	notl	%edx
	andl	-12(%rbp), %edx
	movl	%edx, -12(%rbp)
	movl	4(%rax), %ecx
	notl	%ecx
	andl	(%rax), %ecx
	notl	%ecx
	andl	%edx, %ecx
	movl	%ecx, -12(%rbp)
.LBB310_2:
	leaq	3088(%rsi), %rcx
	leaq	-16(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	600(%rsi), %rcx
	addq	$3064, %rsi             # imm = 0xBF8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257496;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257496
	.align	16, 0x90
_execute_257496:                        # @_execute_257496
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257497;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257497
	.align	16, 0x90
_execute_257497:                        # @_execute_257497
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257498;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257498
	.align	16, 0x90
_execute_257498:                        # @_execute_257498
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257499;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257499
	.align	16, 0x90
_execute_257499:                        # @_execute_257499
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257500;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257500
	.align	16, 0x90
_execute_257500:                        # @_execute_257500
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257501;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257501
	.align	16, 0x90
_execute_257501:                        # @_execute_257501
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257502;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257502
	.align	16, 0x90
_execute_257502:                        # @_execute_257502
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257503;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257503
	.align	16, 0x90
_execute_257503:                        # @_execute_257503
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_50;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_50
	.align	16, 0x90
_execute_50:                            # @_execute_50
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$9, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_51;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_51
	.align	16, 0x90
_execute_51:                            # @_execute_51
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB320_1:                              # =>This Inner Loop Header: Depth=1
	movl	$10, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB320_29
# BB#2:                                 #   in Loop: Header=BB320_1 Depth=1
	jmpq	*%rax
.Ltmp967:                               # Block address taken
.LBB320_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB320_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB320_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB320_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB320_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB320_32
.LBB320_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB320_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB320_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB320_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB320_9
# BB#34:
	movq	664(%rsi), %r8
.LBB320_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB320_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB320_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp967(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB320_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB320_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB320_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB320_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB320_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB320_13
.LBB320_12:
	testl	%eax, %eax
	je	.LBB320_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB320_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB320_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB320_15:
	testb	%al, %al
	je	.LBB320_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB320_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB320_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB320_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB320_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB320_42
.LBB320_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB320_17
.LBB320_41:
	testl	%eax, %eax
	je	.LBB320_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB320_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB320_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB320_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB320_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB320_28
.LBB320_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB320_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB320_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB320_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB320_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB320_22
.LBB320_21:
	testl	%eax, %eax
	je	.LBB320_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB320_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB320_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB320_24:
	testb	%al, %al
	je	.LBB320_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB320_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB320_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB320_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB320_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB320_55
.LBB320_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB320_26
.LBB320_54:
	testl	%eax, %eax
	je	.LBB320_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB320_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB320_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB320_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB320_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB320_28
.LBB320_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB320_28

	.def	 _execute_52;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_52
	.align	16, 0x90
_execute_52:                            # @_execute_52
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB321_1:                              # =>This Inner Loop Header: Depth=1
	movl	$11, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB321_17
# BB#2:                                 #   in Loop: Header=BB321_1 Depth=1
	jmpq	*%rax
.Ltmp971:                               # Block address taken
.LBB321_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB321_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB321_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB321_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB321_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB321_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB321_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB321_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB321_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB321_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB321_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB321_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB321_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB321_11
.LBB321_10:
	testl	%eax, %eax
	je	.LBB321_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB321_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB321_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB321_13:
	testb	%al, %al
	je	.LBB321_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB321_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB321_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB321_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB321_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB321_29
.LBB321_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB321_15
.LBB321_28:
	testl	%eax, %eax
	je	.LBB321_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB321_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB321_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB321_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB321_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB321_17
.LBB321_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167176632, %ecx        # imm = 0x9F6E9B8
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167178456, %ecx        # imm = 0x9F6F0D8
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_9e622bd0_4(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178456, %ecx        # imm = 0x9F6F0D8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_9e622bd0_4(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178456, %ecx        # imm = 0x9F6F0D8
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_9e622bd0_4(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178456, %ecx        # imm = 0x9F6F0D8
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_9e622bd0_4(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_9e622bd0_5(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167176632, %ecx        # imm = 0x9F6E9B8
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167178456, %ecx        # imm = 0x9F6F0D8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_9e622bd0_4(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178456, %ecx        # imm = 0x9F6F0D8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_9e622bd0_4(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167178456, %ecx        # imm = 0x9F6F0D8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167178456, %ecx        # imm = 0x9F6F0D8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_9e622bd0_4(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_9e622bd0_5(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB321_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp971(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_9e622bd0_4;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_9e622bd0_4
	.align	16, 0x90
_subprog_m_7ddf9423_9e622bd0_4:         # @_subprog_m_7ddf9423_9e622bd0_4
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB322_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB322_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB322_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB322_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB322_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB322_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB322_6
.LBB322_5:
	testl	%eax, %eax
	je	.LBB322_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB322_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB322_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB322_8:
	testb	%al, %al
	je	.LBB322_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB322_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB322_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB322_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB322_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB322_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB322_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB322_160
.LBB322_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB322_10
.LBB322_159:
	testl	%eax, %eax
	je	.LBB322_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB322_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB322_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB322_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB322_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB322_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB322_148
.LBB322_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB322_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB322_13
.LBB322_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB322_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB322_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB322_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB322_148
.LBB322_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB322_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB322_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB322_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB322_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB322_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB322_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB322_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB322_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB322_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB322_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB322_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB322_23
.LBB322_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB322_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB322_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB322_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB322_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB322_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB322_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB322_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB322_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB322_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB322_182
.LBB322_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB322_27
.LBB322_181:
	testl	%eax, %eax
	je	.LBB322_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB322_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB322_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB322_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB322_29
.LBB322_28:
	testl	%eax, %eax
	je	.LBB322_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB322_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB322_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB322_31:
	testb	%al, %al
	je	.LBB322_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB322_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB322_195
.LBB322_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB322_33
.LBB322_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB322_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB322_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB322_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB322_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB322_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB322_228
.LBB322_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB322_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB322_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB322_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB322_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB322_39
.LBB322_38:
	testl	%eax, %eax
	je	.LBB322_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB322_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB322_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB322_41:
	testb	%al, %al
	je	.LBB322_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB322_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB322_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB322_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB322_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB322_209
.LBB322_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB322_43
.LBB322_208:
	testl	%eax, %eax
	je	.LBB322_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB322_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB322_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB322_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB322_45
.LBB322_44:
	testl	%eax, %eax
	je	.LBB322_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB322_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB322_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB322_47:
	testb	%al, %al
	je	.LBB322_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB322_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB322_222
.LBB322_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB322_49
.LBB322_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB322_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB322_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB322_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB322_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB322_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB322_227
.LBB322_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB322_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB322_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB322_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB322_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB322_55
.LBB322_54:
	testl	%eax, %eax
	je	.LBB322_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB322_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB322_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB322_57:
	testb	%al, %al
	je	.LBB322_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB322_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB322_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB322_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB322_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB322_240
.LBB322_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB322_59
.LBB322_239:
	testl	%eax, %eax
	je	.LBB322_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB322_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB322_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB322_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB322_61
.LBB322_60:
	testl	%eax, %eax
	je	.LBB322_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB322_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB322_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB322_63:
	testb	%al, %al
	je	.LBB322_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB322_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB322_253
.LBB322_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB322_65
.LBB322_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB322_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB322_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB322_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB322_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB322_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB322_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB322_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB322_229
.LBB322_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB322_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB322_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB322_70
.LBB322_69:
	testl	%eax, %eax
	je	.LBB322_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB322_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB322_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB322_72:
	testb	%al, %al
	je	.LBB322_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB322_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB322_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB322_265
.LBB322_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB322_74
.LBB322_264:
	testl	%eax, %eax
	je	.LBB322_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB322_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB322_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB322_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB322_76
.LBB322_75:
	testl	%eax, %eax
	je	.LBB322_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB322_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB322_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB322_78:
	testb	%al, %al
	je	.LBB322_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB322_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB322_277
.LBB322_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB322_80
.LBB322_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB322_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB322_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB322_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB322_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB322_82
.LBB322_81:
	testl	%eax, %eax
	je	.LBB322_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB322_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB322_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB322_84:
	testb	%al, %al
	je	.LBB322_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB322_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB322_288
.LBB322_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB322_86
.LBB322_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB322_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB322_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB322_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB322_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB322_88
.LBB322_87:
	testl	%eax, %eax
	je	.LBB322_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB322_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB322_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB322_90:
	testb	%al, %al
	je	.LBB322_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB322_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB322_299
.LBB322_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB322_92
.LBB322_298:
	testl	%eax, %eax
	je	.LBB322_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB322_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB322_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB322_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB322_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB322_351
.LBB322_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB322_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB322_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB322_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB322_97
.LBB322_96:
	testl	%eax, %eax
	je	.LBB322_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB322_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB322_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB322_99:
	testb	%al, %al
	je	.LBB322_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB322_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB322_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB322_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB322_311
.LBB322_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB322_101
.LBB322_310:
	testl	%eax, %eax
	je	.LBB322_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB322_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB322_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB322_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB322_103
.LBB322_102:
	testl	%eax, %eax
	je	.LBB322_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB322_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB322_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB322_105:
	testb	%al, %al
	je	.LBB322_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB322_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB322_323
.LBB322_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB322_107
.LBB322_322:
	testl	%eax, %eax
	je	.LBB322_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB322_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB322_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB322_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB322_109
.LBB322_108:
	testl	%eax, %eax
	je	.LBB322_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB322_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB322_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB322_111:
	testb	%al, %al
	je	.LBB322_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB322_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB322_334
.LBB322_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB322_113
.LBB322_333:
	testl	%eax, %eax
	je	.LBB322_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB322_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB322_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB322_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB322_115
.LBB322_114:
	testl	%eax, %eax
	je	.LBB322_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB322_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB322_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB322_117:
	testb	%al, %al
	je	.LBB322_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB322_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB322_345
.LBB322_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB322_119
.LBB322_344:
	testl	%eax, %eax
	je	.LBB322_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB322_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB322_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB322_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB322_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB322_350
.LBB322_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB322_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB322_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB322_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB322_124
.LBB322_123:
	testl	%eax, %eax
	je	.LBB322_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB322_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB322_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB322_126:
	testb	%al, %al
	je	.LBB322_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB322_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB322_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB322_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB322_359
.LBB322_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB322_128
.LBB322_358:
	testl	%eax, %eax
	je	.LBB322_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB322_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB322_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB322_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB322_130
.LBB322_129:
	testl	%eax, %eax
	je	.LBB322_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB322_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB322_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB322_132:
	testb	%al, %al
	je	.LBB322_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB322_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB322_371
.LBB322_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB322_134
.LBB322_370:
	testl	%eax, %eax
	je	.LBB322_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB322_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB322_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB322_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB322_136
.LBB322_135:
	testl	%eax, %eax
	je	.LBB322_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB322_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB322_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB322_138:
	testb	%al, %al
	je	.LBB322_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB322_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB322_382
.LBB322_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB322_140
.LBB322_381:
	testl	%eax, %eax
	je	.LBB322_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB322_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB322_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB322_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB322_142
.LBB322_141:
	testl	%eax, %eax
	je	.LBB322_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB322_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB322_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB322_144:
	testb	%al, %al
	je	.LBB322_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB322_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB322_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB322_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB322_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB322_393
.LBB322_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB322_146
.LBB322_392:
	testl	%eax, %eax
	je	.LBB322_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB322_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB322_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB322_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB322_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB322_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB322_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB322_148
.LBB322_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB322_148

	.def	 _subprog_m_7ddf9423_9e622bd0_5;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_9e622bd0_5
	.align	16, 0x90
_subprog_m_7ddf9423_9e622bd0_5:         # @_subprog_m_7ddf9423_9e622bd0_5
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB323_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB323_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB323_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB323_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB323_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB323_5
.LBB323_4:
	testl	%eax, %eax
	je	.LBB323_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB323_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB323_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB323_7:
	testb	%al, %al
	je	.LBB323_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB323_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB323_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB323_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB323_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB323_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB323_73
.LBB323_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB323_9
.LBB323_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB323_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB323_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB323_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB323_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB323_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB323_63
.LBB323_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB323_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB323_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB323_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB323_15
.LBB323_14:
	testl	%eax, %eax
	je	.LBB323_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB323_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB323_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB323_17:
	testb	%al, %al
	je	.LBB323_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB323_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB323_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB323_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB323_87
.LBB323_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB323_19
.LBB323_86:
	testl	%eax, %eax
	je	.LBB323_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB323_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB323_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB323_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB323_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB323_21
.LBB323_20:
	testl	%eax, %eax
	je	.LBB323_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB323_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB323_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB323_23:
	testb	%al, %al
	je	.LBB323_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB323_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB323_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB323_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB323_98
.LBB323_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB323_25
.LBB323_97:
	testl	%eax, %eax
	je	.LBB323_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB323_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB323_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB323_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB323_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB323_103
.LBB323_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB323_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB323_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB323_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB323_30
.LBB323_29:
	testl	%eax, %eax
	je	.LBB323_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB323_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB323_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB323_32:
	testb	%al, %al
	je	.LBB323_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB323_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB323_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB323_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB323_114
.LBB323_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB323_34
.LBB323_113:
	testl	%eax, %eax
	je	.LBB323_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB323_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB323_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB323_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB323_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB323_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB323_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB323_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB323_39
.LBB323_38:
	testl	%eax, %eax
	je	.LBB323_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB323_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB323_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB323_41:
	testb	%al, %al
	je	.LBB323_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB323_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB323_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB323_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB323_126
.LBB323_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB323_43
.LBB323_125:
	testl	%eax, %eax
	je	.LBB323_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB323_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB323_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB323_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB323_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB323_104
.LBB323_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB323_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB323_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB323_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB323_48
.LBB323_47:
	testl	%eax, %eax
	je	.LBB323_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB323_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB323_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB323_50:
	testb	%al, %al
	je	.LBB323_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB323_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB323_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB323_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB323_139
.LBB323_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB323_52
.LBB323_138:
	testl	%eax, %eax
	je	.LBB323_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB323_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB323_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB323_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB323_53
.LBB323_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB323_103:
	xorl	%r8d, %r8d
.LBB323_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB323_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB323_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB323_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB323_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB323_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB323_57
.LBB323_56:
	testl	%eax, %eax
	je	.LBB323_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB323_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB323_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB323_59:
	testb	%al, %al
	je	.LBB323_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB323_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB323_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB323_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB323_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB323_152
.LBB323_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB323_61
.LBB323_151:
	testl	%eax, %eax
	je	.LBB323_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB323_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB323_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB323_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB323_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB323_104
.LBB323_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB323_63

	.def	 _execute_55;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_55
	.align	16, 0x90
_execute_55:                            # @_execute_55
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$12, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng48(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257996;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257996
	.align	16, 0x90
_execute_257996:                        # @_execute_257996
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257997;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257997
	.align	16, 0x90
_execute_257997:                        # @_execute_257997
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257998;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257998
	.align	16, 0x90
_execute_257998:                        # @_execute_257998
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_257999;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_257999
	.align	16, 0x90
_execute_257999:                        # @_execute_257999
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258000;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258000
	.align	16, 0x90
_execute_258000:                        # @_execute_258000
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258001;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258001
	.align	16, 0x90
_execute_258001:                        # @_execute_258001
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258002;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258002
	.align	16, 0x90
_execute_258002:                        # @_execute_258002
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258003;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258003
	.align	16, 0x90
_execute_258003:                        # @_execute_258003
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_247;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_247
	.align	16, 0x90
_execute_247:                           # @_execute_247
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$13, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_248;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_248
	.align	16, 0x90
_execute_248:                           # @_execute_248
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB334_1:                              # =>This Inner Loop Header: Depth=1
	movl	$14, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB334_29
# BB#2:                                 #   in Loop: Header=BB334_1 Depth=1
	jmpq	*%rax
.Ltmp1011:                              # Block address taken
.LBB334_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB334_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB334_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB334_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB334_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB334_32
.LBB334_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB334_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB334_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB334_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB334_9
# BB#34:
	movq	664(%rsi), %r8
.LBB334_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB334_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB334_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1011(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB334_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB334_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB334_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB334_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB334_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB334_13
.LBB334_12:
	testl	%eax, %eax
	je	.LBB334_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB334_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB334_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB334_15:
	testb	%al, %al
	je	.LBB334_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB334_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB334_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB334_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB334_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB334_42
.LBB334_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB334_17
.LBB334_41:
	testl	%eax, %eax
	je	.LBB334_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB334_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB334_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB334_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB334_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB334_28
.LBB334_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB334_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB334_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB334_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB334_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB334_22
.LBB334_21:
	testl	%eax, %eax
	je	.LBB334_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB334_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB334_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB334_24:
	testb	%al, %al
	je	.LBB334_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB334_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB334_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB334_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB334_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB334_55
.LBB334_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB334_26
.LBB334_54:
	testl	%eax, %eax
	je	.LBB334_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB334_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB334_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB334_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB334_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB334_28
.LBB334_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB334_28

	.def	 _execute_249;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_249
	.align	16, 0x90
_execute_249:                           # @_execute_249
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB335_1:                              # =>This Inner Loop Header: Depth=1
	movl	$15, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB335_17
# BB#2:                                 #   in Loop: Header=BB335_1 Depth=1
	jmpq	*%rax
.Ltmp1015:                              # Block address taken
.LBB335_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB335_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB335_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB335_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB335_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB335_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB335_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB335_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB335_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB335_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB335_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB335_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB335_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB335_11
.LBB335_10:
	testl	%eax, %eax
	je	.LBB335_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB335_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB335_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB335_13:
	testb	%al, %al
	je	.LBB335_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB335_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB335_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB335_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB335_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB335_29
.LBB335_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB335_15
.LBB335_28:
	testl	%eax, %eax
	je	.LBB335_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB335_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB335_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB335_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB335_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB335_17
.LBB335_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167178912, %ecx        # imm = 0x9F6F2A0
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167178760, %ecx        # imm = 0x9F6F208
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_218531fb_27(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178760, %ecx        # imm = 0x9F6F208
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_218531fb_27(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178760, %ecx        # imm = 0x9F6F208
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_218531fb_27(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178760, %ecx        # imm = 0x9F6F208
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_218531fb_27(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_218531fb_28(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167178912, %ecx        # imm = 0x9F6F2A0
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167178760, %ecx        # imm = 0x9F6F208
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_218531fb_27(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178760, %ecx        # imm = 0x9F6F208
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_218531fb_27(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167178760, %ecx        # imm = 0x9F6F208
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167178760, %ecx        # imm = 0x9F6F208
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_218531fb_27(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_218531fb_28(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB335_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1015(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_218531fb_27;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_218531fb_27
	.align	16, 0x90
_subprog_m_7ddf9423_218531fb_27:        # @_subprog_m_7ddf9423_218531fb_27
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB336_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB336_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB336_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB336_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB336_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB336_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB336_6
.LBB336_5:
	testl	%eax, %eax
	je	.LBB336_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB336_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB336_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB336_8:
	testb	%al, %al
	je	.LBB336_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB336_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB336_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB336_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB336_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB336_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB336_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB336_160
.LBB336_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB336_10
.LBB336_159:
	testl	%eax, %eax
	je	.LBB336_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB336_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB336_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB336_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB336_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB336_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB336_148
.LBB336_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB336_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB336_13
.LBB336_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB336_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB336_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB336_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB336_148
.LBB336_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB336_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB336_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB336_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB336_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB336_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB336_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB336_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB336_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB336_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB336_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB336_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB336_23
.LBB336_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB336_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB336_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB336_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB336_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB336_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB336_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB336_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB336_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB336_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB336_182
.LBB336_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB336_27
.LBB336_181:
	testl	%eax, %eax
	je	.LBB336_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB336_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB336_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB336_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB336_29
.LBB336_28:
	testl	%eax, %eax
	je	.LBB336_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB336_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB336_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB336_31:
	testb	%al, %al
	je	.LBB336_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB336_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB336_195
.LBB336_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB336_33
.LBB336_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB336_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB336_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB336_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB336_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB336_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB336_228
.LBB336_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB336_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB336_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB336_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB336_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB336_39
.LBB336_38:
	testl	%eax, %eax
	je	.LBB336_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB336_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB336_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB336_41:
	testb	%al, %al
	je	.LBB336_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB336_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB336_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB336_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB336_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB336_209
.LBB336_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB336_43
.LBB336_208:
	testl	%eax, %eax
	je	.LBB336_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB336_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB336_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB336_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB336_45
.LBB336_44:
	testl	%eax, %eax
	je	.LBB336_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB336_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB336_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB336_47:
	testb	%al, %al
	je	.LBB336_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB336_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB336_222
.LBB336_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB336_49
.LBB336_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB336_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB336_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB336_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB336_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB336_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB336_227
.LBB336_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB336_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB336_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB336_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB336_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB336_55
.LBB336_54:
	testl	%eax, %eax
	je	.LBB336_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB336_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB336_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB336_57:
	testb	%al, %al
	je	.LBB336_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB336_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB336_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB336_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB336_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB336_240
.LBB336_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB336_59
.LBB336_239:
	testl	%eax, %eax
	je	.LBB336_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB336_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB336_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB336_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB336_61
.LBB336_60:
	testl	%eax, %eax
	je	.LBB336_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB336_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB336_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB336_63:
	testb	%al, %al
	je	.LBB336_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB336_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB336_253
.LBB336_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB336_65
.LBB336_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB336_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB336_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB336_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB336_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB336_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB336_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB336_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB336_229
.LBB336_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB336_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB336_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB336_70
.LBB336_69:
	testl	%eax, %eax
	je	.LBB336_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB336_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB336_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB336_72:
	testb	%al, %al
	je	.LBB336_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB336_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB336_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB336_265
.LBB336_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB336_74
.LBB336_264:
	testl	%eax, %eax
	je	.LBB336_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB336_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB336_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB336_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB336_76
.LBB336_75:
	testl	%eax, %eax
	je	.LBB336_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB336_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB336_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB336_78:
	testb	%al, %al
	je	.LBB336_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB336_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB336_277
.LBB336_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB336_80
.LBB336_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB336_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB336_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB336_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB336_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB336_82
.LBB336_81:
	testl	%eax, %eax
	je	.LBB336_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB336_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB336_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB336_84:
	testb	%al, %al
	je	.LBB336_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB336_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB336_288
.LBB336_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB336_86
.LBB336_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB336_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB336_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB336_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB336_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB336_88
.LBB336_87:
	testl	%eax, %eax
	je	.LBB336_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB336_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB336_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB336_90:
	testb	%al, %al
	je	.LBB336_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB336_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB336_299
.LBB336_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB336_92
.LBB336_298:
	testl	%eax, %eax
	je	.LBB336_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB336_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB336_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB336_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB336_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB336_351
.LBB336_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB336_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB336_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB336_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB336_97
.LBB336_96:
	testl	%eax, %eax
	je	.LBB336_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB336_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB336_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB336_99:
	testb	%al, %al
	je	.LBB336_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB336_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB336_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB336_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB336_311
.LBB336_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB336_101
.LBB336_310:
	testl	%eax, %eax
	je	.LBB336_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB336_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB336_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB336_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB336_103
.LBB336_102:
	testl	%eax, %eax
	je	.LBB336_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB336_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB336_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB336_105:
	testb	%al, %al
	je	.LBB336_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB336_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB336_323
.LBB336_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB336_107
.LBB336_322:
	testl	%eax, %eax
	je	.LBB336_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB336_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB336_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB336_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB336_109
.LBB336_108:
	testl	%eax, %eax
	je	.LBB336_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB336_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB336_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB336_111:
	testb	%al, %al
	je	.LBB336_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB336_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB336_334
.LBB336_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB336_113
.LBB336_333:
	testl	%eax, %eax
	je	.LBB336_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB336_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB336_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB336_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB336_115
.LBB336_114:
	testl	%eax, %eax
	je	.LBB336_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB336_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB336_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB336_117:
	testb	%al, %al
	je	.LBB336_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB336_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB336_345
.LBB336_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB336_119
.LBB336_344:
	testl	%eax, %eax
	je	.LBB336_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB336_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB336_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB336_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB336_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB336_350
.LBB336_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB336_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB336_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB336_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB336_124
.LBB336_123:
	testl	%eax, %eax
	je	.LBB336_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB336_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB336_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB336_126:
	testb	%al, %al
	je	.LBB336_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB336_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB336_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB336_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB336_359
.LBB336_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB336_128
.LBB336_358:
	testl	%eax, %eax
	je	.LBB336_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB336_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB336_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB336_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB336_130
.LBB336_129:
	testl	%eax, %eax
	je	.LBB336_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB336_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB336_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB336_132:
	testb	%al, %al
	je	.LBB336_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB336_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB336_371
.LBB336_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB336_134
.LBB336_370:
	testl	%eax, %eax
	je	.LBB336_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB336_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB336_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB336_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB336_136
.LBB336_135:
	testl	%eax, %eax
	je	.LBB336_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB336_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB336_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB336_138:
	testb	%al, %al
	je	.LBB336_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB336_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB336_382
.LBB336_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB336_140
.LBB336_381:
	testl	%eax, %eax
	je	.LBB336_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB336_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB336_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB336_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB336_142
.LBB336_141:
	testl	%eax, %eax
	je	.LBB336_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB336_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB336_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB336_144:
	testb	%al, %al
	je	.LBB336_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB336_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB336_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB336_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB336_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB336_393
.LBB336_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB336_146
.LBB336_392:
	testl	%eax, %eax
	je	.LBB336_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB336_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB336_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB336_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB336_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB336_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB336_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB336_148
.LBB336_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB336_148

	.def	 _subprog_m_7ddf9423_218531fb_28;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_218531fb_28
	.align	16, 0x90
_subprog_m_7ddf9423_218531fb_28:        # @_subprog_m_7ddf9423_218531fb_28
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB337_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB337_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB337_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB337_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB337_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB337_5
.LBB337_4:
	testl	%eax, %eax
	je	.LBB337_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB337_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB337_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB337_7:
	testb	%al, %al
	je	.LBB337_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB337_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB337_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB337_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB337_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB337_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB337_73
.LBB337_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB337_9
.LBB337_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB337_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB337_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB337_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB337_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB337_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB337_63
.LBB337_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB337_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB337_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB337_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB337_15
.LBB337_14:
	testl	%eax, %eax
	je	.LBB337_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB337_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB337_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB337_17:
	testb	%al, %al
	je	.LBB337_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB337_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB337_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB337_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB337_87
.LBB337_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB337_19
.LBB337_86:
	testl	%eax, %eax
	je	.LBB337_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB337_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB337_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB337_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB337_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB337_21
.LBB337_20:
	testl	%eax, %eax
	je	.LBB337_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB337_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB337_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB337_23:
	testb	%al, %al
	je	.LBB337_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB337_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB337_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB337_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB337_98
.LBB337_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB337_25
.LBB337_97:
	testl	%eax, %eax
	je	.LBB337_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB337_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB337_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB337_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB337_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB337_103
.LBB337_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB337_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB337_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB337_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB337_30
.LBB337_29:
	testl	%eax, %eax
	je	.LBB337_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB337_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB337_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB337_32:
	testb	%al, %al
	je	.LBB337_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB337_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB337_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB337_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB337_114
.LBB337_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB337_34
.LBB337_113:
	testl	%eax, %eax
	je	.LBB337_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB337_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB337_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB337_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB337_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB337_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB337_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB337_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB337_39
.LBB337_38:
	testl	%eax, %eax
	je	.LBB337_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB337_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB337_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB337_41:
	testb	%al, %al
	je	.LBB337_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB337_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB337_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB337_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB337_126
.LBB337_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB337_43
.LBB337_125:
	testl	%eax, %eax
	je	.LBB337_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB337_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB337_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB337_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB337_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB337_104
.LBB337_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB337_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB337_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB337_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB337_48
.LBB337_47:
	testl	%eax, %eax
	je	.LBB337_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB337_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB337_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB337_50:
	testb	%al, %al
	je	.LBB337_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB337_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB337_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB337_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB337_139
.LBB337_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB337_52
.LBB337_138:
	testl	%eax, %eax
	je	.LBB337_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB337_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB337_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB337_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB337_53
.LBB337_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB337_103:
	xorl	%r8d, %r8d
.LBB337_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB337_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB337_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB337_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB337_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB337_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB337_57
.LBB337_56:
	testl	%eax, %eax
	je	.LBB337_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB337_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB337_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB337_59:
	testb	%al, %al
	je	.LBB337_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB337_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB337_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB337_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB337_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB337_152
.LBB337_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB337_61
.LBB337_151:
	testl	%eax, %eax
	je	.LBB337_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB337_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB337_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB337_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB337_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB337_104
.LBB337_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB337_63

	.def	 _execute_252;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_252
	.align	16, 0x90
_execute_252:                           # @_execute_252
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$16, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng51(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258004;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258004
	.align	16, 0x90
_execute_258004:                        # @_execute_258004
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258005;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258005
	.align	16, 0x90
_execute_258005:                        # @_execute_258005
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258006;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258006
	.align	16, 0x90
_execute_258006:                        # @_execute_258006
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258007;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258007
	.align	16, 0x90
_execute_258007:                        # @_execute_258007
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258008;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258008
	.align	16, 0x90
_execute_258008:                        # @_execute_258008
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258009;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258009
	.align	16, 0x90
_execute_258009:                        # @_execute_258009
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258010;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258010
	.align	16, 0x90
_execute_258010:                        # @_execute_258010
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258011;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258011
	.align	16, 0x90
_execute_258011:                        # @_execute_258011
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_254;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_254
	.align	16, 0x90
_execute_254:                           # @_execute_254
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$17, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_255;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_255
	.align	16, 0x90
_execute_255:                           # @_execute_255
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB348_1:                              # =>This Inner Loop Header: Depth=1
	movl	$18, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB348_29
# BB#2:                                 #   in Loop: Header=BB348_1 Depth=1
	jmpq	*%rax
.Ltmp1055:                              # Block address taken
.LBB348_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB348_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB348_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB348_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB348_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB348_32
.LBB348_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB348_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB348_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB348_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB348_9
# BB#34:
	movq	664(%rsi), %r8
.LBB348_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB348_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB348_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1055(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB348_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB348_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB348_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB348_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB348_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB348_13
.LBB348_12:
	testl	%eax, %eax
	je	.LBB348_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB348_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB348_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB348_15:
	testb	%al, %al
	je	.LBB348_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB348_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB348_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB348_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB348_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB348_42
.LBB348_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB348_17
.LBB348_41:
	testl	%eax, %eax
	je	.LBB348_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB348_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB348_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB348_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB348_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB348_28
.LBB348_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB348_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB348_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB348_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB348_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB348_22
.LBB348_21:
	testl	%eax, %eax
	je	.LBB348_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB348_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB348_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB348_24:
	testb	%al, %al
	je	.LBB348_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB348_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB348_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB348_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB348_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB348_55
.LBB348_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB348_26
.LBB348_54:
	testl	%eax, %eax
	je	.LBB348_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB348_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB348_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB348_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB348_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB348_28
.LBB348_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB348_28

	.def	 _execute_256;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_256
	.align	16, 0x90
_execute_256:                           # @_execute_256
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB349_1:                              # =>This Inner Loop Header: Depth=1
	movl	$19, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB349_17
# BB#2:                                 #   in Loop: Header=BB349_1 Depth=1
	jmpq	*%rax
.Ltmp1059:                              # Block address taken
.LBB349_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB349_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB349_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB349_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB349_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB349_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB349_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB349_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB349_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB349_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB349_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB349_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB349_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB349_11
.LBB349_10:
	testl	%eax, %eax
	je	.LBB349_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB349_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB349_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB349_13:
	testb	%al, %al
	je	.LBB349_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB349_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB349_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB349_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB349_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB349_29
.LBB349_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB349_15
.LBB349_28:
	testl	%eax, %eax
	je	.LBB349_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB349_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB349_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB349_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB349_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB349_17
.LBB349_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167176784, %ecx        # imm = 0x9F6EA50
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167179824, %ecx        # imm = 0x9F6F630
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_818bb4c7_29(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167179824, %ecx        # imm = 0x9F6F630
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_818bb4c7_29(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167179824, %ecx        # imm = 0x9F6F630
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_818bb4c7_29(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167179824, %ecx        # imm = 0x9F6F630
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_818bb4c7_29(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_818bb4c7_30(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167176784, %ecx        # imm = 0x9F6EA50
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167179824, %ecx        # imm = 0x9F6F630
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_818bb4c7_29(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167179824, %ecx        # imm = 0x9F6F630
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_818bb4c7_29(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167179824, %ecx        # imm = 0x9F6F630
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167179824, %ecx        # imm = 0x9F6F630
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_818bb4c7_29(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_818bb4c7_30(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB349_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1059(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_818bb4c7_29;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_818bb4c7_29
	.align	16, 0x90
_subprog_m_7ddf9423_818bb4c7_29:        # @_subprog_m_7ddf9423_818bb4c7_29
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB350_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB350_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB350_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB350_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB350_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB350_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB350_6
.LBB350_5:
	testl	%eax, %eax
	je	.LBB350_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB350_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB350_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB350_8:
	testb	%al, %al
	je	.LBB350_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB350_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB350_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB350_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB350_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB350_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB350_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB350_160
.LBB350_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB350_10
.LBB350_159:
	testl	%eax, %eax
	je	.LBB350_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB350_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB350_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB350_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB350_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB350_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB350_148
.LBB350_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB350_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB350_13
.LBB350_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB350_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB350_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB350_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB350_148
.LBB350_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB350_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB350_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB350_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB350_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB350_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB350_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB350_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB350_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB350_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB350_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB350_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB350_23
.LBB350_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB350_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB350_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB350_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB350_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB350_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB350_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB350_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB350_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB350_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB350_182
.LBB350_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB350_27
.LBB350_181:
	testl	%eax, %eax
	je	.LBB350_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB350_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB350_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB350_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB350_29
.LBB350_28:
	testl	%eax, %eax
	je	.LBB350_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB350_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB350_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB350_31:
	testb	%al, %al
	je	.LBB350_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB350_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB350_195
.LBB350_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB350_33
.LBB350_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB350_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB350_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB350_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB350_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB350_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB350_228
.LBB350_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB350_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB350_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB350_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB350_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB350_39
.LBB350_38:
	testl	%eax, %eax
	je	.LBB350_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB350_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB350_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB350_41:
	testb	%al, %al
	je	.LBB350_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB350_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB350_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB350_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB350_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB350_209
.LBB350_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB350_43
.LBB350_208:
	testl	%eax, %eax
	je	.LBB350_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB350_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB350_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB350_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB350_45
.LBB350_44:
	testl	%eax, %eax
	je	.LBB350_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB350_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB350_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB350_47:
	testb	%al, %al
	je	.LBB350_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB350_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB350_222
.LBB350_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB350_49
.LBB350_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB350_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB350_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB350_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB350_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB350_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB350_227
.LBB350_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB350_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB350_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB350_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB350_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB350_55
.LBB350_54:
	testl	%eax, %eax
	je	.LBB350_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB350_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB350_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB350_57:
	testb	%al, %al
	je	.LBB350_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB350_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB350_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB350_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB350_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB350_240
.LBB350_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB350_59
.LBB350_239:
	testl	%eax, %eax
	je	.LBB350_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB350_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB350_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB350_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB350_61
.LBB350_60:
	testl	%eax, %eax
	je	.LBB350_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB350_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB350_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB350_63:
	testb	%al, %al
	je	.LBB350_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB350_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB350_253
.LBB350_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB350_65
.LBB350_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB350_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB350_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB350_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB350_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB350_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB350_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB350_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB350_229
.LBB350_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB350_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB350_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB350_70
.LBB350_69:
	testl	%eax, %eax
	je	.LBB350_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB350_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB350_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB350_72:
	testb	%al, %al
	je	.LBB350_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB350_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB350_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB350_265
.LBB350_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB350_74
.LBB350_264:
	testl	%eax, %eax
	je	.LBB350_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB350_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB350_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB350_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB350_76
.LBB350_75:
	testl	%eax, %eax
	je	.LBB350_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB350_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB350_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB350_78:
	testb	%al, %al
	je	.LBB350_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB350_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB350_277
.LBB350_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB350_80
.LBB350_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB350_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB350_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB350_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB350_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB350_82
.LBB350_81:
	testl	%eax, %eax
	je	.LBB350_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB350_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB350_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB350_84:
	testb	%al, %al
	je	.LBB350_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB350_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB350_288
.LBB350_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB350_86
.LBB350_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB350_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB350_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB350_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB350_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB350_88
.LBB350_87:
	testl	%eax, %eax
	je	.LBB350_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB350_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB350_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB350_90:
	testb	%al, %al
	je	.LBB350_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB350_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB350_299
.LBB350_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB350_92
.LBB350_298:
	testl	%eax, %eax
	je	.LBB350_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB350_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB350_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB350_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB350_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB350_351
.LBB350_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB350_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB350_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB350_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB350_97
.LBB350_96:
	testl	%eax, %eax
	je	.LBB350_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB350_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB350_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB350_99:
	testb	%al, %al
	je	.LBB350_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB350_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB350_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB350_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB350_311
.LBB350_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB350_101
.LBB350_310:
	testl	%eax, %eax
	je	.LBB350_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB350_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB350_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB350_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB350_103
.LBB350_102:
	testl	%eax, %eax
	je	.LBB350_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB350_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB350_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB350_105:
	testb	%al, %al
	je	.LBB350_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB350_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB350_323
.LBB350_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB350_107
.LBB350_322:
	testl	%eax, %eax
	je	.LBB350_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB350_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB350_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB350_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB350_109
.LBB350_108:
	testl	%eax, %eax
	je	.LBB350_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB350_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB350_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB350_111:
	testb	%al, %al
	je	.LBB350_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB350_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB350_334
.LBB350_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB350_113
.LBB350_333:
	testl	%eax, %eax
	je	.LBB350_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB350_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB350_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB350_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB350_115
.LBB350_114:
	testl	%eax, %eax
	je	.LBB350_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB350_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB350_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB350_117:
	testb	%al, %al
	je	.LBB350_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB350_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB350_345
.LBB350_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB350_119
.LBB350_344:
	testl	%eax, %eax
	je	.LBB350_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB350_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB350_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB350_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB350_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB350_350
.LBB350_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB350_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB350_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB350_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB350_124
.LBB350_123:
	testl	%eax, %eax
	je	.LBB350_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB350_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB350_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB350_126:
	testb	%al, %al
	je	.LBB350_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB350_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB350_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB350_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB350_359
.LBB350_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB350_128
.LBB350_358:
	testl	%eax, %eax
	je	.LBB350_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB350_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB350_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB350_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB350_130
.LBB350_129:
	testl	%eax, %eax
	je	.LBB350_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB350_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB350_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB350_132:
	testb	%al, %al
	je	.LBB350_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB350_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB350_371
.LBB350_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB350_134
.LBB350_370:
	testl	%eax, %eax
	je	.LBB350_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB350_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB350_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB350_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB350_136
.LBB350_135:
	testl	%eax, %eax
	je	.LBB350_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB350_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB350_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB350_138:
	testb	%al, %al
	je	.LBB350_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB350_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB350_382
.LBB350_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB350_140
.LBB350_381:
	testl	%eax, %eax
	je	.LBB350_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB350_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB350_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB350_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB350_142
.LBB350_141:
	testl	%eax, %eax
	je	.LBB350_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB350_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB350_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB350_144:
	testb	%al, %al
	je	.LBB350_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB350_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB350_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB350_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB350_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB350_393
.LBB350_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB350_146
.LBB350_392:
	testl	%eax, %eax
	je	.LBB350_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB350_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB350_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB350_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB350_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB350_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB350_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB350_148
.LBB350_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB350_148

	.def	 _subprog_m_7ddf9423_818bb4c7_30;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_818bb4c7_30
	.align	16, 0x90
_subprog_m_7ddf9423_818bb4c7_30:        # @_subprog_m_7ddf9423_818bb4c7_30
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB351_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB351_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB351_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB351_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB351_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB351_5
.LBB351_4:
	testl	%eax, %eax
	je	.LBB351_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB351_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB351_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB351_7:
	testb	%al, %al
	je	.LBB351_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB351_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB351_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB351_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB351_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB351_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB351_73
.LBB351_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB351_9
.LBB351_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB351_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB351_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB351_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB351_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB351_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB351_63
.LBB351_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB351_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB351_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB351_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB351_15
.LBB351_14:
	testl	%eax, %eax
	je	.LBB351_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB351_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB351_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB351_17:
	testb	%al, %al
	je	.LBB351_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB351_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB351_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB351_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB351_87
.LBB351_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB351_19
.LBB351_86:
	testl	%eax, %eax
	je	.LBB351_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB351_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB351_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB351_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB351_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB351_21
.LBB351_20:
	testl	%eax, %eax
	je	.LBB351_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB351_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB351_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB351_23:
	testb	%al, %al
	je	.LBB351_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB351_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB351_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB351_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB351_98
.LBB351_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB351_25
.LBB351_97:
	testl	%eax, %eax
	je	.LBB351_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB351_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB351_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB351_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB351_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB351_103
.LBB351_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB351_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB351_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB351_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB351_30
.LBB351_29:
	testl	%eax, %eax
	je	.LBB351_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB351_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB351_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB351_32:
	testb	%al, %al
	je	.LBB351_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB351_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB351_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB351_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB351_114
.LBB351_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB351_34
.LBB351_113:
	testl	%eax, %eax
	je	.LBB351_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB351_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB351_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB351_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB351_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB351_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB351_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB351_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB351_39
.LBB351_38:
	testl	%eax, %eax
	je	.LBB351_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB351_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB351_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB351_41:
	testb	%al, %al
	je	.LBB351_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB351_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB351_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB351_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB351_126
.LBB351_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB351_43
.LBB351_125:
	testl	%eax, %eax
	je	.LBB351_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB351_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB351_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB351_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB351_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB351_104
.LBB351_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB351_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB351_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB351_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB351_48
.LBB351_47:
	testl	%eax, %eax
	je	.LBB351_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB351_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB351_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB351_50:
	testb	%al, %al
	je	.LBB351_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB351_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB351_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB351_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB351_139
.LBB351_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB351_52
.LBB351_138:
	testl	%eax, %eax
	je	.LBB351_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB351_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB351_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB351_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB351_53
.LBB351_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB351_103:
	xorl	%r8d, %r8d
.LBB351_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB351_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB351_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB351_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB351_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB351_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB351_57
.LBB351_56:
	testl	%eax, %eax
	je	.LBB351_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB351_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB351_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB351_59:
	testb	%al, %al
	je	.LBB351_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB351_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB351_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB351_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB351_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB351_152
.LBB351_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB351_61
.LBB351_151:
	testl	%eax, %eax
	je	.LBB351_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB351_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB351_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB351_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB351_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB351_104
.LBB351_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB351_63

	.def	 _execute_259;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259
	.align	16, 0x90
_execute_259:                           # @_execute_259
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$20, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng54(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258012;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258012
	.align	16, 0x90
_execute_258012:                        # @_execute_258012
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258013;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258013
	.align	16, 0x90
_execute_258013:                        # @_execute_258013
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258014;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258014
	.align	16, 0x90
_execute_258014:                        # @_execute_258014
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258015;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258015
	.align	16, 0x90
_execute_258015:                        # @_execute_258015
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258016;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258016
	.align	16, 0x90
_execute_258016:                        # @_execute_258016
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258017;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258017
	.align	16, 0x90
_execute_258017:                        # @_execute_258017
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258018;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258018
	.align	16, 0x90
_execute_258018:                        # @_execute_258018
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258019;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258019
	.align	16, 0x90
_execute_258019:                        # @_execute_258019
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_261;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_261
	.align	16, 0x90
_execute_261:                           # @_execute_261
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$21, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_262;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_262
	.align	16, 0x90
_execute_262:                           # @_execute_262
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB362_1:                              # =>This Inner Loop Header: Depth=1
	movl	$22, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB362_29
# BB#2:                                 #   in Loop: Header=BB362_1 Depth=1
	jmpq	*%rax
.Ltmp1099:                              # Block address taken
.LBB362_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB362_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB362_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB362_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB362_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB362_32
.LBB362_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB362_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB362_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB362_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB362_9
# BB#34:
	movq	664(%rsi), %r8
.LBB362_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB362_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB362_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1099(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB362_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB362_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB362_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB362_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB362_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB362_13
.LBB362_12:
	testl	%eax, %eax
	je	.LBB362_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB362_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB362_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB362_15:
	testb	%al, %al
	je	.LBB362_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB362_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB362_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB362_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB362_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB362_42
.LBB362_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB362_17
.LBB362_41:
	testl	%eax, %eax
	je	.LBB362_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB362_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB362_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB362_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB362_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB362_28
.LBB362_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB362_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB362_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB362_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB362_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB362_22
.LBB362_21:
	testl	%eax, %eax
	je	.LBB362_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB362_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB362_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB362_24:
	testb	%al, %al
	je	.LBB362_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB362_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB362_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB362_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB362_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB362_55
.LBB362_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB362_26
.LBB362_54:
	testl	%eax, %eax
	je	.LBB362_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB362_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB362_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB362_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB362_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB362_28
.LBB362_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB362_28

	.def	 _execute_263;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_263
	.align	16, 0x90
_execute_263:                           # @_execute_263
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB363_1:                              # =>This Inner Loop Header: Depth=1
	movl	$23, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB363_17
# BB#2:                                 #   in Loop: Header=BB363_1 Depth=1
	jmpq	*%rax
.Ltmp1103:                              # Block address taken
.LBB363_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB363_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB363_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB363_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB363_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB363_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB363_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB363_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB363_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB363_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB363_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB363_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB363_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB363_11
.LBB363_10:
	testl	%eax, %eax
	je	.LBB363_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB363_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB363_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB363_13:
	testb	%al, %al
	je	.LBB363_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB363_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB363_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB363_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB363_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB363_29
.LBB363_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB363_15
.LBB363_28:
	testl	%eax, %eax
	je	.LBB363_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB363_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB363_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB363_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB363_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB363_17
.LBB363_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167177848, %ecx        # imm = 0x9F6EE78
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167179064, %ecx        # imm = 0x9F6F338
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_c0a18204_31(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167179064, %ecx        # imm = 0x9F6F338
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_c0a18204_31(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167179064, %ecx        # imm = 0x9F6F338
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_c0a18204_31(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167179064, %ecx        # imm = 0x9F6F338
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_c0a18204_31(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_c0a18204_32(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167177848, %ecx        # imm = 0x9F6EE78
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167179064, %ecx        # imm = 0x9F6F338
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_c0a18204_31(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167179064, %ecx        # imm = 0x9F6F338
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_c0a18204_31(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167179064, %ecx        # imm = 0x9F6F338
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167179064, %ecx        # imm = 0x9F6F338
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_c0a18204_31(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_c0a18204_32(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB363_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1103(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_c0a18204_31;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_c0a18204_31
	.align	16, 0x90
_subprog_m_7ddf9423_c0a18204_31:        # @_subprog_m_7ddf9423_c0a18204_31
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB364_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB364_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB364_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB364_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB364_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB364_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB364_6
.LBB364_5:
	testl	%eax, %eax
	je	.LBB364_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB364_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB364_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB364_8:
	testb	%al, %al
	je	.LBB364_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB364_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB364_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB364_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB364_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB364_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB364_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB364_160
.LBB364_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB364_10
.LBB364_159:
	testl	%eax, %eax
	je	.LBB364_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB364_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB364_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB364_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB364_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB364_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB364_148
.LBB364_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB364_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB364_13
.LBB364_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB364_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB364_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB364_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB364_148
.LBB364_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB364_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB364_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB364_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB364_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB364_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB364_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB364_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB364_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB364_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB364_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB364_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB364_23
.LBB364_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB364_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB364_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB364_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB364_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB364_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB364_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB364_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB364_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB364_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB364_182
.LBB364_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB364_27
.LBB364_181:
	testl	%eax, %eax
	je	.LBB364_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB364_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB364_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB364_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB364_29
.LBB364_28:
	testl	%eax, %eax
	je	.LBB364_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB364_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB364_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB364_31:
	testb	%al, %al
	je	.LBB364_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB364_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB364_195
.LBB364_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB364_33
.LBB364_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB364_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB364_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB364_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB364_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB364_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB364_228
.LBB364_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB364_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB364_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB364_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB364_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB364_39
.LBB364_38:
	testl	%eax, %eax
	je	.LBB364_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB364_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB364_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB364_41:
	testb	%al, %al
	je	.LBB364_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB364_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB364_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB364_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB364_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB364_209
.LBB364_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB364_43
.LBB364_208:
	testl	%eax, %eax
	je	.LBB364_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB364_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB364_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB364_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB364_45
.LBB364_44:
	testl	%eax, %eax
	je	.LBB364_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB364_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB364_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB364_47:
	testb	%al, %al
	je	.LBB364_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB364_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB364_222
.LBB364_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB364_49
.LBB364_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB364_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB364_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB364_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB364_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB364_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB364_227
.LBB364_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB364_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB364_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB364_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB364_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB364_55
.LBB364_54:
	testl	%eax, %eax
	je	.LBB364_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB364_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB364_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB364_57:
	testb	%al, %al
	je	.LBB364_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB364_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB364_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB364_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB364_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB364_240
.LBB364_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB364_59
.LBB364_239:
	testl	%eax, %eax
	je	.LBB364_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB364_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB364_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB364_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB364_61
.LBB364_60:
	testl	%eax, %eax
	je	.LBB364_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB364_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB364_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB364_63:
	testb	%al, %al
	je	.LBB364_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB364_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB364_253
.LBB364_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB364_65
.LBB364_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB364_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB364_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB364_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB364_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB364_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB364_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB364_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB364_229
.LBB364_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB364_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB364_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB364_70
.LBB364_69:
	testl	%eax, %eax
	je	.LBB364_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB364_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB364_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB364_72:
	testb	%al, %al
	je	.LBB364_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB364_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB364_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB364_265
.LBB364_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB364_74
.LBB364_264:
	testl	%eax, %eax
	je	.LBB364_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB364_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB364_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB364_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB364_76
.LBB364_75:
	testl	%eax, %eax
	je	.LBB364_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB364_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB364_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB364_78:
	testb	%al, %al
	je	.LBB364_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB364_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB364_277
.LBB364_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB364_80
.LBB364_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB364_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB364_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB364_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB364_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB364_82
.LBB364_81:
	testl	%eax, %eax
	je	.LBB364_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB364_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB364_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB364_84:
	testb	%al, %al
	je	.LBB364_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB364_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB364_288
.LBB364_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB364_86
.LBB364_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB364_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB364_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB364_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB364_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB364_88
.LBB364_87:
	testl	%eax, %eax
	je	.LBB364_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB364_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB364_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB364_90:
	testb	%al, %al
	je	.LBB364_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB364_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB364_299
.LBB364_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB364_92
.LBB364_298:
	testl	%eax, %eax
	je	.LBB364_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB364_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB364_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB364_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB364_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB364_351
.LBB364_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB364_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB364_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB364_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB364_97
.LBB364_96:
	testl	%eax, %eax
	je	.LBB364_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB364_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB364_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB364_99:
	testb	%al, %al
	je	.LBB364_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB364_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB364_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB364_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB364_311
.LBB364_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB364_101
.LBB364_310:
	testl	%eax, %eax
	je	.LBB364_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB364_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB364_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB364_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB364_103
.LBB364_102:
	testl	%eax, %eax
	je	.LBB364_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB364_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB364_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB364_105:
	testb	%al, %al
	je	.LBB364_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB364_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB364_323
.LBB364_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB364_107
.LBB364_322:
	testl	%eax, %eax
	je	.LBB364_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB364_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB364_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB364_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB364_109
.LBB364_108:
	testl	%eax, %eax
	je	.LBB364_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB364_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB364_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB364_111:
	testb	%al, %al
	je	.LBB364_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB364_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB364_334
.LBB364_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB364_113
.LBB364_333:
	testl	%eax, %eax
	je	.LBB364_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB364_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB364_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB364_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB364_115
.LBB364_114:
	testl	%eax, %eax
	je	.LBB364_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB364_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB364_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB364_117:
	testb	%al, %al
	je	.LBB364_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB364_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB364_345
.LBB364_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB364_119
.LBB364_344:
	testl	%eax, %eax
	je	.LBB364_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB364_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB364_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB364_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB364_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB364_350
.LBB364_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB364_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB364_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB364_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB364_124
.LBB364_123:
	testl	%eax, %eax
	je	.LBB364_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB364_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB364_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB364_126:
	testb	%al, %al
	je	.LBB364_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB364_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB364_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB364_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB364_359
.LBB364_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB364_128
.LBB364_358:
	testl	%eax, %eax
	je	.LBB364_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB364_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB364_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB364_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB364_130
.LBB364_129:
	testl	%eax, %eax
	je	.LBB364_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB364_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB364_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB364_132:
	testb	%al, %al
	je	.LBB364_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB364_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB364_371
.LBB364_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB364_134
.LBB364_370:
	testl	%eax, %eax
	je	.LBB364_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB364_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB364_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB364_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB364_136
.LBB364_135:
	testl	%eax, %eax
	je	.LBB364_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB364_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB364_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB364_138:
	testb	%al, %al
	je	.LBB364_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB364_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB364_382
.LBB364_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB364_140
.LBB364_381:
	testl	%eax, %eax
	je	.LBB364_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB364_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB364_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB364_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB364_142
.LBB364_141:
	testl	%eax, %eax
	je	.LBB364_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB364_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB364_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB364_144:
	testb	%al, %al
	je	.LBB364_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB364_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB364_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB364_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB364_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB364_393
.LBB364_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB364_146
.LBB364_392:
	testl	%eax, %eax
	je	.LBB364_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB364_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB364_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB364_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB364_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB364_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB364_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB364_148
.LBB364_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB364_148

	.def	 _subprog_m_7ddf9423_c0a18204_32;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_c0a18204_32
	.align	16, 0x90
_subprog_m_7ddf9423_c0a18204_32:        # @_subprog_m_7ddf9423_c0a18204_32
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB365_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB365_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB365_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB365_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB365_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB365_5
.LBB365_4:
	testl	%eax, %eax
	je	.LBB365_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB365_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB365_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB365_7:
	testb	%al, %al
	je	.LBB365_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB365_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB365_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB365_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB365_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB365_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB365_73
.LBB365_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB365_9
.LBB365_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB365_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB365_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB365_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB365_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB365_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB365_63
.LBB365_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB365_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB365_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB365_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB365_15
.LBB365_14:
	testl	%eax, %eax
	je	.LBB365_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB365_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB365_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB365_17:
	testb	%al, %al
	je	.LBB365_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB365_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB365_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB365_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB365_87
.LBB365_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB365_19
.LBB365_86:
	testl	%eax, %eax
	je	.LBB365_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB365_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB365_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB365_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB365_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB365_21
.LBB365_20:
	testl	%eax, %eax
	je	.LBB365_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB365_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB365_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB365_23:
	testb	%al, %al
	je	.LBB365_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB365_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB365_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB365_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB365_98
.LBB365_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB365_25
.LBB365_97:
	testl	%eax, %eax
	je	.LBB365_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB365_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB365_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB365_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB365_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB365_103
.LBB365_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB365_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB365_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB365_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB365_30
.LBB365_29:
	testl	%eax, %eax
	je	.LBB365_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB365_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB365_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB365_32:
	testb	%al, %al
	je	.LBB365_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB365_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB365_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB365_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB365_114
.LBB365_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB365_34
.LBB365_113:
	testl	%eax, %eax
	je	.LBB365_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB365_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB365_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB365_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB365_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB365_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB365_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB365_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB365_39
.LBB365_38:
	testl	%eax, %eax
	je	.LBB365_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB365_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB365_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB365_41:
	testb	%al, %al
	je	.LBB365_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB365_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB365_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB365_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB365_126
.LBB365_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB365_43
.LBB365_125:
	testl	%eax, %eax
	je	.LBB365_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB365_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB365_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB365_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB365_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB365_104
.LBB365_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB365_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB365_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB365_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB365_48
.LBB365_47:
	testl	%eax, %eax
	je	.LBB365_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB365_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB365_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB365_50:
	testb	%al, %al
	je	.LBB365_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB365_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB365_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB365_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB365_139
.LBB365_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB365_52
.LBB365_138:
	testl	%eax, %eax
	je	.LBB365_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB365_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB365_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB365_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB365_53
.LBB365_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB365_103:
	xorl	%r8d, %r8d
.LBB365_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB365_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB365_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB365_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB365_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB365_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB365_57
.LBB365_56:
	testl	%eax, %eax
	je	.LBB365_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB365_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB365_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB365_59:
	testb	%al, %al
	je	.LBB365_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB365_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB365_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB365_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB365_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB365_152
.LBB365_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB365_61
.LBB365_151:
	testl	%eax, %eax
	je	.LBB365_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB365_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB365_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB365_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB365_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB365_104
.LBB365_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB365_63

	.def	 _execute_266;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_266
	.align	16, 0x90
_execute_266:                           # @_execute_266
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$24, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng57(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258112;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258112
	.align	16, 0x90
_execute_258112:                        # @_execute_258112
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258113;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258113
	.align	16, 0x90
_execute_258113:                        # @_execute_258113
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258114;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258114
	.align	16, 0x90
_execute_258114:                        # @_execute_258114
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258115;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258115
	.align	16, 0x90
_execute_258115:                        # @_execute_258115
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258116;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258116
	.align	16, 0x90
_execute_258116:                        # @_execute_258116
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258117;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258117
	.align	16, 0x90
_execute_258117:                        # @_execute_258117
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258118;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258118
	.align	16, 0x90
_execute_258118:                        # @_execute_258118
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258119;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258119
	.align	16, 0x90
_execute_258119:                        # @_execute_258119
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_297;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_297
	.align	16, 0x90
_execute_297:                           # @_execute_297
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$25, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_298;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_298
	.align	16, 0x90
_execute_298:                           # @_execute_298
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB376_1:                              # =>This Inner Loop Header: Depth=1
	movl	$26, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB376_29
# BB#2:                                 #   in Loop: Header=BB376_1 Depth=1
	jmpq	*%rax
.Ltmp1143:                              # Block address taken
.LBB376_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB376_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB376_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB376_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB376_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB376_32
.LBB376_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB376_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB376_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB376_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB376_9
# BB#34:
	movq	664(%rsi), %r8
.LBB376_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB376_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB376_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1143(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB376_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB376_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB376_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB376_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB376_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB376_13
.LBB376_12:
	testl	%eax, %eax
	je	.LBB376_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB376_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB376_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB376_15:
	testb	%al, %al
	je	.LBB376_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB376_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB376_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB376_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB376_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB376_42
.LBB376_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB376_17
.LBB376_41:
	testl	%eax, %eax
	je	.LBB376_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB376_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB376_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB376_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB376_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB376_28
.LBB376_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB376_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB376_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB376_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB376_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB376_22
.LBB376_21:
	testl	%eax, %eax
	je	.LBB376_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB376_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB376_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB376_24:
	testb	%al, %al
	je	.LBB376_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB376_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB376_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB376_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB376_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB376_55
.LBB376_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB376_26
.LBB376_54:
	testl	%eax, %eax
	je	.LBB376_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB376_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB376_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB376_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB376_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB376_28
.LBB376_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB376_28

	.def	 _execute_299;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_299
	.align	16, 0x90
_execute_299:                           # @_execute_299
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB377_1:                              # =>This Inner Loop Header: Depth=1
	movl	$27, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB377_17
# BB#2:                                 #   in Loop: Header=BB377_1 Depth=1
	jmpq	*%rax
.Ltmp1147:                              # Block address taken
.LBB377_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB377_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB377_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB377_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB377_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB377_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB377_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB377_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB377_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB377_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB377_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB377_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB377_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB377_11
.LBB377_10:
	testl	%eax, %eax
	je	.LBB377_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB377_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB377_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB377_13:
	testb	%al, %al
	je	.LBB377_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB377_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB377_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB377_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB377_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB377_29
.LBB377_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB377_15
.LBB377_28:
	testl	%eax, %eax
	je	.LBB377_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB377_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB377_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB377_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB377_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB377_17
.LBB377_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167177392, %ecx        # imm = 0x9F6ECB0
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167176176, %ecx        # imm = 0x9F6E7F0
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_5d669959_34(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176176, %ecx        # imm = 0x9F6E7F0
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_5d669959_34(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176176, %ecx        # imm = 0x9F6E7F0
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_5d669959_34(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176176, %ecx        # imm = 0x9F6E7F0
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_5d669959_34(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_5d669959_35(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167177392, %ecx        # imm = 0x9F6ECB0
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167176176, %ecx        # imm = 0x9F6E7F0
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_5d669959_34(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176176, %ecx        # imm = 0x9F6E7F0
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_5d669959_34(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167176176, %ecx        # imm = 0x9F6E7F0
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167176176, %ecx        # imm = 0x9F6E7F0
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_5d669959_34(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_5d669959_35(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB377_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1147(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_5d669959_34;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_5d669959_34
	.align	16, 0x90
_subprog_m_7ddf9423_5d669959_34:        # @_subprog_m_7ddf9423_5d669959_34
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB378_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB378_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB378_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB378_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB378_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB378_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB378_6
.LBB378_5:
	testl	%eax, %eax
	je	.LBB378_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB378_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB378_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB378_8:
	testb	%al, %al
	je	.LBB378_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB378_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB378_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB378_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB378_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB378_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB378_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB378_160
.LBB378_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB378_10
.LBB378_159:
	testl	%eax, %eax
	je	.LBB378_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB378_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB378_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB378_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB378_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB378_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB378_148
.LBB378_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB378_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB378_13
.LBB378_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB378_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB378_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB378_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB378_148
.LBB378_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB378_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB378_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB378_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB378_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB378_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB378_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB378_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB378_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB378_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB378_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB378_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB378_23
.LBB378_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB378_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB378_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB378_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB378_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB378_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB378_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB378_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB378_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB378_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB378_182
.LBB378_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB378_27
.LBB378_181:
	testl	%eax, %eax
	je	.LBB378_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB378_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB378_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB378_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB378_29
.LBB378_28:
	testl	%eax, %eax
	je	.LBB378_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB378_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB378_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB378_31:
	testb	%al, %al
	je	.LBB378_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB378_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB378_195
.LBB378_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB378_33
.LBB378_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB378_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB378_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB378_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB378_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB378_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB378_228
.LBB378_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB378_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB378_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB378_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB378_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB378_39
.LBB378_38:
	testl	%eax, %eax
	je	.LBB378_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB378_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB378_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB378_41:
	testb	%al, %al
	je	.LBB378_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB378_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB378_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB378_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB378_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB378_209
.LBB378_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB378_43
.LBB378_208:
	testl	%eax, %eax
	je	.LBB378_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB378_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB378_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB378_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB378_45
.LBB378_44:
	testl	%eax, %eax
	je	.LBB378_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB378_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB378_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB378_47:
	testb	%al, %al
	je	.LBB378_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB378_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB378_222
.LBB378_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB378_49
.LBB378_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB378_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB378_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB378_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB378_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB378_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB378_227
.LBB378_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB378_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB378_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB378_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB378_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB378_55
.LBB378_54:
	testl	%eax, %eax
	je	.LBB378_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB378_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB378_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB378_57:
	testb	%al, %al
	je	.LBB378_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB378_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB378_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB378_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB378_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB378_240
.LBB378_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB378_59
.LBB378_239:
	testl	%eax, %eax
	je	.LBB378_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB378_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB378_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB378_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB378_61
.LBB378_60:
	testl	%eax, %eax
	je	.LBB378_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB378_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB378_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB378_63:
	testb	%al, %al
	je	.LBB378_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB378_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB378_253
.LBB378_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB378_65
.LBB378_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB378_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB378_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB378_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB378_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB378_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB378_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB378_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB378_229
.LBB378_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB378_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB378_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB378_70
.LBB378_69:
	testl	%eax, %eax
	je	.LBB378_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB378_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB378_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB378_72:
	testb	%al, %al
	je	.LBB378_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB378_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB378_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB378_265
.LBB378_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB378_74
.LBB378_264:
	testl	%eax, %eax
	je	.LBB378_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB378_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB378_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB378_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB378_76
.LBB378_75:
	testl	%eax, %eax
	je	.LBB378_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB378_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB378_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB378_78:
	testb	%al, %al
	je	.LBB378_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB378_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB378_277
.LBB378_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB378_80
.LBB378_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB378_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB378_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB378_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB378_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB378_82
.LBB378_81:
	testl	%eax, %eax
	je	.LBB378_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB378_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB378_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB378_84:
	testb	%al, %al
	je	.LBB378_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB378_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB378_288
.LBB378_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB378_86
.LBB378_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB378_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB378_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB378_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB378_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB378_88
.LBB378_87:
	testl	%eax, %eax
	je	.LBB378_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB378_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB378_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB378_90:
	testb	%al, %al
	je	.LBB378_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB378_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB378_299
.LBB378_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB378_92
.LBB378_298:
	testl	%eax, %eax
	je	.LBB378_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB378_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB378_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB378_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB378_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB378_351
.LBB378_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB378_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB378_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB378_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB378_97
.LBB378_96:
	testl	%eax, %eax
	je	.LBB378_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB378_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB378_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB378_99:
	testb	%al, %al
	je	.LBB378_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB378_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB378_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB378_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB378_311
.LBB378_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB378_101
.LBB378_310:
	testl	%eax, %eax
	je	.LBB378_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB378_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB378_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB378_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB378_103
.LBB378_102:
	testl	%eax, %eax
	je	.LBB378_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB378_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB378_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB378_105:
	testb	%al, %al
	je	.LBB378_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB378_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB378_323
.LBB378_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB378_107
.LBB378_322:
	testl	%eax, %eax
	je	.LBB378_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB378_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB378_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB378_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB378_109
.LBB378_108:
	testl	%eax, %eax
	je	.LBB378_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB378_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB378_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB378_111:
	testb	%al, %al
	je	.LBB378_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB378_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB378_334
.LBB378_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB378_113
.LBB378_333:
	testl	%eax, %eax
	je	.LBB378_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB378_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB378_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB378_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB378_115
.LBB378_114:
	testl	%eax, %eax
	je	.LBB378_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB378_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB378_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB378_117:
	testb	%al, %al
	je	.LBB378_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB378_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB378_345
.LBB378_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB378_119
.LBB378_344:
	testl	%eax, %eax
	je	.LBB378_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB378_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB378_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB378_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB378_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB378_350
.LBB378_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB378_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB378_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB378_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB378_124
.LBB378_123:
	testl	%eax, %eax
	je	.LBB378_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB378_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB378_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB378_126:
	testb	%al, %al
	je	.LBB378_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB378_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB378_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB378_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB378_359
.LBB378_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB378_128
.LBB378_358:
	testl	%eax, %eax
	je	.LBB378_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB378_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB378_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB378_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB378_130
.LBB378_129:
	testl	%eax, %eax
	je	.LBB378_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB378_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB378_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB378_132:
	testb	%al, %al
	je	.LBB378_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB378_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB378_371
.LBB378_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB378_134
.LBB378_370:
	testl	%eax, %eax
	je	.LBB378_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB378_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB378_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB378_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB378_136
.LBB378_135:
	testl	%eax, %eax
	je	.LBB378_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB378_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB378_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB378_138:
	testb	%al, %al
	je	.LBB378_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB378_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB378_382
.LBB378_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB378_140
.LBB378_381:
	testl	%eax, %eax
	je	.LBB378_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB378_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB378_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB378_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB378_142
.LBB378_141:
	testl	%eax, %eax
	je	.LBB378_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB378_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB378_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB378_144:
	testb	%al, %al
	je	.LBB378_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB378_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB378_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB378_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB378_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB378_393
.LBB378_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB378_146
.LBB378_392:
	testl	%eax, %eax
	je	.LBB378_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB378_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB378_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB378_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB378_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB378_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB378_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB378_148
.LBB378_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB378_148

	.def	 _subprog_m_7ddf9423_5d669959_35;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_5d669959_35
	.align	16, 0x90
_subprog_m_7ddf9423_5d669959_35:        # @_subprog_m_7ddf9423_5d669959_35
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB379_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB379_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB379_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB379_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB379_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB379_5
.LBB379_4:
	testl	%eax, %eax
	je	.LBB379_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB379_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB379_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB379_7:
	testb	%al, %al
	je	.LBB379_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB379_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB379_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB379_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB379_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB379_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB379_73
.LBB379_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB379_9
.LBB379_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB379_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB379_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB379_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB379_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB379_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB379_63
.LBB379_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB379_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB379_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB379_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB379_15
.LBB379_14:
	testl	%eax, %eax
	je	.LBB379_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB379_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB379_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB379_17:
	testb	%al, %al
	je	.LBB379_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB379_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB379_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB379_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB379_87
.LBB379_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB379_19
.LBB379_86:
	testl	%eax, %eax
	je	.LBB379_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB379_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB379_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB379_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB379_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB379_21
.LBB379_20:
	testl	%eax, %eax
	je	.LBB379_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB379_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB379_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB379_23:
	testb	%al, %al
	je	.LBB379_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB379_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB379_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB379_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB379_98
.LBB379_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB379_25
.LBB379_97:
	testl	%eax, %eax
	je	.LBB379_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB379_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB379_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB379_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB379_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB379_103
.LBB379_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB379_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB379_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB379_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB379_30
.LBB379_29:
	testl	%eax, %eax
	je	.LBB379_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB379_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB379_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB379_32:
	testb	%al, %al
	je	.LBB379_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB379_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB379_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB379_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB379_114
.LBB379_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB379_34
.LBB379_113:
	testl	%eax, %eax
	je	.LBB379_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB379_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB379_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB379_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB379_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB379_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB379_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB379_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB379_39
.LBB379_38:
	testl	%eax, %eax
	je	.LBB379_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB379_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB379_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB379_41:
	testb	%al, %al
	je	.LBB379_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB379_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB379_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB379_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB379_126
.LBB379_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB379_43
.LBB379_125:
	testl	%eax, %eax
	je	.LBB379_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB379_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB379_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB379_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB379_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB379_104
.LBB379_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB379_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB379_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB379_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB379_48
.LBB379_47:
	testl	%eax, %eax
	je	.LBB379_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB379_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB379_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB379_50:
	testb	%al, %al
	je	.LBB379_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB379_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB379_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB379_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB379_139
.LBB379_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB379_52
.LBB379_138:
	testl	%eax, %eax
	je	.LBB379_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB379_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB379_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB379_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB379_53
.LBB379_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB379_103:
	xorl	%r8d, %r8d
.LBB379_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB379_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB379_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB379_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB379_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB379_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB379_57
.LBB379_56:
	testl	%eax, %eax
	je	.LBB379_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB379_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB379_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB379_59:
	testb	%al, %al
	je	.LBB379_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB379_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB379_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB379_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB379_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB379_152
.LBB379_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB379_61
.LBB379_151:
	testl	%eax, %eax
	je	.LBB379_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB379_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB379_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB379_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB379_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB379_104
.LBB379_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB379_63

	.def	 _execute_302;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_302
	.align	16, 0x90
_execute_302:                           # @_execute_302
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$28, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng60(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258142;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258142
	.align	16, 0x90
_execute_258142:                        # @_execute_258142
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258143;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258143
	.align	16, 0x90
_execute_258143:                        # @_execute_258143
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258144;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258144
	.align	16, 0x90
_execute_258144:                        # @_execute_258144
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258145;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258145
	.align	16, 0x90
_execute_258145:                        # @_execute_258145
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258146;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258146
	.align	16, 0x90
_execute_258146:                        # @_execute_258146
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258147;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258147
	.align	16, 0x90
_execute_258147:                        # @_execute_258147
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258148;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258148
	.align	16, 0x90
_execute_258148:                        # @_execute_258148
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258149;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258149
	.align	16, 0x90
_execute_258149:                        # @_execute_258149
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_312;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_312
	.align	16, 0x90
_execute_312:                           # @_execute_312
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$29, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_313;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_313
	.align	16, 0x90
_execute_313:                           # @_execute_313
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB390_1:                              # =>This Inner Loop Header: Depth=1
	movl	$30, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB390_29
# BB#2:                                 #   in Loop: Header=BB390_1 Depth=1
	jmpq	*%rax
.Ltmp1187:                              # Block address taken
.LBB390_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB390_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB390_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB390_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB390_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB390_32
.LBB390_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB390_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB390_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB390_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB390_9
# BB#34:
	movq	664(%rsi), %r8
.LBB390_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB390_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB390_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1187(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB390_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB390_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB390_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB390_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB390_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB390_13
.LBB390_12:
	testl	%eax, %eax
	je	.LBB390_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB390_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB390_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB390_15:
	testb	%al, %al
	je	.LBB390_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB390_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB390_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB390_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB390_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB390_42
.LBB390_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB390_17
.LBB390_41:
	testl	%eax, %eax
	je	.LBB390_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB390_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB390_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB390_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB390_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB390_28
.LBB390_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB390_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB390_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB390_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB390_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB390_22
.LBB390_21:
	testl	%eax, %eax
	je	.LBB390_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB390_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB390_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB390_24:
	testb	%al, %al
	je	.LBB390_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB390_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB390_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB390_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB390_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB390_55
.LBB390_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB390_26
.LBB390_54:
	testl	%eax, %eax
	je	.LBB390_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB390_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB390_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB390_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB390_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB390_28
.LBB390_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB390_28

	.def	 _execute_314;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_314
	.align	16, 0x90
_execute_314:                           # @_execute_314
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB391_1:                              # =>This Inner Loop Header: Depth=1
	movl	$31, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB391_17
# BB#2:                                 #   in Loop: Header=BB391_1 Depth=1
	jmpq	*%rax
.Ltmp1191:                              # Block address taken
.LBB391_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB391_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB391_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB391_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB391_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB391_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB391_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB391_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB391_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB391_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB391_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB391_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB391_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB391_11
.LBB391_10:
	testl	%eax, %eax
	je	.LBB391_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB391_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB391_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB391_13:
	testb	%al, %al
	je	.LBB391_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB391_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB391_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB391_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB391_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB391_29
.LBB391_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB391_15
.LBB391_28:
	testl	%eax, %eax
	je	.LBB391_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB391_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB391_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB391_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB391_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB391_17
.LBB391_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167180128, %ecx        # imm = 0x9F6F760
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167178000, %ecx        # imm = 0x9F6EF10
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_7c8f675f_37(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178000, %ecx        # imm = 0x9F6EF10
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_7c8f675f_37(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178000, %ecx        # imm = 0x9F6EF10
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7c8f675f_37(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178000, %ecx        # imm = 0x9F6EF10
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_7c8f675f_37(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_7c8f675f_38(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167180128, %ecx        # imm = 0x9F6F760
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167178000, %ecx        # imm = 0x9F6EF10
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7c8f675f_37(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178000, %ecx        # imm = 0x9F6EF10
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7c8f675f_37(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167178000, %ecx        # imm = 0x9F6EF10
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167178000, %ecx        # imm = 0x9F6EF10
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_7c8f675f_37(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7c8f675f_38(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB391_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1191(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_7c8f675f_37;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_7c8f675f_37
	.align	16, 0x90
_subprog_m_7ddf9423_7c8f675f_37:        # @_subprog_m_7ddf9423_7c8f675f_37
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB392_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB392_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB392_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB392_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB392_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB392_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB392_6
.LBB392_5:
	testl	%eax, %eax
	je	.LBB392_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB392_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB392_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB392_8:
	testb	%al, %al
	je	.LBB392_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB392_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB392_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB392_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB392_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB392_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB392_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB392_160
.LBB392_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB392_10
.LBB392_159:
	testl	%eax, %eax
	je	.LBB392_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB392_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB392_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB392_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB392_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB392_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB392_148
.LBB392_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB392_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB392_13
.LBB392_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB392_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB392_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB392_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB392_148
.LBB392_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB392_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB392_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB392_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB392_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB392_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB392_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB392_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB392_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB392_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB392_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB392_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB392_23
.LBB392_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB392_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB392_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB392_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB392_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB392_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB392_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB392_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB392_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB392_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB392_182
.LBB392_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB392_27
.LBB392_181:
	testl	%eax, %eax
	je	.LBB392_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB392_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB392_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB392_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB392_29
.LBB392_28:
	testl	%eax, %eax
	je	.LBB392_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB392_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB392_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB392_31:
	testb	%al, %al
	je	.LBB392_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB392_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB392_195
.LBB392_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB392_33
.LBB392_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB392_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB392_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB392_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB392_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB392_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB392_228
.LBB392_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB392_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB392_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB392_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB392_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB392_39
.LBB392_38:
	testl	%eax, %eax
	je	.LBB392_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB392_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB392_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB392_41:
	testb	%al, %al
	je	.LBB392_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB392_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB392_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB392_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB392_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB392_209
.LBB392_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB392_43
.LBB392_208:
	testl	%eax, %eax
	je	.LBB392_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB392_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB392_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB392_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB392_45
.LBB392_44:
	testl	%eax, %eax
	je	.LBB392_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB392_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB392_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB392_47:
	testb	%al, %al
	je	.LBB392_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB392_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB392_222
.LBB392_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB392_49
.LBB392_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB392_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB392_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB392_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB392_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB392_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB392_227
.LBB392_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB392_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB392_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB392_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB392_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB392_55
.LBB392_54:
	testl	%eax, %eax
	je	.LBB392_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB392_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB392_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB392_57:
	testb	%al, %al
	je	.LBB392_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB392_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB392_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB392_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB392_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB392_240
.LBB392_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB392_59
.LBB392_239:
	testl	%eax, %eax
	je	.LBB392_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB392_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB392_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB392_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB392_61
.LBB392_60:
	testl	%eax, %eax
	je	.LBB392_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB392_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB392_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB392_63:
	testb	%al, %al
	je	.LBB392_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB392_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB392_253
.LBB392_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB392_65
.LBB392_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB392_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB392_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB392_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB392_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB392_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB392_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB392_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB392_229
.LBB392_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB392_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB392_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB392_70
.LBB392_69:
	testl	%eax, %eax
	je	.LBB392_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB392_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB392_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB392_72:
	testb	%al, %al
	je	.LBB392_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB392_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB392_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB392_265
.LBB392_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB392_74
.LBB392_264:
	testl	%eax, %eax
	je	.LBB392_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB392_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB392_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB392_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB392_76
.LBB392_75:
	testl	%eax, %eax
	je	.LBB392_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB392_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB392_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB392_78:
	testb	%al, %al
	je	.LBB392_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB392_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB392_277
.LBB392_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB392_80
.LBB392_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB392_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB392_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB392_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB392_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB392_82
.LBB392_81:
	testl	%eax, %eax
	je	.LBB392_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB392_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB392_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB392_84:
	testb	%al, %al
	je	.LBB392_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB392_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB392_288
.LBB392_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB392_86
.LBB392_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB392_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB392_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB392_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB392_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB392_88
.LBB392_87:
	testl	%eax, %eax
	je	.LBB392_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB392_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB392_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB392_90:
	testb	%al, %al
	je	.LBB392_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB392_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB392_299
.LBB392_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB392_92
.LBB392_298:
	testl	%eax, %eax
	je	.LBB392_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB392_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB392_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB392_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB392_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB392_351
.LBB392_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB392_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB392_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB392_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB392_97
.LBB392_96:
	testl	%eax, %eax
	je	.LBB392_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB392_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB392_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB392_99:
	testb	%al, %al
	je	.LBB392_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB392_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB392_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB392_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB392_311
.LBB392_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB392_101
.LBB392_310:
	testl	%eax, %eax
	je	.LBB392_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB392_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB392_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB392_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB392_103
.LBB392_102:
	testl	%eax, %eax
	je	.LBB392_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB392_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB392_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB392_105:
	testb	%al, %al
	je	.LBB392_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB392_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB392_323
.LBB392_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB392_107
.LBB392_322:
	testl	%eax, %eax
	je	.LBB392_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB392_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB392_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB392_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB392_109
.LBB392_108:
	testl	%eax, %eax
	je	.LBB392_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB392_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB392_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB392_111:
	testb	%al, %al
	je	.LBB392_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB392_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB392_334
.LBB392_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB392_113
.LBB392_333:
	testl	%eax, %eax
	je	.LBB392_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB392_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB392_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB392_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB392_115
.LBB392_114:
	testl	%eax, %eax
	je	.LBB392_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB392_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB392_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB392_117:
	testb	%al, %al
	je	.LBB392_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB392_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB392_345
.LBB392_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB392_119
.LBB392_344:
	testl	%eax, %eax
	je	.LBB392_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB392_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB392_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB392_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB392_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB392_350
.LBB392_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB392_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB392_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB392_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB392_124
.LBB392_123:
	testl	%eax, %eax
	je	.LBB392_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB392_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB392_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB392_126:
	testb	%al, %al
	je	.LBB392_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB392_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB392_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB392_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB392_359
.LBB392_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB392_128
.LBB392_358:
	testl	%eax, %eax
	je	.LBB392_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB392_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB392_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB392_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB392_130
.LBB392_129:
	testl	%eax, %eax
	je	.LBB392_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB392_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB392_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB392_132:
	testb	%al, %al
	je	.LBB392_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB392_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB392_371
.LBB392_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB392_134
.LBB392_370:
	testl	%eax, %eax
	je	.LBB392_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB392_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB392_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB392_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB392_136
.LBB392_135:
	testl	%eax, %eax
	je	.LBB392_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB392_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB392_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB392_138:
	testb	%al, %al
	je	.LBB392_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB392_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB392_382
.LBB392_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB392_140
.LBB392_381:
	testl	%eax, %eax
	je	.LBB392_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB392_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB392_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB392_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB392_142
.LBB392_141:
	testl	%eax, %eax
	je	.LBB392_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB392_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB392_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB392_144:
	testb	%al, %al
	je	.LBB392_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB392_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB392_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB392_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB392_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB392_393
.LBB392_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB392_146
.LBB392_392:
	testl	%eax, %eax
	je	.LBB392_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB392_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB392_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB392_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB392_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB392_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB392_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB392_148
.LBB392_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB392_148

	.def	 _subprog_m_7ddf9423_7c8f675f_38;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_7c8f675f_38
	.align	16, 0x90
_subprog_m_7ddf9423_7c8f675f_38:        # @_subprog_m_7ddf9423_7c8f675f_38
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB393_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB393_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB393_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB393_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB393_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB393_5
.LBB393_4:
	testl	%eax, %eax
	je	.LBB393_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB393_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB393_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB393_7:
	testb	%al, %al
	je	.LBB393_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB393_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB393_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB393_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB393_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB393_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB393_73
.LBB393_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB393_9
.LBB393_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB393_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB393_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB393_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB393_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB393_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB393_63
.LBB393_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB393_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB393_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB393_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB393_15
.LBB393_14:
	testl	%eax, %eax
	je	.LBB393_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB393_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB393_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB393_17:
	testb	%al, %al
	je	.LBB393_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB393_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB393_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB393_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB393_87
.LBB393_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB393_19
.LBB393_86:
	testl	%eax, %eax
	je	.LBB393_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB393_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB393_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB393_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB393_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB393_21
.LBB393_20:
	testl	%eax, %eax
	je	.LBB393_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB393_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB393_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB393_23:
	testb	%al, %al
	je	.LBB393_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB393_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB393_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB393_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB393_98
.LBB393_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB393_25
.LBB393_97:
	testl	%eax, %eax
	je	.LBB393_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB393_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB393_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB393_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB393_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB393_103
.LBB393_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB393_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB393_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB393_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB393_30
.LBB393_29:
	testl	%eax, %eax
	je	.LBB393_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB393_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB393_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB393_32:
	testb	%al, %al
	je	.LBB393_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB393_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB393_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB393_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB393_114
.LBB393_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB393_34
.LBB393_113:
	testl	%eax, %eax
	je	.LBB393_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB393_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB393_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB393_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB393_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB393_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB393_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB393_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB393_39
.LBB393_38:
	testl	%eax, %eax
	je	.LBB393_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB393_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB393_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB393_41:
	testb	%al, %al
	je	.LBB393_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB393_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB393_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB393_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB393_126
.LBB393_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB393_43
.LBB393_125:
	testl	%eax, %eax
	je	.LBB393_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB393_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB393_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB393_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB393_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB393_104
.LBB393_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB393_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB393_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB393_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB393_48
.LBB393_47:
	testl	%eax, %eax
	je	.LBB393_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB393_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB393_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB393_50:
	testb	%al, %al
	je	.LBB393_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB393_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB393_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB393_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB393_139
.LBB393_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB393_52
.LBB393_138:
	testl	%eax, %eax
	je	.LBB393_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB393_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB393_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB393_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB393_53
.LBB393_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB393_103:
	xorl	%r8d, %r8d
.LBB393_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB393_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB393_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB393_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB393_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB393_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB393_57
.LBB393_56:
	testl	%eax, %eax
	je	.LBB393_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB393_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB393_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB393_59:
	testb	%al, %al
	je	.LBB393_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB393_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB393_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB393_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB393_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB393_152
.LBB393_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB393_61
.LBB393_151:
	testl	%eax, %eax
	je	.LBB393_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB393_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB393_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB393_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB393_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB393_104
.LBB393_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB393_63

	.def	 _execute_317;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_317
	.align	16, 0x90
_execute_317:                           # @_execute_317
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$32, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng63(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258153;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258153
	.align	16, 0x90
_execute_258153:                        # @_execute_258153
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	%rcx, %rbx
	.align	16, 0x90
.LBB395_1:                              # =>This Inner Loop Header: Depth=1
	cmpq	$0, 584(%rsi)
	jne	.LBB395_1
# BB#2:
	leaq	40(%rsi), %r14
	movl	$1, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	leaq	-40(%rbp), %rdi
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	664(%rsi), %rdx
	addq	$167164860, %rbx        # imm = 0x9F6BBBC
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_udp_matching_64(%rip)
	movsbl	%al, %eax
	testl	%eax, %eax
	je	.LBB395_4
# BB#3:
	addq	$680, %rsi              # imm = 0x2A8
	movl	$1, 32(%rsp)
	leaq	-40(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
.LBB395_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_258150;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258150
	.align	16, 0x90
_execute_258150:                        # @_execute_258150
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$32, %rsp
	movl	ng7(%rip), %eax
	andl	$1, %eax
	movl	%eax, 2200(%rdx)
	movl	ng7+4(%rip), %eax
	andl	$1, %eax
	movl	%eax, 2204(%rdx)
	leaq	936(%rdx), %rcx
	addq	$2176, %rdx             # imm = 0x880
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast(%rip)
	addq	$32, %rsp
	popq	%rbp
	ret

	.def	 _execute_258151;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258151
	.align	16, 0x90
_execute_258151:                        # @_execute_258151
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movq	720(%rsi), %rdx
	leaq	2368(%rsi), %rcx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	40(%rsi), %rcx
	addq	$2344, %rsi             # imm = 0x928
	movq	$0, 32(%rsp)
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_slow_specify_delay_dd0(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_319;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_319
	.align	16, 0x90
_execute_319:                           # @_execute_319
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB398_1:                              # =>This Inner Loop Header: Depth=1
	movl	$33, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1464(%rsi), %rax
	testq	%rax, %rax
	je	.LBB398_5
# BB#2:                                 #   in Loop: Header=BB398_1 Depth=1
	jmpq	*%rax
.Ltmp1212:                              # Block address taken
.LBB398_3:
	movb	$0, 1544(%rsi)
	movq	944(%rsi), %rax
	movl	4(%rax), %ecx
	notl	%ecx
	testl	(%rax), %ecx
	je	.LBB398_4
# BB#6:
	movl	1420(%rsi), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1680(%rsi), %rdx
	testl	1416(%rsi), %eax
	je	.LBB398_7
# BB#9:
	leaq	ng8(%rip), %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %rdi
	xorl	%r9d, %r9d
	callq	*%rdi
	leaq	824(%rsi), %rcx
	leaq	1712(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB398_8
.LBB398_4:
	leaq	880(%rsi), %rcx
	leaq	1680(%rsi), %rdx
	leaq	ng7(%rip), %rdi
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	824(%rsi), %rcx
	leaq	1712(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	jmp	.LBB398_5
.LBB398_7:
	leaq	ng7(%rip), %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %rdi
	xorl	%r9d, %r9d
	callq	*%rdi
	leaq	824(%rsi), %rcx
	leaq	1712(%rsi), %rdx
	leaq	ng8(%rip), %r8
.LBB398_8:
	xorl	%r9d, %r9d
	callq	*%rdi
.LBB398_5:
	movb	$1, 1544(%rsi)
	leaq	.Ltmp1212(%rip), %rax
	movq	%rax, 1464(%rsi)
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_321;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_321
	.align	16, 0x90
_execute_321:                           # @_execute_321
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB399_1:                              # =>This Inner Loop Header: Depth=1
	movl	$34, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1784(%rsi), %rax
	testq	%rax, %rax
	je	.LBB399_4
# BB#2:                                 #   in Loop: Header=BB399_1 Depth=1
	jmpq	*%rax
.Ltmp1216:                              # Block address taken
.LBB399_3:
	movb	$0, 1864(%rsi)
	movq	328(%rsi), %r8
	leaq	712(%rsi), %rcx
	leaq	1872(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB399_4:
	movb	$1, 1864(%rsi)
	leaq	.Ltmp1216(%rip), %rax
	movq	%rax, 1784(%rsi)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258157;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258157
	.align	16, 0x90
_execute_258157:                        # @_execute_258157
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$72, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rdi
	movl	$1, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB400_1
# BB#7:
	movl	$1, -32(%rbp)
	jmp	.LBB400_2
.LBB400_1:
	testl	%eax, %eax
	je	.LBB400_2
# BB#8:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB400_2:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	je	.LBB400_4
# BB#3:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB400_4:
	testb	%al, %al
	je	.LBB400_5
# BB#9:
	movl	$1, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	ng9(%rip), %eax
	jne	.LBB400_12
# BB#10:
	movl	4(%rdi), %eax
	cmpl	ng9+4(%rip), %eax
	jne	.LBB400_12
# BB#11:
	movl	$1, -40(%rbp)
.LBB400_12:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB400_13
# BB#16:
	movl	$1, -48(%rbp)
	jmp	.LBB400_14
.LBB400_5:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB400_6
.LBB400_13:
	testl	%eax, %eax
	je	.LBB400_14
# BB#17:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB400_14:
	movl	-32(%rbp), %eax
	orl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB400_6
# BB#15:
	orl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	notl	%eax
	andl	-32(%rbp), %eax
	notl	%eax
	andl	-52(%rbp), %eax
	movl	-44(%rbp), %ecx
	notl	%ecx
	andl	-48(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -52(%rbp)
.LBB400_6:
	leaq	3208(%rsi), %rcx
	leaq	-56(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3184, %rsi             # imm = 0xC70
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$72, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258158;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258158
	.align	16, 0x90
_execute_258158:                        # @_execute_258158
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	608(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -16(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -12(%rbp)
	je	.LBB401_2
# BB#1:
	orl	%eax, -16(%rbp)
.LBB401_2:
	leaq	3376(%rsi), %rcx
	leaq	-16(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3352, %rsi             # imm = 0xD18
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258159;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258159
	.align	16, 0x90
_execute_258159:                        # @_execute_258159
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$64, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %r14
	movl	$1, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	664(%rsi), %rcx
	movl	(%rax), %edx
	movl	4(%rax), %edi
	xorl	(%rcx), %edx
	movl	4(%rcx), %eax
	movl	%edi, %ebx
	orl	%eax, %ebx
	orl	%edx, %ebx
	orl	%eax, %edi
	cmovel	%edx, %ebx
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	%edi, %eax
	notl	%eax
	andl	%ebx, %eax
	testb	$1, %al
	je	.LBB402_1
# BB#7:
	movl	$1, -40(%rbp)
	jmp	.LBB402_2
.LBB402_1:
	testl	%edi, %edi
	je	.LBB402_2
# BB#8:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB402_2:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	jne	.LBB402_4
# BB#3:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB402_4:
	testb	%al, %al
	je	.LBB402_5
# BB#9:
	movl	$1, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rdi
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	ng9(%rip), %eax
	jne	.LBB402_15
# BB#10:
	movl	4(%rdi), %eax
	cmpl	ng9+4(%rip), %eax
	je	.LBB402_11
.LBB402_15:
	movl	$1, -48(%rbp)
.LBB402_11:
	leaq	-56(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-44(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-48(%rbp), %ecx
	testb	$1, %cl
	je	.LBB402_12
# BB#16:
	movl	$1, -56(%rbp)
	jmp	.LBB402_13
.LBB402_5:
	leaq	-64(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -64(%rbp)
	andl	$1, -60(%rbp)
	jmp	.LBB402_6
.LBB402_12:
	testl	%eax, %eax
	je	.LBB402_13
# BB#17:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -56(%rbp)
.LBB402_13:
	movl	-40(%rbp), %eax
	andl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-36(%rbp), %eax
	orl	-52(%rbp), %eax
	movl	%eax, -60(%rbp)
	je	.LBB402_6
# BB#14:
	orl	%eax, -64(%rbp)
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-60(%rbp), %ecx
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	-36(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -64(%rbp)
.LBB402_6:
	leaq	3544(%rsi), %rcx
	leaq	-64(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	488(%rsi), %rcx
	addq	$3520, %rsi             # imm = 0xDC0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_258160;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258160
	.align	16, 0x90
_execute_258160:                        # @_execute_258160
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	1328(%rsi), %rcx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlog_signal_handle_value_with_setback(%rip)
	leaq	3712(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3688, %rsi             # imm = 0xE68
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_322;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_322
	.align	16, 0x90
_execute_322:                           # @_execute_322
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$35, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	712(%rsi), %rcx
	addq	$2024, %rsi             # imm = 0x7E8
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258161;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258161
	.align	16, 0x90
_execute_258161:                        # @_execute_258161
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	992(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	leaq	3880(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3856, %rsi             # imm = 0xF10
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258162;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258162
	.align	16, 0x90
_execute_258162:                        # @_execute_258162
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	1160(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	leaq	4048(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$4024, %rsi             # imm = 0xFB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258163;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258163
	.align	16, 0x90
_execute_258163:                        # @_execute_258163
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	1272(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	leaq	4216(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4192, %rsi             # imm = 0x1060
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258215;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258215
	.align	16, 0x90
_execute_258215:                        # @_execute_258215
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	712(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -16(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -12(%rbp)
	je	.LBB408_2
# BB#1:
	orl	%eax, -16(%rbp)
.LBB408_2:
	leaq	4088(%rsi), %rcx
	leaq	-16(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1328(%rsi), %rcx
	addq	$4064, %rsi             # imm = 0xFE0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258216;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258216
	.align	16, 0x90
_execute_258216:                        # @_execute_258216
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$72, %rsp
	movq	%rdx, %rsi
	leaq	768(%rsi), %rdi
	movl	$1, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	ng9(%rip), %eax
	jne	.LBB409_3
# BB#1:
	movl	4(%rbx), %eax
	cmpl	ng9+4(%rip), %eax
	jne	.LBB409_3
# BB#2:
	movl	$1, -32(%rbp)
.LBB409_3:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB409_4
# BB#10:
	movl	$1, -40(%rbp)
	jmp	.LBB409_5
.LBB409_4:
	testl	%eax, %eax
	je	.LBB409_5
# BB#11:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB409_5:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB409_7
# BB#6:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB409_7:
	testb	%al, %al
	je	.LBB409_8
# BB#12:
	movl	$1, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rdi
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rdi), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rdi), %ecx
	testb	$1, %cl
	je	.LBB409_13
# BB#16:
	movl	$1, -48(%rbp)
	jmp	.LBB409_14
.LBB409_8:
	leaq	-56(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB409_9
.LBB409_13:
	testl	%eax, %eax
	je	.LBB409_14
# BB#17:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB409_14:
	movl	-40(%rbp), %eax
	orl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-36(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB409_9
# BB#15:
	orl	%eax, -56(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-52(%rbp), %eax
	movl	-44(%rbp), %ecx
	notl	%ecx
	andl	-48(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -52(%rbp)
.LBB409_9:
	leaq	4256(%rsi), %rcx
	leaq	-56(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1384(%rsi), %rcx
	addq	$4232, %rsi             # imm = 0x1088
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$72, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_349;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_349
	.align	16, 0x90
_execute_349:                           # @_execute_349
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	1904(%rsi), %rdi
	.align	16, 0x90
.LBB410_1:                              # =>This Inner Loop Header: Depth=1
	movl	$36, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1944(%rsi), %rax
	testq	%rax, %rax
	je	.LBB410_3
# BB#2:                                 #   in Loop: Header=BB410_1 Depth=1
	jmpq	*%rax
.Ltmp1250:                              # Block address taken
.LBB410_5:
	movq	832(%rsi), %rbx
	leaq	-32(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	notl	%eax
	andl	$1, %eax
	movl	%eax, -32(%rbp)
	leaq	824(%rsi), %rcx
	addq	$2024, %rsi             # imm = 0x7E8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	jmp	.LBB410_4
.LBB410_3:
	leaq	.Ltmp1250(%rip), %r9
	movl	$1, %edx
	movq	%rdi, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_wait_and_set_next_state(%rip)
.LBB410_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_350;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_350
	.align	16, 0x90
_execute_350:                           # @_execute_350
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$216, %rsp
	movq	%rdx, %rdi
	leaq	2056(%rdi), %rsi
	.align	16, 0x90
.LBB411_1:                              # =>This Inner Loop Header: Depth=1
	movl	$37, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	2096(%rdi), %rax
	testq	%rax, %rax
	je	.LBB411_4
# BB#2:                                 #   in Loop: Header=BB411_1 Depth=1
	jmpq	*%rax
.Ltmp1254:                              # Block address taken
.LBB411_6:
	movb	$0, 2176(%rdi)
	leaq	.Ltmp1255(%rip), %r9
	jmp	.LBB411_56
.Ltmp1255:                              # Block address taken
.LBB411_7:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %ecx
	xorl	ng8(%rip), %ecx
	movl	ng7+4(%rip), %ebx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB411_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB411_9
# BB#57:
	movl	$1, -28(%rbp)
.LBB411_9:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_10
# BB#58:
	movl	$1, -40(%rbp)
	jmp	.LBB411_11
.Ltmp1256:                              # Block address taken
.LBB411_3:
	movl	$1, %ecx
	movl	$10485911, %edx         # imm = 0xA00097
	callq	*__imp__iki_vlog_finish(%rip)
	jmp	.LBB411_4
.LBB411_10:
	testl	%eax, %eax
	je	.LBB411_11
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB411_11:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB411_13
# BB#12:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB411_13:
	testb	%al, %al
	je	.LBB411_14
# BB#60:
	leaq	ng64(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_less(%rip)
	movq	%rax, %rbx
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB411_61
# BB#70:
	movl	$1, -72(%rbp)
	jmp	.LBB411_62
.LBB411_14:
	leaq	-128(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB411_15
.LBB411_61:
	testl	%eax, %eax
	je	.LBB411_62
# BB#71:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB411_62:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB411_64
# BB#63:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB411_64:
	testb	%al, %al
	je	.LBB411_65
# BB#72:
	leaq	ng65(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	ng64(%rip), %r8
	leaq	-96(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_greater(%rip)
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB411_73
# BB#76:
	movl	$1, -104(%rbp)
	jmp	.LBB411_74
.LBB411_65:
	leaq	-112(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB411_66
.LBB411_73:
	testl	%eax, %eax
	je	.LBB411_74
# BB#77:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB411_74:
	movl	-72(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB411_66
# BB#75:
	orl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB411_66:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_67
# BB#78:
	movl	$1, -120(%rbp)
	jmp	.LBB411_68
.LBB411_67:
	testl	%eax, %eax
	je	.LBB411_68
# BB#79:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB411_68:
	movl	-40(%rbp), %eax
	orl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB411_15
# BB#69:
	orl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-124(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -124(%rbp)
.LBB411_15:
	movl	-124(%rbp), %eax
	notl	%eax
	testl	-128(%rbp), %eax
	je	.LBB411_16
# BB#80:
	movq	ng66(%rip), %r9
	leaq	1752(%rdi), %rax
	leaq	1768(%rdi), %rcx
	movq	%rcx, 80(%rsp)
	movq	%rax, 56(%rsp)
	movq	%rdi, 40(%rsp)
	movl	$64, 88(%rsp)
	movl	$118, 72(%rsp)
	movl	$48, 64(%rsp)
	movl	$118, 48(%rsp)
	movl	$3, 32(%rsp)
	movl	$1, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlogfile_write(%rip)
	leaq	936(%rdi), %rcx
	leaq	2312(%rdi), %rdx
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB411_16:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %ecx
	xorl	ng8(%rip), %ecx
	movl	ng7+4(%rip), %ebx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB411_18
# BB#17:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB411_18
# BB#81:
	movl	$1, -28(%rbp)
.LBB411_18:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_19
# BB#82:
	movl	$1, -40(%rbp)
	jmp	.LBB411_20
.LBB411_19:
	testl	%eax, %eax
	je	.LBB411_20
# BB#83:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB411_20:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB411_22
# BB#21:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB411_22:
	testb	%al, %al
	je	.LBB411_23
# BB#84:
	leaq	ng64(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_less(%rip)
	movq	%rax, %rbx
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB411_85
# BB#94:
	movl	$1, -72(%rbp)
	jmp	.LBB411_86
.LBB411_23:
	leaq	-128(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB411_24
.LBB411_85:
	testl	%eax, %eax
	je	.LBB411_86
# BB#95:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB411_86:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB411_88
# BB#87:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB411_88:
	testb	%al, %al
	je	.LBB411_89
# BB#96:
	leaq	ng65(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	ng64(%rip), %r8
	leaq	-96(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_greater(%rip)
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB411_97
# BB#100:
	movl	$1, -104(%rbp)
	jmp	.LBB411_98
.LBB411_89:
	leaq	-112(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB411_90
.LBB411_97:
	testl	%eax, %eax
	je	.LBB411_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB411_98:
	movl	-72(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB411_90
# BB#99:
	orl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB411_90:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_91
# BB#102:
	movl	$1, -120(%rbp)
	jmp	.LBB411_92
.LBB411_91:
	testl	%eax, %eax
	je	.LBB411_92
# BB#103:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB411_92:
	movl	-40(%rbp), %eax
	orl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB411_24
# BB#93:
	orl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-124(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -124(%rbp)
.LBB411_24:
	movl	-124(%rbp), %eax
	notl	%eax
	testl	-128(%rbp), %eax
	je	.LBB411_25
# BB#104:
	movq	ng67(%rip), %r9
	leaq	1784(%rdi), %rax
	leaq	1800(%rdi), %rcx
	movq	%rcx, 80(%rsp)
	movq	%rax, 56(%rsp)
	movq	%rdi, 40(%rsp)
	movl	$64, 88(%rsp)
	movl	$118, 72(%rsp)
	movl	$48, 64(%rsp)
	movl	$118, 48(%rsp)
	movl	$3, 32(%rsp)
	movl	$1, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlogfile_write(%rip)
	leaq	936(%rdi), %rcx
	leaq	2312(%rdi), %rdx
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB411_25:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %ecx
	xorl	ng8(%rip), %ecx
	movl	ng7+4(%rip), %ebx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB411_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB411_27
# BB#105:
	movl	$1, -28(%rbp)
.LBB411_27:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_28
# BB#106:
	movl	$1, -40(%rbp)
	jmp	.LBB411_29
.LBB411_28:
	testl	%eax, %eax
	je	.LBB411_29
# BB#107:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB411_29:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB411_31
# BB#30:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB411_31:
	testb	%al, %al
	je	.LBB411_32
# BB#108:
	leaq	ng64(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_less(%rip)
	movq	%rax, %rbx
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB411_109
# BB#118:
	movl	$1, -72(%rbp)
	jmp	.LBB411_110
.LBB411_32:
	leaq	-128(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB411_33
.LBB411_109:
	testl	%eax, %eax
	je	.LBB411_110
# BB#119:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB411_110:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB411_112
# BB#111:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB411_112:
	testb	%al, %al
	je	.LBB411_113
# BB#120:
	leaq	ng65(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	ng64(%rip), %r8
	leaq	-96(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_greater(%rip)
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB411_121
# BB#124:
	movl	$1, -104(%rbp)
	jmp	.LBB411_122
.LBB411_113:
	leaq	-112(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB411_114
.LBB411_121:
	testl	%eax, %eax
	je	.LBB411_122
# BB#125:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB411_122:
	movl	-72(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB411_114
# BB#123:
	orl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB411_114:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_115
# BB#126:
	movl	$1, -120(%rbp)
	jmp	.LBB411_116
.LBB411_115:
	testl	%eax, %eax
	je	.LBB411_116
# BB#127:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB411_116:
	movl	-40(%rbp), %eax
	orl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB411_33
# BB#117:
	orl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-124(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -124(%rbp)
.LBB411_33:
	movl	-124(%rbp), %eax
	notl	%eax
	testl	-128(%rbp), %eax
	je	.LBB411_34
# BB#128:
	movq	ng68(%rip), %r9
	leaq	1816(%rdi), %rax
	leaq	1832(%rdi), %rcx
	movq	%rcx, 80(%rsp)
	movq	%rax, 56(%rsp)
	movq	%rdi, 40(%rsp)
	movl	$64, 88(%rsp)
	movl	$118, 72(%rsp)
	movl	$48, 64(%rsp)
	movl	$118, 48(%rsp)
	movl	$3, 32(%rsp)
	movl	$1, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlogfile_write(%rip)
	leaq	936(%rdi), %rcx
	leaq	2312(%rdi), %rdx
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB411_34:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %ecx
	xorl	ng8(%rip), %ecx
	movl	ng7+4(%rip), %ebx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB411_36
# BB#35:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB411_36
# BB#129:
	movl	$1, -28(%rbp)
.LBB411_36:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_37
# BB#130:
	movl	$1, -40(%rbp)
	jmp	.LBB411_38
.LBB411_37:
	testl	%eax, %eax
	je	.LBB411_38
# BB#131:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB411_38:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB411_40
# BB#39:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB411_40:
	testb	%al, %al
	je	.LBB411_41
# BB#132:
	leaq	ng64(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_less(%rip)
	movq	%rax, %rbx
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB411_133
# BB#142:
	movl	$1, -72(%rbp)
	jmp	.LBB411_134
.LBB411_41:
	leaq	-128(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB411_42
.LBB411_133:
	testl	%eax, %eax
	je	.LBB411_134
# BB#143:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB411_134:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB411_136
# BB#135:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB411_136:
	testb	%al, %al
	je	.LBB411_137
# BB#144:
	leaq	ng65(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	ng64(%rip), %r8
	leaq	-96(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_greater(%rip)
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB411_145
# BB#148:
	movl	$1, -104(%rbp)
	jmp	.LBB411_146
.LBB411_137:
	leaq	-112(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB411_138
.LBB411_145:
	testl	%eax, %eax
	je	.LBB411_146
# BB#149:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB411_146:
	movl	-72(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB411_138
# BB#147:
	orl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB411_138:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_139
# BB#150:
	movl	$1, -120(%rbp)
	jmp	.LBB411_140
.LBB411_139:
	testl	%eax, %eax
	je	.LBB411_140
# BB#151:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB411_140:
	movl	-40(%rbp), %eax
	orl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB411_42
# BB#141:
	orl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-124(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -124(%rbp)
.LBB411_42:
	movl	-124(%rbp), %eax
	notl	%eax
	testl	-128(%rbp), %eax
	je	.LBB411_43
# BB#152:
	movq	ng69(%rip), %r9
	leaq	1848(%rdi), %rax
	leaq	1864(%rdi), %rcx
	movq	%rcx, 80(%rsp)
	movq	%rax, 56(%rsp)
	movq	%rdi, 40(%rsp)
	movl	$64, 88(%rsp)
	movl	$118, 72(%rsp)
	movl	$48, 64(%rsp)
	movl	$118, 48(%rsp)
	movl	$3, 32(%rsp)
	movl	$1, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlogfile_write(%rip)
	leaq	936(%rdi), %rcx
	leaq	2312(%rdi), %rdx
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB411_43:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %ecx
	xorl	ng8(%rip), %ecx
	movl	ng7+4(%rip), %ebx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB411_45
# BB#44:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB411_45
# BB#153:
	movl	$1, -28(%rbp)
.LBB411_45:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_46
# BB#154:
	movl	$1, -40(%rbp)
	jmp	.LBB411_47
.LBB411_46:
	testl	%eax, %eax
	je	.LBB411_47
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB411_47:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB411_49
# BB#48:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB411_49:
	testb	%al, %al
	je	.LBB411_50
# BB#156:
	movq	__imp__iki_std_memset(%rip), %rbx
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*%rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*%rbx
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_157
# BB#166:
	movl	$1, -104(%rbp)
	jmp	.LBB411_158
.LBB411_50:
	leaq	-144(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB411_51
.LBB411_157:
	testl	%eax, %eax
	je	.LBB411_158
# BB#167:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB411_158:
	cmpl	$0, -104(%rbp)
	movb	$1, %al
	jne	.LBB411_160
# BB#159:
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB411_160:
	testb	%al, %al
	je	.LBB411_161
# BB#168:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %eax
	cmpl	ng8(%rip), %eax
	jne	.LBB411_174
# BB#169:
	movl	ng7+4(%rip), %eax
	cmpl	ng8+4(%rip), %eax
	je	.LBB411_170
.LBB411_174:
	movl	$1, -112(%rbp)
.LBB411_170:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_171
# BB#175:
	movl	$1, -120(%rbp)
	jmp	.LBB411_172
.LBB411_161:
	leaq	-128(%rbp), %rcx
	leaq	-104(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB411_162
.LBB411_171:
	testl	%eax, %eax
	je	.LBB411_172
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB411_172:
	movl	-104(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-100(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB411_162
# BB#173:
	orl	%eax, -128(%rbp)
	movl	-104(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-104(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB411_162:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB411_163
# BB#177:
	movl	$1, -136(%rbp)
	jmp	.LBB411_164
.LBB411_163:
	testl	%eax, %eax
	je	.LBB411_164
# BB#178:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB411_164:
	movl	-40(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-36(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB411_51
# BB#165:
	orl	%eax, -144(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB411_51:
	movl	-140(%rbp), %eax
	notl	%eax
	testl	-144(%rbp), %eax
	je	.LBB411_52
# BB#179:
	movq	ng70(%rip), %r9
	leaq	1880(%rdi), %rax
	leaq	1896(%rdi), %rcx
	movq	%rcx, 80(%rsp)
	movq	%rax, 56(%rsp)
	movq	%rdi, 40(%rsp)
	movl	$1, 88(%rsp)
	movl	$118, 72(%rsp)
	movl	$48, 64(%rsp)
	movl	$118, 48(%rsp)
	movl	$3, 32(%rsp)
	movl	$1, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlogfile_write(%rip)
	leaq	936(%rdi), %rcx
	leaq	2312(%rdi), %rdx
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB411_52:
	movq	944(%rdi), %rbx
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB411_54
# BB#53:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB411_54
# BB#180:
	movl	$1, -28(%rbp)
.LBB411_54:
	movl	-28(%rbp), %eax
	notl	%eax
	testl	-32(%rbp), %eax
	je	.LBB411_4
# BB#55:
	leaq	.Ltmp1256(%rip), %r9
.LBB411_56:
	movl	$1, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r8
	callq	*__imp__iki_vlog_wait_and_set_next_state(%rip)
	jmp	.LBB411_5
.LBB411_4:
	movb	$1, 2176(%rdi)
	leaq	.Ltmp1254(%rip), %rax
	movq	%rax, 2096(%rdi)
.LBB411_5:
	addq	$216, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_351;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_351
	.align	16, 0x90
_execute_351:                           # @_execute_351
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$38, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	1440(%rsi), %rcx
	leaq	2464(%rsi), %rdx
	movl	$63, 32(%rsp)
	leaq	ng64(%rip), %rdi
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	1496(%rsi), %rcx
	leaq	2496(%rsi), %rdx
	movl	$63, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	1552(%rsi), %rcx
	leaq	2528(%rsi), %rdx
	movl	$63, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	1608(%rsi), %rcx
	addq	$2560, %rsi             # imm = 0xA00
	movl	$63, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_352;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_352
	.align	16, 0x90
_execute_352:                           # @_execute_352
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$64, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB413_1:                              # =>This Inner Loop Header: Depth=1
	movl	$39, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	2632(%rsi), %rax
	testq	%rax, %rax
	je	.LBB413_28
# BB#2:                                 #   in Loop: Header=BB413_1 Depth=1
	jmpq	*%rax
.Ltmp1263:                              # Block address taken
.LBB413_3:
	movb	$0, 2712(%rsi)
	movq	1392(%rsi), %rax
	movl	4(%rax), %ecx
	notl	%ecx
	testl	(%rax), %ecx
	je	.LBB413_28
# BB#4:
	movq	1056(%rsi), %rax
	movq	1112(%rsi), %rdi
	cmpl	$63, (%rax)
	movb	$1, %cl
	movb	$1, %dl
	ja	.LBB413_6
# BB#5:                                 # %select.mid
	xorl	%edx, %edx
.LBB413_6:                              # %select.end
	testb	%dl, %dl
	movl	(%rax), %r14d
	jne	.LBB413_8
# BB#7:
	cmpl	$0, 4(%rax)
	setne	%cl
.LBB413_8:
	testb	%cl, %cl
	jne	.LBB413_10
# BB#9:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1440(%rsi), %rcx
	leaq	2720(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB413_10:
	movq	1056(%rsi), %rax
	movq	1168(%rsi), %rdi
	cmpl	$63, (%rax)
	movb	$1, %cl
	movb	$1, %dl
	ja	.LBB413_12
# BB#11:                                # %select.mid10
	xorl	%edx, %edx
.LBB413_12:                             # %select.end9
	testb	%dl, %dl
	movl	(%rax), %r14d
	jne	.LBB413_14
# BB#13:
	cmpl	$0, 4(%rax)
	setne	%cl
.LBB413_14:
	testb	%cl, %cl
	jne	.LBB413_16
# BB#15:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1496(%rsi), %rcx
	leaq	2760(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB413_16:
	movq	1056(%rsi), %rax
	movq	1224(%rsi), %rdi
	cmpl	$63, (%rax)
	movb	$1, %cl
	movb	$1, %dl
	ja	.LBB413_18
# BB#17:                                # %select.mid15
	xorl	%edx, %edx
.LBB413_18:                             # %select.end14
	testb	%dl, %dl
	movl	(%rax), %r14d
	jne	.LBB413_20
# BB#19:
	cmpl	$0, 4(%rax)
	setne	%cl
.LBB413_20:
	testb	%cl, %cl
	jne	.LBB413_22
# BB#21:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1552(%rsi), %rcx
	leaq	2800(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB413_22:
	movq	1056(%rsi), %rax
	movq	1280(%rsi), %rdi
	cmpl	$63, (%rax)
	movb	$1, %cl
	movb	$1, %dl
	ja	.LBB413_24
# BB#23:                                # %select.mid20
	xorl	%edx, %edx
.LBB413_24:                             # %select.end19
	testb	%dl, %dl
	movl	(%rax), %r14d
	jne	.LBB413_26
# BB#25:
	cmpl	$0, 4(%rax)
	setne	%cl
.LBB413_26:
	testb	%cl, %cl
	jne	.LBB413_28
# BB#27:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1608(%rsi), %rcx
	leaq	2840(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB413_28:
	movb	$1, 2712(%rsi)
	leaq	.Ltmp1263(%rip), %rax
	movq	%rax, 2632(%rsi)
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_258218;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258218
	.align	16, 0x90
_execute_258218:                        # @_execute_258218
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$112, %rsp
	movq	%rdx, %rsi
	movq	1448(%rsi), %rdi
	leaq	264(%rsi), %rcx
	movl	$6, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-24(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rdi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4592(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	40(%rsi), %rcx
	addq	$4568, %rsi             # imm = 0x11D8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$112, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258219;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258219
	.align	16, 0x90
_execute_258219:                        # @_execute_258219
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$112, %rsp
	movq	%rdx, %rsi
	movq	1504(%rsi), %rdi
	leaq	320(%rsi), %rcx
	movl	$6, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-24(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rdi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4760(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	96(%rsi), %rcx
	addq	$4736, %rsi             # imm = 0x1280
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$112, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258220;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258220
	.align	16, 0x90
_execute_258220:                        # @_execute_258220
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$112, %rsp
	movq	%rdx, %rsi
	movq	1560(%rsi), %rdi
	leaq	376(%rsi), %rcx
	movl	$6, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-24(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rdi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4928(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	152(%rsi), %rcx
	addq	$4904, %rsi             # imm = 0x1328
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$112, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258221;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258221
	.align	16, 0x90
_execute_258221:                        # @_execute_258221
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$120, %rsp
	movq	%rdx, %rsi
	movq	1616(%rsi), %r9
	movq	1056(%rsi), %rax
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$6, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-16(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	5096(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	208(%rsi), %rcx
	addq	$5072, %rsi             # imm = 0x13D0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$120, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_353;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_353
	.align	16, 0x90
_execute_353:                           # @_execute_353
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$40, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	824(%rsi), %rcx
	leaq	3000(%rsi), %rdx
	leaq	ng7(%rip), %rdi
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	880(%rsi), %rcx
	leaq	3032(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	936(%rsi), %rcx
	addq	$3064, %rsi             # imm = 0xBF8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258716;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258716
	.align	16, 0x90
_execute_258716:                        # @_execute_258716
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	1456(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	320(%rsi), %rcx
	addq	$1432, %rsi             # imm = 0x598
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258717;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258717
	.align	16, 0x90
_execute_258717:                        # @_execute_258717
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	1624(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$1600, %rsi             # imm = 0x640
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258718;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258718
	.align	16, 0x90
_execute_258718:                        # @_execute_258718
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	1792(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$1768, %rsi             # imm = 0x6E8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258719;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258719
	.align	16, 0x90
_execute_258719:                        # @_execute_258719
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	1960(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	488(%rsi), %rcx
	addq	$1936, %rsi             # imm = 0x790
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258720;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258720
	.align	16, 0x90
_execute_258720:                        # @_execute_258720
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	552(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	2128(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	40(%rsi), %rcx
	addq	$2104, %rsi             # imm = 0x838
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_584;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_584
	.align	16, 0x90
_execute_584:                           # @_execute_584
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$392, %rsp              # imm = 0x188
	movq	%rdx, %rsi
	leaq	760(%rsi), %r14
	.align	16, 0x90
.LBB424_1:                              # =>This Inner Loop Header: Depth=1
	movl	$41, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	800(%rsi), %rax
	testq	%rax, %rax
	je	.LBB424_17
# BB#2:                                 #   in Loop: Header=BB424_1 Depth=1
	jmpq	*%rax
.Ltmp1297:                              # Block address taken
.LBB424_3:
	movq	%r14, -264(%rbp)        # 8-byte Spill
	movb	$0, 880(%rsi)
	movq	328(%rsi), %rax
	movq	384(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB424_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB424_4:
	movq	440(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB424_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB424_5:
	movq	496(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB424_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB424_6:
	leaq	656(%rsi), %rbx
	leaq	888(%rsi), %rdx
	leaq	-80(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	664(%rsi), %rdi
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB424_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -64(%rbp)
	je	.LBB424_8
# BB#21:
	movl	$1, -60(%rbp)
.LBB424_8:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB424_9
# BB#22:
	movl	$1, -72(%rbp)
	jmp	.LBB424_10
.LBB424_9:
	testl	%eax, %eax
	je	.LBB424_10
# BB#23:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB424_10:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB424_12
# BB#11:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB424_12:
	testb	%al, %al
	je	.LBB424_13
# BB#24:
	movq	8(%rbx), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB424_26
# BB#25:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB424_26
# BB#30:
	movl	$1, -76(%rbp)
.LBB424_26:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB424_27
# BB#31:
	movl	$1, -88(%rbp)
	jmp	.LBB424_28
.LBB424_13:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB424_14
.LBB424_27:
	testl	%eax, %eax
	je	.LBB424_28
# BB#32:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB424_28:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB424_14
# BB#29:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB424_14:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB424_15
# BB#33:
	movq	328(%rsi), %rax
	movq	384(%rsi), %rcx
	movq	440(%rsi), %rdx
	movq	496(%rsi), %rbx
	movq	%rax, 80(%rsp)
	movq	%rcx, 64(%rsp)
	movq	%rdx, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-112(%rbp), %rdi
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	720(%rsi), %r9
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$4, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$15, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	600(%rsi), %rcx
	leaq	952(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB424_16
.LBB424_15:
	leaq	2704(%rsi), %rdi
	movq	%rdi, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movl	$167170768, %ecx        # imm = 0x9F6D2D0
	movl	$152, %r8d
	movq	%rdi, %rdx
	callq	*%rbx
	movq	%rax, -312(%rbp)        # 8-byte Spill
	movl	$167170768, %ecx        # imm = 0x9F6D2D0
	movl	$152, %r8d
	movq	%rdi, %rdx
	movq	%rdi, %r14
	callq	*%rbx
	movq	%rax, %r13
	movl	$1, -128(%rbp)
	movl	$15, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	752(%rsi), %r9
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng71(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %r15
	movl	$1, %edx
	movl	$4, %r8d
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	328(%rsi), %rax
	movq	384(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-80(%rbp), %rdi
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rbx, %r12
	leaq	2592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	1240(%rsi), %rdx
	movq	%rdx, -304(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rbx
	leaq	2648(%rsi), %rcx
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	leaq	1272(%rsi), %rdx
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	movq	%rbx, %rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_8d8d44e_cbb4f06c_79(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	2536(%rsi), %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r15
	leaq	-88(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%r15, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	840(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167170768, %ecx        # imm = 0x9F6D2D0
	movl	$152, %r8d
	movq	%r14, %r15
	movq	%r15, %rdx
	movq	__imp__iki_initialize_function_call(%rip), %r13
	callq	*%r13
	movq	%rax, -328(%rbp)        # 8-byte Spill
	movl	$1, -144(%rbp)
	movl	$15, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	744(%rsi), %r9
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng73(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %r14
	movl	$1, %edx
	movl	$4, %r8d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	328(%rsi), %rax
	movq	384(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rbx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%r14, %r8
	callq	*%rdi
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-296(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_8d8d44e_cbb4f06c_79(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-280(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	leaq	-112(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	840(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167170768, %ecx        # imm = 0x9F6D2D0
	movl	$152, %r8d
	movq	%r15, %rdx
	callq	*%r13
	movq	%rax, -328(%rbp)        # 8-byte Spill
	movl	$1, -176(%rbp)
	movl	$15, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	736(%rsi), %r9
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng74(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %r14
	movl	$1, %edx
	movl	$4, %r8d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	328(%rsi), %rax
	movq	384(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %r13
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	%r12, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-296(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rcx
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_8d8d44e_cbb4f06c_79(%rip), %r13
	movq	%r13, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-280(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r12
	callq	*%r12
	movq	%rax, %rdi
	leaq	-192(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	840(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167170768, %ecx        # imm = 0x9F6D2D0
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$1, -224(%rbp)
	movl	$15, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	728(%rsi), %r9
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng75(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rbx
	movl	$1, %edx
	movl	$4, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	328(%rsi), %rax
	movq	384(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rdi
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %rcx
	movq	-304(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	callq	*%rbx
	movq	%rbx, %r14
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-280(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rcx
	callq	*%r12
	movq	%rax, %rdi
	leaq	-240(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	movq	__imp__iki_std_memset(%rip), %r12
	callq	*%r12
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	840(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %r15
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %rdi
	callq	*%rdi
	movq	440(%rsi), %rax
	movq	496(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rbx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-304(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-296(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r14
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_8d8d44e_cbb4f06c_79(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	leaq	-256(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*%r12
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	840(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	leaq	600(%rsi), %rcx
	leaq	952(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
.LBB424_16:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB424_17:
	movb	$1, 880(%rsi)
	leaq	.Ltmp1297(%rip), %rax
	movq	%rax, 800(%rsi)
	addq	$392, %rsp              # imm = 0x188
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_8d8d44e_cbb4f06c_79;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_8d8d44e_cbb4f06c_79
	.align	16, 0x90
_subprog_m_8d8d44e_cbb4f06c_79:         # @_subprog_m_8d8d44e_cbb4f06c_79
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$264, %rsp              # imm = 0x108
	leaq	2648(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_2
# BB#1:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB425_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB425_2:
	movl	(%rdi), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rdi), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB425_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB425_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB425_5
.LBB425_4:
	testl	%eax, %eax
	je	.LBB425_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB425_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB425_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB425_7:
	testb	%al, %al
	je	.LBB425_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_70
# BB#69:
	testl	%ebx, %ebx
	movl	$1, -120(%rbp)
	je	.LBB425_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB425_70:
	movl	(%rdi), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rdi), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB425_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB425_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_72
# BB#77:
	movq	%r15, -208(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB425_73
.LBB425_8:
	movq	%r15, -208(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB425_9
.LBB425_72:
	movq	%r15, -208(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB425_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB425_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB425_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB425_9:
	movl	-144(%rbp), %ebx
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	2592(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rdi
	testl	%r13d, %ebx
	je	.LBB425_10
# BB#79:
	movl	$2, %edx
	movq	-208(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rdi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	2536(%r12), %rcx
	addq	$2504, %r12             # imm = 0x9C8
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB425_63
.LBB425_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rdi, %rdx
	callq	*%r14
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movl	(%rdi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rdi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB425_11
# BB#80:
	orl	%ecx, -80(%rbp)
.LBB425_11:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-80(%rbp), %ecx
	movl	-76(%rbp), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_13
# BB#12:
	testl	%ebx, %ebx
	movl	$1, -88(%rbp)
	je	.LBB425_13
# BB#81:
	movl	$1, -84(%rbp)
.LBB425_13:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_14
# BB#82:
	movl	$1, -96(%rbp)
	jmp	.LBB425_15
.LBB425_14:
	testl	%eax, %eax
	je	.LBB425_15
# BB#83:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB425_15:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB425_17
# BB#16:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB425_17:
	testb	%al, %al
	je	.LBB425_18
# BB#84:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movl	(%rdi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -120(%rbp)
	movl	4(%rdi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -116(%rbp)
	je	.LBB425_85
# BB#91:
	orl	%ecx, -120(%rbp)
.LBB425_85:
	leaq	-128(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-120(%rbp), %ecx
	movl	-116(%rbp), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_87
# BB#86:
	testl	%ebx, %ebx
	movl	$1, -128(%rbp)
	je	.LBB425_87
# BB#92:
	movl	$1, -124(%rbp)
.LBB425_87:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_88
# BB#93:
	movl	$1, -136(%rbp)
	jmp	.LBB425_89
.LBB425_18:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB425_19
.LBB425_88:
	testl	%eax, %eax
	je	.LBB425_89
# BB#94:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB425_89:
	movl	-96(%rbp), %eax
	andl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB425_19
# BB#90:
	orl	%eax, -144(%rbp)
	movl	-96(%rbp), %eax
	movl	-92(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-140(%rbp), %ecx
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -140(%rbp)
	movl	-96(%rbp), %eax
	movl	-92(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -144(%rbp)
.LBB425_19:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	movq	-208(%rbp), %r15        # 8-byte Reload
	je	.LBB425_20
# BB#95:
	movl	$1, -152(%rbp)
	jmp	.LBB425_21
.LBB425_20:
	testl	%eax, %eax
	je	.LBB425_21
# BB#96:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB425_21:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB425_23
# BB#22:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB425_23:
	testb	%al, %al
	je	.LBB425_24
# BB#97:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-160(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	(%rax), %ecx
	movl	4(%rax), %eax
	movl	%edi, %ebx
	orl	%eax, %ebx
	orl	%ecx, %ebx
	orl	%eax, %edi
	cmovel	%ecx, %ebx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	xorl	ng24(%rip), %ebx
	movl	ng24+4(%rip), %eax
	movl	%edi, %ecx
	xorl	%eax, %ecx
	orl	%ebx, %ecx
	orl	%eax, %edi
	movl	%edi, %eax
	notl	%eax
	testl	%eax, %ecx
	jne	.LBB425_99
# BB#98:
	testl	%edi, %edi
	movl	$1, -176(%rbp)
	je	.LBB425_99
# BB#103:
	movl	$1, -172(%rbp)
.LBB425_99:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_100
# BB#104:
	movl	$1, -184(%rbp)
	jmp	.LBB425_101
.LBB425_24:
	leaq	-192(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -192(%rbp)
	andl	$1, -188(%rbp)
	jmp	.LBB425_25
.LBB425_100:
	testl	%eax, %eax
	je	.LBB425_101
# BB#105:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB425_101:
	movl	-152(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -192(%rbp)
	movl	-148(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -188(%rbp)
	je	.LBB425_25
# BB#102:
	orl	%eax, -192(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-188(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -188(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-192(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -192(%rbp)
.LBB425_25:
	movl	-188(%rbp), %eax
	notl	%eax
	testl	-192(%rbp), %eax
	je	.LBB425_26
# BB#106:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-200(%rbp), %rcx
	jmp	.LBB425_107
.LBB425_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB425_28
# BB#110:
	movl	$1, -68(%rbp)
.LBB425_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_29
# BB#111:
	movl	$1, -80(%rbp)
	jmp	.LBB425_30
.LBB425_29:
	testl	%eax, %eax
	je	.LBB425_30
# BB#112:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB425_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB425_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB425_32:
	testb	%al, %al
	je	.LBB425_33
# BB#113:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	(%rbx), %ecx
	movl	4(%rbx), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_115
# BB#114:
	testl	%edi, %edi
	movl	$1, -104(%rbp)
	je	.LBB425_115
# BB#119:
	movl	$1, -100(%rbp)
.LBB425_115:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_116
# BB#120:
	movl	$1, -112(%rbp)
	jmp	.LBB425_117
.LBB425_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB425_34
.LBB425_116:
	testl	%eax, %eax
	je	.LBB425_117
# BB#121:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB425_117:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB425_34
# BB#118:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB425_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB425_147
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB425_37
# BB#122:
	movl	$1, -68(%rbp)
.LBB425_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_38
# BB#123:
	movl	$1, -80(%rbp)
	jmp	.LBB425_39
.LBB425_38:
	testl	%eax, %eax
	je	.LBB425_39
# BB#124:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB425_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB425_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB425_41:
	testb	%al, %al
	je	.LBB425_42
# BB#125:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	(%rbx), %ecx
	movl	4(%rbx), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_127
# BB#126:
	testl	%edi, %edi
	movl	$1, -104(%rbp)
	je	.LBB425_127
# BB#131:
	movl	$1, -100(%rbp)
.LBB425_127:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_128
# BB#132:
	movl	$1, -112(%rbp)
	jmp	.LBB425_129
.LBB425_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB425_43
.LBB425_128:
	testl	%eax, %eax
	je	.LBB425_129
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB425_129:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB425_43
# BB#130:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB425_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB425_44
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB425_108
.LBB425_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB425_46
# BB#135:
	movl	$1, -68(%rbp)
.LBB425_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_47
# BB#136:
	movl	$1, -80(%rbp)
	jmp	.LBB425_48
.LBB425_47:
	testl	%eax, %eax
	je	.LBB425_48
# BB#137:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB425_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB425_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB425_50:
	testb	%al, %al
	je	.LBB425_51
# BB#138:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	(%rbx), %ecx
	movl	4(%rbx), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_140
# BB#139:
	testl	%edi, %edi
	movl	$1, -104(%rbp)
	je	.LBB425_140
# BB#144:
	movl	$1, -100(%rbp)
.LBB425_140:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_141
# BB#145:
	movl	$1, -112(%rbp)
	jmp	.LBB425_142
.LBB425_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB425_52
.LBB425_141:
	testl	%eax, %eax
	je	.LBB425_142
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB425_142:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB425_52
# BB#143:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB425_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB425_53
.LBB425_147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB425_107:
	xorl	%r8d, %r8d
.LBB425_108:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	2536(%rdx), %rcx
	addq	$2504, %rdx             # imm = 0x9C8
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB425_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$264, %rsp              # imm = 0x108
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB425_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB425_55
# BB#148:
	movl	$1, -68(%rbp)
.LBB425_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_56
# BB#149:
	movl	$1, -80(%rbp)
	jmp	.LBB425_57
.LBB425_56:
	testl	%eax, %eax
	je	.LBB425_57
# BB#150:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB425_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB425_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB425_59:
	testb	%al, %al
	je	.LBB425_60
# BB#151:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	(%rbx), %ecx
	movl	4(%rbx), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB425_153
# BB#152:
	testl	%edi, %edi
	movl	$1, -104(%rbp)
	je	.LBB425_153
# BB#157:
	movl	$1, -100(%rbp)
.LBB425_153:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB425_154
# BB#158:
	movl	$1, -112(%rbp)
	jmp	.LBB425_155
.LBB425_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB425_61
.LBB425_154:
	testl	%eax, %eax
	je	.LBB425_155
# BB#159:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB425_155:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB425_61
# BB#156:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB425_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB425_62
# BB#160:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB425_108
.LBB425_62:
	movq	%r12, %rdx
	leaq	2536(%rdx), %rcx
	addq	$2504, %rdx             # imm = 0x9C8
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB425_63

	.def	 _execute_258774;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258774
	.align	16, 0x90
_execute_258774:                        # @_execute_258774
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258775;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258775
	.align	16, 0x90
_execute_258775:                        # @_execute_258775
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258776;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258776
	.align	16, 0x90
_execute_258776:                        # @_execute_258776
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258777;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258777
	.align	16, 0x90
_execute_258777:                        # @_execute_258777
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258778;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258778
	.align	16, 0x90
_execute_258778:                        # @_execute_258778
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258779;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258779
	.align	16, 0x90
_execute_258779:                        # @_execute_258779
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258780;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258780
	.align	16, 0x90
_execute_258780:                        # @_execute_258780
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258781;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258781
	.align	16, 0x90
_execute_258781:                        # @_execute_258781
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_605;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_605
	.align	16, 0x90
_execute_605:                           # @_execute_605
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$42, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_606;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_606
	.align	16, 0x90
_execute_606:                           # @_execute_606
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB435_1:                              # =>This Inner Loop Header: Depth=1
	movl	$43, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB435_29
# BB#2:                                 #   in Loop: Header=BB435_1 Depth=1
	jmpq	*%rax
.Ltmp1331:                              # Block address taken
.LBB435_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB435_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB435_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB435_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB435_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB435_32
.LBB435_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB435_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB435_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB435_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB435_9
# BB#34:
	movq	664(%rsi), %r8
.LBB435_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB435_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB435_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1331(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB435_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB435_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB435_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB435_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB435_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB435_13
.LBB435_12:
	testl	%eax, %eax
	je	.LBB435_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB435_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB435_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB435_15:
	testb	%al, %al
	je	.LBB435_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB435_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB435_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB435_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB435_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB435_42
.LBB435_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB435_17
.LBB435_41:
	testl	%eax, %eax
	je	.LBB435_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB435_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB435_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB435_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB435_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB435_28
.LBB435_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB435_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB435_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB435_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB435_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB435_22
.LBB435_21:
	testl	%eax, %eax
	je	.LBB435_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB435_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB435_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB435_24:
	testb	%al, %al
	je	.LBB435_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB435_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB435_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB435_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB435_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB435_55
.LBB435_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB435_26
.LBB435_54:
	testl	%eax, %eax
	je	.LBB435_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB435_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB435_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB435_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB435_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB435_28
.LBB435_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB435_28

	.def	 _execute_607;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_607
	.align	16, 0x90
_execute_607:                           # @_execute_607
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB436_1:                              # =>This Inner Loop Header: Depth=1
	movl	$44, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB436_17
# BB#2:                                 #   in Loop: Header=BB436_1 Depth=1
	jmpq	*%rax
.Ltmp1335:                              # Block address taken
.LBB436_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB436_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB436_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB436_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB436_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB436_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB436_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB436_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB436_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB436_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB436_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB436_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB436_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB436_11
.LBB436_10:
	testl	%eax, %eax
	je	.LBB436_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB436_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB436_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB436_13:
	testb	%al, %al
	je	.LBB436_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB436_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB436_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB436_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB436_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB436_29
.LBB436_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB436_15
.LBB436_28:
	testl	%eax, %eax
	je	.LBB436_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB436_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB436_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB436_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB436_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB436_17
.LBB436_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167179976, %ecx        # imm = 0x9F6F6C8
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167175416, %ecx        # imm = 0x9F6E4F8
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_2d691cdb_84(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175416, %ecx        # imm = 0x9F6E4F8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_2d691cdb_84(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175416, %ecx        # imm = 0x9F6E4F8
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_2d691cdb_84(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175416, %ecx        # imm = 0x9F6E4F8
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_2d691cdb_84(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_2d691cdb_85(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167179976, %ecx        # imm = 0x9F6F6C8
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167175416, %ecx        # imm = 0x9F6E4F8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_2d691cdb_84(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175416, %ecx        # imm = 0x9F6E4F8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_2d691cdb_84(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167175416, %ecx        # imm = 0x9F6E4F8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167175416, %ecx        # imm = 0x9F6E4F8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_2d691cdb_84(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_2d691cdb_85(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB436_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1335(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_2d691cdb_84;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_2d691cdb_84
	.align	16, 0x90
_subprog_m_7ddf9423_2d691cdb_84:        # @_subprog_m_7ddf9423_2d691cdb_84
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB437_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB437_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB437_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB437_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB437_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB437_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB437_6
.LBB437_5:
	testl	%eax, %eax
	je	.LBB437_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB437_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB437_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB437_8:
	testb	%al, %al
	je	.LBB437_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB437_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB437_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB437_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB437_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB437_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB437_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB437_160
.LBB437_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB437_10
.LBB437_159:
	testl	%eax, %eax
	je	.LBB437_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB437_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB437_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB437_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB437_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB437_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB437_148
.LBB437_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB437_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB437_13
.LBB437_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB437_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB437_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB437_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB437_148
.LBB437_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB437_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB437_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB437_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB437_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB437_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB437_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB437_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB437_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB437_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB437_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB437_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB437_23
.LBB437_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB437_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB437_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB437_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB437_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB437_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB437_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB437_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB437_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB437_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB437_182
.LBB437_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB437_27
.LBB437_181:
	testl	%eax, %eax
	je	.LBB437_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB437_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB437_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB437_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB437_29
.LBB437_28:
	testl	%eax, %eax
	je	.LBB437_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB437_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB437_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB437_31:
	testb	%al, %al
	je	.LBB437_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB437_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB437_195
.LBB437_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB437_33
.LBB437_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB437_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB437_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB437_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB437_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB437_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB437_228
.LBB437_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB437_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB437_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB437_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB437_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB437_39
.LBB437_38:
	testl	%eax, %eax
	je	.LBB437_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB437_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB437_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB437_41:
	testb	%al, %al
	je	.LBB437_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB437_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB437_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB437_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB437_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB437_209
.LBB437_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB437_43
.LBB437_208:
	testl	%eax, %eax
	je	.LBB437_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB437_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB437_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB437_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB437_45
.LBB437_44:
	testl	%eax, %eax
	je	.LBB437_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB437_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB437_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB437_47:
	testb	%al, %al
	je	.LBB437_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB437_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB437_222
.LBB437_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB437_49
.LBB437_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB437_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB437_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB437_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB437_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB437_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB437_227
.LBB437_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB437_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB437_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB437_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB437_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB437_55
.LBB437_54:
	testl	%eax, %eax
	je	.LBB437_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB437_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB437_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB437_57:
	testb	%al, %al
	je	.LBB437_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB437_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB437_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB437_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB437_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB437_240
.LBB437_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB437_59
.LBB437_239:
	testl	%eax, %eax
	je	.LBB437_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB437_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB437_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB437_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB437_61
.LBB437_60:
	testl	%eax, %eax
	je	.LBB437_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB437_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB437_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB437_63:
	testb	%al, %al
	je	.LBB437_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB437_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB437_253
.LBB437_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB437_65
.LBB437_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB437_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB437_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB437_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB437_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB437_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB437_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB437_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB437_229
.LBB437_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB437_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB437_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB437_70
.LBB437_69:
	testl	%eax, %eax
	je	.LBB437_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB437_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB437_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB437_72:
	testb	%al, %al
	je	.LBB437_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB437_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB437_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB437_265
.LBB437_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB437_74
.LBB437_264:
	testl	%eax, %eax
	je	.LBB437_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB437_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB437_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB437_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB437_76
.LBB437_75:
	testl	%eax, %eax
	je	.LBB437_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB437_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB437_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB437_78:
	testb	%al, %al
	je	.LBB437_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB437_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB437_277
.LBB437_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB437_80
.LBB437_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB437_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB437_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB437_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB437_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB437_82
.LBB437_81:
	testl	%eax, %eax
	je	.LBB437_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB437_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB437_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB437_84:
	testb	%al, %al
	je	.LBB437_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB437_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB437_288
.LBB437_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB437_86
.LBB437_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB437_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB437_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB437_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB437_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB437_88
.LBB437_87:
	testl	%eax, %eax
	je	.LBB437_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB437_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB437_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB437_90:
	testb	%al, %al
	je	.LBB437_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB437_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB437_299
.LBB437_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB437_92
.LBB437_298:
	testl	%eax, %eax
	je	.LBB437_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB437_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB437_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB437_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB437_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB437_351
.LBB437_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB437_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB437_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB437_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB437_97
.LBB437_96:
	testl	%eax, %eax
	je	.LBB437_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB437_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB437_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB437_99:
	testb	%al, %al
	je	.LBB437_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB437_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB437_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB437_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB437_311
.LBB437_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB437_101
.LBB437_310:
	testl	%eax, %eax
	je	.LBB437_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB437_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB437_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB437_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB437_103
.LBB437_102:
	testl	%eax, %eax
	je	.LBB437_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB437_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB437_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB437_105:
	testb	%al, %al
	je	.LBB437_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB437_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB437_323
.LBB437_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB437_107
.LBB437_322:
	testl	%eax, %eax
	je	.LBB437_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB437_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB437_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB437_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB437_109
.LBB437_108:
	testl	%eax, %eax
	je	.LBB437_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB437_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB437_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB437_111:
	testb	%al, %al
	je	.LBB437_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB437_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB437_334
.LBB437_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB437_113
.LBB437_333:
	testl	%eax, %eax
	je	.LBB437_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB437_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB437_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB437_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB437_115
.LBB437_114:
	testl	%eax, %eax
	je	.LBB437_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB437_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB437_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB437_117:
	testb	%al, %al
	je	.LBB437_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB437_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB437_345
.LBB437_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB437_119
.LBB437_344:
	testl	%eax, %eax
	je	.LBB437_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB437_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB437_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB437_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB437_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB437_350
.LBB437_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB437_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB437_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB437_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB437_124
.LBB437_123:
	testl	%eax, %eax
	je	.LBB437_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB437_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB437_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB437_126:
	testb	%al, %al
	je	.LBB437_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB437_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB437_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB437_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB437_359
.LBB437_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB437_128
.LBB437_358:
	testl	%eax, %eax
	je	.LBB437_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB437_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB437_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB437_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB437_130
.LBB437_129:
	testl	%eax, %eax
	je	.LBB437_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB437_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB437_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB437_132:
	testb	%al, %al
	je	.LBB437_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB437_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB437_371
.LBB437_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB437_134
.LBB437_370:
	testl	%eax, %eax
	je	.LBB437_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB437_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB437_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB437_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB437_136
.LBB437_135:
	testl	%eax, %eax
	je	.LBB437_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB437_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB437_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB437_138:
	testb	%al, %al
	je	.LBB437_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB437_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB437_382
.LBB437_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB437_140
.LBB437_381:
	testl	%eax, %eax
	je	.LBB437_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB437_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB437_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB437_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB437_142
.LBB437_141:
	testl	%eax, %eax
	je	.LBB437_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB437_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB437_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB437_144:
	testb	%al, %al
	je	.LBB437_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB437_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB437_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB437_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB437_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB437_393
.LBB437_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB437_146
.LBB437_392:
	testl	%eax, %eax
	je	.LBB437_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB437_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB437_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB437_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB437_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB437_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB437_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB437_148
.LBB437_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB437_148

	.def	 _subprog_m_7ddf9423_2d691cdb_85;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_2d691cdb_85
	.align	16, 0x90
_subprog_m_7ddf9423_2d691cdb_85:        # @_subprog_m_7ddf9423_2d691cdb_85
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB438_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB438_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB438_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB438_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB438_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB438_5
.LBB438_4:
	testl	%eax, %eax
	je	.LBB438_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB438_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB438_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB438_7:
	testb	%al, %al
	je	.LBB438_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB438_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB438_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB438_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB438_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB438_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB438_73
.LBB438_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB438_9
.LBB438_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB438_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB438_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB438_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB438_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB438_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB438_63
.LBB438_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB438_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB438_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB438_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB438_15
.LBB438_14:
	testl	%eax, %eax
	je	.LBB438_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB438_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB438_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB438_17:
	testb	%al, %al
	je	.LBB438_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB438_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB438_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB438_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB438_87
.LBB438_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB438_19
.LBB438_86:
	testl	%eax, %eax
	je	.LBB438_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB438_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB438_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB438_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB438_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB438_21
.LBB438_20:
	testl	%eax, %eax
	je	.LBB438_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB438_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB438_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB438_23:
	testb	%al, %al
	je	.LBB438_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB438_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB438_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB438_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB438_98
.LBB438_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB438_25
.LBB438_97:
	testl	%eax, %eax
	je	.LBB438_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB438_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB438_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB438_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB438_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB438_103
.LBB438_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB438_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB438_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB438_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB438_30
.LBB438_29:
	testl	%eax, %eax
	je	.LBB438_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB438_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB438_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB438_32:
	testb	%al, %al
	je	.LBB438_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB438_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB438_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB438_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB438_114
.LBB438_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB438_34
.LBB438_113:
	testl	%eax, %eax
	je	.LBB438_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB438_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB438_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB438_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB438_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB438_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB438_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB438_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB438_39
.LBB438_38:
	testl	%eax, %eax
	je	.LBB438_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB438_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB438_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB438_41:
	testb	%al, %al
	je	.LBB438_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB438_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB438_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB438_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB438_126
.LBB438_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB438_43
.LBB438_125:
	testl	%eax, %eax
	je	.LBB438_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB438_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB438_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB438_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB438_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB438_104
.LBB438_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB438_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB438_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB438_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB438_48
.LBB438_47:
	testl	%eax, %eax
	je	.LBB438_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB438_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB438_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB438_50:
	testb	%al, %al
	je	.LBB438_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB438_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB438_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB438_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB438_139
.LBB438_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB438_52
.LBB438_138:
	testl	%eax, %eax
	je	.LBB438_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB438_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB438_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB438_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB438_53
.LBB438_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB438_103:
	xorl	%r8d, %r8d
.LBB438_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB438_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB438_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB438_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB438_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB438_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB438_57
.LBB438_56:
	testl	%eax, %eax
	je	.LBB438_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB438_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB438_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB438_59:
	testb	%al, %al
	je	.LBB438_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB438_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB438_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB438_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB438_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB438_152
.LBB438_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB438_61
.LBB438_151:
	testl	%eax, %eax
	je	.LBB438_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB438_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB438_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB438_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB438_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB438_104
.LBB438_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB438_63

	.def	 _execute_610;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_610
	.align	16, 0x90
_execute_610:                           # @_execute_610
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$45, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng78(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258832;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258832
	.align	16, 0x90
_execute_258832:                        # @_execute_258832
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258833;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258833
	.align	16, 0x90
_execute_258833:                        # @_execute_258833
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258834;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258834
	.align	16, 0x90
_execute_258834:                        # @_execute_258834
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258835;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258835
	.align	16, 0x90
_execute_258835:                        # @_execute_258835
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258836;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258836
	.align	16, 0x90
_execute_258836:                        # @_execute_258836
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258837;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258837
	.align	16, 0x90
_execute_258837:                        # @_execute_258837
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258838;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258838
	.align	16, 0x90
_execute_258838:                        # @_execute_258838
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258839;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258839
	.align	16, 0x90
_execute_258839:                        # @_execute_258839
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_630;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_630
	.align	16, 0x90
_execute_630:                           # @_execute_630
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$46, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_631;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_631
	.align	16, 0x90
_execute_631:                           # @_execute_631
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB449_1:                              # =>This Inner Loop Header: Depth=1
	movl	$47, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB449_29
# BB#2:                                 #   in Loop: Header=BB449_1 Depth=1
	jmpq	*%rax
.Ltmp1375:                              # Block address taken
.LBB449_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB449_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB449_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB449_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB449_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB449_32
.LBB449_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB449_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB449_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB449_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB449_9
# BB#34:
	movq	664(%rsi), %r8
.LBB449_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB449_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB449_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1375(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB449_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB449_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB449_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB449_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB449_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB449_13
.LBB449_12:
	testl	%eax, %eax
	je	.LBB449_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB449_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB449_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB449_15:
	testb	%al, %al
	je	.LBB449_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB449_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB449_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB449_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB449_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB449_42
.LBB449_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB449_17
.LBB449_41:
	testl	%eax, %eax
	je	.LBB449_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB449_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB449_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB449_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB449_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB449_28
.LBB449_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB449_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB449_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB449_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB449_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB449_22
.LBB449_21:
	testl	%eax, %eax
	je	.LBB449_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB449_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB449_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB449_24:
	testb	%al, %al
	je	.LBB449_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB449_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB449_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB449_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB449_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB449_55
.LBB449_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB449_26
.LBB449_54:
	testl	%eax, %eax
	je	.LBB449_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB449_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB449_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB449_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB449_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB449_28
.LBB449_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB449_28

	.def	 _execute_632;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_632
	.align	16, 0x90
_execute_632:                           # @_execute_632
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB450_1:                              # =>This Inner Loop Header: Depth=1
	movl	$48, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB450_17
# BB#2:                                 #   in Loop: Header=BB450_1 Depth=1
	jmpq	*%rax
.Ltmp1379:                              # Block address taken
.LBB450_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB450_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB450_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB450_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB450_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB450_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB450_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB450_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB450_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB450_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB450_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB450_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB450_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB450_11
.LBB450_10:
	testl	%eax, %eax
	je	.LBB450_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB450_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB450_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB450_13:
	testb	%al, %al
	je	.LBB450_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB450_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB450_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB450_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB450_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB450_29
.LBB450_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB450_15
.LBB450_28:
	testl	%eax, %eax
	je	.LBB450_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB450_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB450_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB450_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB450_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB450_17
.LBB450_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167179520, %ecx        # imm = 0x9F6F500
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167178152, %ecx        # imm = 0x9F6EFA8
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_94404974_87(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178152, %ecx        # imm = 0x9F6EFA8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_94404974_87(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178152, %ecx        # imm = 0x9F6EFA8
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_94404974_87(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178152, %ecx        # imm = 0x9F6EFA8
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_94404974_87(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_94404974_88(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167179520, %ecx        # imm = 0x9F6F500
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167178152, %ecx        # imm = 0x9F6EFA8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_94404974_87(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178152, %ecx        # imm = 0x9F6EFA8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_94404974_87(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167178152, %ecx        # imm = 0x9F6EFA8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167178152, %ecx        # imm = 0x9F6EFA8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_94404974_87(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_94404974_88(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB450_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1379(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_94404974_87;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_94404974_87
	.align	16, 0x90
_subprog_m_7ddf9423_94404974_87:        # @_subprog_m_7ddf9423_94404974_87
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB451_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB451_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB451_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB451_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB451_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB451_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB451_6
.LBB451_5:
	testl	%eax, %eax
	je	.LBB451_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB451_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB451_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB451_8:
	testb	%al, %al
	je	.LBB451_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB451_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB451_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB451_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB451_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB451_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB451_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB451_160
.LBB451_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB451_10
.LBB451_159:
	testl	%eax, %eax
	je	.LBB451_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB451_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB451_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB451_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB451_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB451_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB451_148
.LBB451_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB451_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB451_13
.LBB451_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB451_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB451_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB451_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB451_148
.LBB451_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB451_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB451_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB451_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB451_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB451_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB451_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB451_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB451_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB451_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB451_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB451_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB451_23
.LBB451_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB451_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB451_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB451_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB451_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB451_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB451_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB451_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB451_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB451_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB451_182
.LBB451_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB451_27
.LBB451_181:
	testl	%eax, %eax
	je	.LBB451_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB451_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB451_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB451_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB451_29
.LBB451_28:
	testl	%eax, %eax
	je	.LBB451_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB451_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB451_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB451_31:
	testb	%al, %al
	je	.LBB451_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB451_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB451_195
.LBB451_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB451_33
.LBB451_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB451_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB451_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB451_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB451_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB451_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB451_228
.LBB451_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB451_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB451_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB451_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB451_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB451_39
.LBB451_38:
	testl	%eax, %eax
	je	.LBB451_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB451_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB451_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB451_41:
	testb	%al, %al
	je	.LBB451_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB451_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB451_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB451_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB451_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB451_209
.LBB451_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB451_43
.LBB451_208:
	testl	%eax, %eax
	je	.LBB451_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB451_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB451_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB451_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB451_45
.LBB451_44:
	testl	%eax, %eax
	je	.LBB451_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB451_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB451_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB451_47:
	testb	%al, %al
	je	.LBB451_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB451_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB451_222
.LBB451_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB451_49
.LBB451_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB451_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB451_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB451_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB451_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB451_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB451_227
.LBB451_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB451_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB451_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB451_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB451_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB451_55
.LBB451_54:
	testl	%eax, %eax
	je	.LBB451_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB451_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB451_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB451_57:
	testb	%al, %al
	je	.LBB451_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB451_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB451_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB451_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB451_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB451_240
.LBB451_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB451_59
.LBB451_239:
	testl	%eax, %eax
	je	.LBB451_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB451_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB451_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB451_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB451_61
.LBB451_60:
	testl	%eax, %eax
	je	.LBB451_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB451_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB451_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB451_63:
	testb	%al, %al
	je	.LBB451_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB451_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB451_253
.LBB451_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB451_65
.LBB451_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB451_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB451_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB451_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB451_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB451_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB451_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB451_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB451_229
.LBB451_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB451_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB451_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB451_70
.LBB451_69:
	testl	%eax, %eax
	je	.LBB451_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB451_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB451_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB451_72:
	testb	%al, %al
	je	.LBB451_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB451_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB451_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB451_265
.LBB451_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB451_74
.LBB451_264:
	testl	%eax, %eax
	je	.LBB451_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB451_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB451_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB451_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB451_76
.LBB451_75:
	testl	%eax, %eax
	je	.LBB451_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB451_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB451_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB451_78:
	testb	%al, %al
	je	.LBB451_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB451_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB451_277
.LBB451_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB451_80
.LBB451_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB451_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB451_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB451_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB451_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB451_82
.LBB451_81:
	testl	%eax, %eax
	je	.LBB451_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB451_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB451_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB451_84:
	testb	%al, %al
	je	.LBB451_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB451_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB451_288
.LBB451_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB451_86
.LBB451_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB451_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB451_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB451_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB451_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB451_88
.LBB451_87:
	testl	%eax, %eax
	je	.LBB451_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB451_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB451_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB451_90:
	testb	%al, %al
	je	.LBB451_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB451_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB451_299
.LBB451_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB451_92
.LBB451_298:
	testl	%eax, %eax
	je	.LBB451_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB451_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB451_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB451_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB451_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB451_351
.LBB451_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB451_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB451_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB451_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB451_97
.LBB451_96:
	testl	%eax, %eax
	je	.LBB451_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB451_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB451_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB451_99:
	testb	%al, %al
	je	.LBB451_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB451_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB451_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB451_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB451_311
.LBB451_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB451_101
.LBB451_310:
	testl	%eax, %eax
	je	.LBB451_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB451_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB451_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB451_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB451_103
.LBB451_102:
	testl	%eax, %eax
	je	.LBB451_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB451_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB451_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB451_105:
	testb	%al, %al
	je	.LBB451_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB451_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB451_323
.LBB451_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB451_107
.LBB451_322:
	testl	%eax, %eax
	je	.LBB451_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB451_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB451_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB451_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB451_109
.LBB451_108:
	testl	%eax, %eax
	je	.LBB451_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB451_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB451_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB451_111:
	testb	%al, %al
	je	.LBB451_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB451_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB451_334
.LBB451_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB451_113
.LBB451_333:
	testl	%eax, %eax
	je	.LBB451_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB451_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB451_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB451_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB451_115
.LBB451_114:
	testl	%eax, %eax
	je	.LBB451_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB451_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB451_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB451_117:
	testb	%al, %al
	je	.LBB451_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB451_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB451_345
.LBB451_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB451_119
.LBB451_344:
	testl	%eax, %eax
	je	.LBB451_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB451_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB451_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB451_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB451_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB451_350
.LBB451_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB451_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB451_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB451_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB451_124
.LBB451_123:
	testl	%eax, %eax
	je	.LBB451_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB451_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB451_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB451_126:
	testb	%al, %al
	je	.LBB451_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB451_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB451_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB451_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB451_359
.LBB451_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB451_128
.LBB451_358:
	testl	%eax, %eax
	je	.LBB451_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB451_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB451_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB451_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB451_130
.LBB451_129:
	testl	%eax, %eax
	je	.LBB451_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB451_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB451_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB451_132:
	testb	%al, %al
	je	.LBB451_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB451_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB451_371
.LBB451_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB451_134
.LBB451_370:
	testl	%eax, %eax
	je	.LBB451_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB451_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB451_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB451_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB451_136
.LBB451_135:
	testl	%eax, %eax
	je	.LBB451_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB451_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB451_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB451_138:
	testb	%al, %al
	je	.LBB451_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB451_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB451_382
.LBB451_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB451_140
.LBB451_381:
	testl	%eax, %eax
	je	.LBB451_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB451_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB451_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB451_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB451_142
.LBB451_141:
	testl	%eax, %eax
	je	.LBB451_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB451_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB451_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB451_144:
	testb	%al, %al
	je	.LBB451_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB451_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB451_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB451_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB451_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB451_393
.LBB451_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB451_146
.LBB451_392:
	testl	%eax, %eax
	je	.LBB451_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB451_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB451_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB451_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB451_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB451_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB451_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB451_148
.LBB451_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB451_148

	.def	 _subprog_m_7ddf9423_94404974_88;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_94404974_88
	.align	16, 0x90
_subprog_m_7ddf9423_94404974_88:        # @_subprog_m_7ddf9423_94404974_88
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB452_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB452_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB452_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB452_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB452_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB452_5
.LBB452_4:
	testl	%eax, %eax
	je	.LBB452_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB452_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB452_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB452_7:
	testb	%al, %al
	je	.LBB452_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB452_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB452_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB452_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB452_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB452_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB452_73
.LBB452_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB452_9
.LBB452_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB452_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB452_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB452_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB452_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB452_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB452_63
.LBB452_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB452_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB452_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB452_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB452_15
.LBB452_14:
	testl	%eax, %eax
	je	.LBB452_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB452_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB452_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB452_17:
	testb	%al, %al
	je	.LBB452_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB452_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB452_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB452_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB452_87
.LBB452_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB452_19
.LBB452_86:
	testl	%eax, %eax
	je	.LBB452_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB452_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB452_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB452_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB452_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB452_21
.LBB452_20:
	testl	%eax, %eax
	je	.LBB452_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB452_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB452_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB452_23:
	testb	%al, %al
	je	.LBB452_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB452_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB452_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB452_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB452_98
.LBB452_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB452_25
.LBB452_97:
	testl	%eax, %eax
	je	.LBB452_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB452_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB452_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB452_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB452_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB452_103
.LBB452_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB452_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB452_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB452_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB452_30
.LBB452_29:
	testl	%eax, %eax
	je	.LBB452_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB452_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB452_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB452_32:
	testb	%al, %al
	je	.LBB452_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB452_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB452_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB452_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB452_114
.LBB452_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB452_34
.LBB452_113:
	testl	%eax, %eax
	je	.LBB452_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB452_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB452_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB452_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB452_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB452_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB452_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB452_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB452_39
.LBB452_38:
	testl	%eax, %eax
	je	.LBB452_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB452_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB452_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB452_41:
	testb	%al, %al
	je	.LBB452_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB452_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB452_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB452_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB452_126
.LBB452_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB452_43
.LBB452_125:
	testl	%eax, %eax
	je	.LBB452_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB452_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB452_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB452_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB452_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB452_104
.LBB452_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB452_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB452_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB452_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB452_48
.LBB452_47:
	testl	%eax, %eax
	je	.LBB452_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB452_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB452_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB452_50:
	testb	%al, %al
	je	.LBB452_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB452_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB452_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB452_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB452_139
.LBB452_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB452_52
.LBB452_138:
	testl	%eax, %eax
	je	.LBB452_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB452_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB452_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB452_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB452_53
.LBB452_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB452_103:
	xorl	%r8d, %r8d
.LBB452_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB452_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB452_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB452_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB452_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB452_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB452_57
.LBB452_56:
	testl	%eax, %eax
	je	.LBB452_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB452_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB452_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB452_59:
	testb	%al, %al
	je	.LBB452_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB452_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB452_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB452_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB452_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB452_152
.LBB452_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB452_61
.LBB452_151:
	testl	%eax, %eax
	je	.LBB452_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB452_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB452_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB452_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB452_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB452_104
.LBB452_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB452_63

	.def	 _execute_635;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_635
	.align	16, 0x90
_execute_635:                           # @_execute_635
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$49, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng81(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258845;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258845
	.align	16, 0x90
_execute_258845:                        # @_execute_258845
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	712(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -16(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -12(%rbp)
	je	.LBB454_2
# BB#1:
	orl	%eax, -16(%rbp)
.LBB454_2:
	leaq	4552(%rsi), %rcx
	leaq	-16(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1328(%rsi), %rcx
	addq	$4528, %rsi             # imm = 0x11B0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258846;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258846
	.align	16, 0x90
_execute_258846:                        # @_execute_258846
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$72, %rsp
	movq	%rdx, %rsi
	leaq	768(%rsi), %rdi
	movl	$1, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	ng9(%rip), %eax
	jne	.LBB455_3
# BB#1:
	movl	4(%rbx), %eax
	cmpl	ng9+4(%rip), %eax
	jne	.LBB455_3
# BB#2:
	movl	$1, -32(%rbp)
.LBB455_3:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB455_4
# BB#10:
	movl	$1, -40(%rbp)
	jmp	.LBB455_5
.LBB455_4:
	testl	%eax, %eax
	je	.LBB455_5
# BB#11:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB455_5:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB455_7
# BB#6:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB455_7:
	testb	%al, %al
	je	.LBB455_8
# BB#12:
	movl	$1, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rdi
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rdi), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rdi), %ecx
	testb	$1, %cl
	je	.LBB455_13
# BB#16:
	movl	$1, -48(%rbp)
	jmp	.LBB455_14
.LBB455_8:
	leaq	-56(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB455_9
.LBB455_13:
	testl	%eax, %eax
	je	.LBB455_14
# BB#17:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB455_14:
	movl	-40(%rbp), %eax
	orl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-36(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB455_9
# BB#15:
	orl	%eax, -56(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-52(%rbp), %eax
	movl	-44(%rbp), %ecx
	notl	%ecx
	andl	-48(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -52(%rbp)
.LBB455_9:
	leaq	4720(%rsi), %rcx
	leaq	-56(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1384(%rsi), %rcx
	addq	$4696, %rsi             # imm = 0x1258
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$72, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_637;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_637
	.align	16, 0x90
_execute_637:                           # @_execute_637
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdx, %rsi
	leaq	2016(%rsi), %rdi
	.align	16, 0x90
.LBB456_1:                              # =>This Inner Loop Header: Depth=1
	movl	$50, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	2056(%rsi), %rax
	testq	%rax, %rax
	je	.LBB456_3
# BB#2:                                 #   in Loop: Header=BB456_1 Depth=1
	jmpq	*%rax
.Ltmp1398:                              # Block address taken
.LBB456_5:
	movq	832(%rsi), %rbx
	leaq	-32(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	notl	%eax
	andl	$1, %eax
	movl	%eax, -32(%rbp)
	leaq	824(%rsi), %rcx
	addq	$2136, %rsi             # imm = 0x858
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	jmp	.LBB456_4
.LBB456_3:
	leaq	.Ltmp1398(%rip), %r9
	movl	$1, %edx
	movq	%rdi, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_wait_and_set_next_state(%rip)
.LBB456_4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_638;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_638
	.align	16, 0x90
_execute_638:                           # @_execute_638
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$216, %rsp
	movq	%rdx, %rdi
	leaq	2168(%rdi), %rsi
	.align	16, 0x90
.LBB457_1:                              # =>This Inner Loop Header: Depth=1
	movl	$51, %edx
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	2208(%rdi), %rax
	testq	%rax, %rax
	je	.LBB457_4
# BB#2:                                 #   in Loop: Header=BB457_1 Depth=1
	jmpq	*%rax
.Ltmp1402:                              # Block address taken
.LBB457_6:
	movb	$0, 2288(%rdi)
	leaq	.Ltmp1403(%rip), %r9
	jmp	.LBB457_56
.Ltmp1403:                              # Block address taken
.LBB457_7:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %ecx
	xorl	ng8(%rip), %ecx
	movl	ng7+4(%rip), %ebx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB457_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB457_9
# BB#57:
	movl	$1, -28(%rbp)
.LBB457_9:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_10
# BB#58:
	movl	$1, -40(%rbp)
	jmp	.LBB457_11
.Ltmp1404:                              # Block address taken
.LBB457_3:
	movl	$1, %ecx
	movl	$12583063, %edx         # imm = 0xC00097
	callq	*__imp__iki_vlog_finish(%rip)
	jmp	.LBB457_4
.LBB457_10:
	testl	%eax, %eax
	je	.LBB457_11
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB457_11:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB457_13
# BB#12:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB457_13:
	testb	%al, %al
	je	.LBB457_14
# BB#60:
	leaq	ng64(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_less(%rip)
	movq	%rax, %rbx
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB457_61
# BB#70:
	movl	$1, -72(%rbp)
	jmp	.LBB457_62
.LBB457_14:
	leaq	-128(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB457_15
.LBB457_61:
	testl	%eax, %eax
	je	.LBB457_62
# BB#71:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB457_62:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB457_64
# BB#63:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB457_64:
	testb	%al, %al
	je	.LBB457_65
# BB#72:
	leaq	ng65(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	ng64(%rip), %r8
	leaq	-96(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_greater(%rip)
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB457_73
# BB#76:
	movl	$1, -104(%rbp)
	jmp	.LBB457_74
.LBB457_65:
	leaq	-112(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB457_66
.LBB457_73:
	testl	%eax, %eax
	je	.LBB457_74
# BB#77:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB457_74:
	movl	-72(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB457_66
# BB#75:
	orl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB457_66:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_67
# BB#78:
	movl	$1, -120(%rbp)
	jmp	.LBB457_68
.LBB457_67:
	testl	%eax, %eax
	je	.LBB457_68
# BB#79:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB457_68:
	movl	-40(%rbp), %eax
	orl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB457_15
# BB#69:
	orl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-124(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -124(%rbp)
.LBB457_15:
	movl	-124(%rbp), %eax
	notl	%eax
	testl	-128(%rbp), %eax
	je	.LBB457_16
# BB#80:
	movq	ng66(%rip), %r9
	leaq	1864(%rdi), %rax
	leaq	1880(%rdi), %rcx
	movq	%rcx, 80(%rsp)
	movq	%rax, 56(%rsp)
	movq	%rdi, 40(%rsp)
	movl	$64, 88(%rsp)
	movl	$118, 72(%rsp)
	movl	$48, 64(%rsp)
	movl	$118, 48(%rsp)
	movl	$3, 32(%rsp)
	movl	$1, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlogfile_write(%rip)
	leaq	936(%rdi), %rcx
	leaq	2424(%rdi), %rdx
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB457_16:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %ecx
	xorl	ng8(%rip), %ecx
	movl	ng7+4(%rip), %ebx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB457_18
# BB#17:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB457_18
# BB#81:
	movl	$1, -28(%rbp)
.LBB457_18:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_19
# BB#82:
	movl	$1, -40(%rbp)
	jmp	.LBB457_20
.LBB457_19:
	testl	%eax, %eax
	je	.LBB457_20
# BB#83:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB457_20:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB457_22
# BB#21:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB457_22:
	testb	%al, %al
	je	.LBB457_23
# BB#84:
	leaq	ng64(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_less(%rip)
	movq	%rax, %rbx
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB457_85
# BB#94:
	movl	$1, -72(%rbp)
	jmp	.LBB457_86
.LBB457_23:
	leaq	-128(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB457_24
.LBB457_85:
	testl	%eax, %eax
	je	.LBB457_86
# BB#95:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB457_86:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB457_88
# BB#87:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB457_88:
	testb	%al, %al
	je	.LBB457_89
# BB#96:
	leaq	ng65(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	ng64(%rip), %r8
	leaq	-96(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_greater(%rip)
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB457_97
# BB#100:
	movl	$1, -104(%rbp)
	jmp	.LBB457_98
.LBB457_89:
	leaq	-112(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB457_90
.LBB457_97:
	testl	%eax, %eax
	je	.LBB457_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB457_98:
	movl	-72(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB457_90
# BB#99:
	orl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB457_90:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_91
# BB#102:
	movl	$1, -120(%rbp)
	jmp	.LBB457_92
.LBB457_91:
	testl	%eax, %eax
	je	.LBB457_92
# BB#103:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB457_92:
	movl	-40(%rbp), %eax
	orl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB457_24
# BB#93:
	orl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-124(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -124(%rbp)
.LBB457_24:
	movl	-124(%rbp), %eax
	notl	%eax
	testl	-128(%rbp), %eax
	je	.LBB457_25
# BB#104:
	movq	ng67(%rip), %r9
	leaq	1896(%rdi), %rax
	leaq	1912(%rdi), %rcx
	movq	%rcx, 80(%rsp)
	movq	%rax, 56(%rsp)
	movq	%rdi, 40(%rsp)
	movl	$64, 88(%rsp)
	movl	$118, 72(%rsp)
	movl	$48, 64(%rsp)
	movl	$118, 48(%rsp)
	movl	$3, 32(%rsp)
	movl	$1, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlogfile_write(%rip)
	leaq	936(%rdi), %rcx
	leaq	2424(%rdi), %rdx
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB457_25:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %ecx
	xorl	ng8(%rip), %ecx
	movl	ng7+4(%rip), %ebx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB457_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB457_27
# BB#105:
	movl	$1, -28(%rbp)
.LBB457_27:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_28
# BB#106:
	movl	$1, -40(%rbp)
	jmp	.LBB457_29
.LBB457_28:
	testl	%eax, %eax
	je	.LBB457_29
# BB#107:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB457_29:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB457_31
# BB#30:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB457_31:
	testb	%al, %al
	je	.LBB457_32
# BB#108:
	leaq	ng64(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_less(%rip)
	movq	%rax, %rbx
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB457_109
# BB#118:
	movl	$1, -72(%rbp)
	jmp	.LBB457_110
.LBB457_32:
	leaq	-128(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB457_33
.LBB457_109:
	testl	%eax, %eax
	je	.LBB457_110
# BB#119:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB457_110:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB457_112
# BB#111:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB457_112:
	testb	%al, %al
	je	.LBB457_113
# BB#120:
	leaq	ng65(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	ng64(%rip), %r8
	leaq	-96(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_greater(%rip)
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB457_121
# BB#124:
	movl	$1, -104(%rbp)
	jmp	.LBB457_122
.LBB457_113:
	leaq	-112(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB457_114
.LBB457_121:
	testl	%eax, %eax
	je	.LBB457_122
# BB#125:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB457_122:
	movl	-72(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB457_114
# BB#123:
	orl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB457_114:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_115
# BB#126:
	movl	$1, -120(%rbp)
	jmp	.LBB457_116
.LBB457_115:
	testl	%eax, %eax
	je	.LBB457_116
# BB#127:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB457_116:
	movl	-40(%rbp), %eax
	orl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB457_33
# BB#117:
	orl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-124(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -124(%rbp)
.LBB457_33:
	movl	-124(%rbp), %eax
	notl	%eax
	testl	-128(%rbp), %eax
	je	.LBB457_34
# BB#128:
	movq	ng68(%rip), %r9
	leaq	1928(%rdi), %rax
	leaq	1944(%rdi), %rcx
	movq	%rcx, 80(%rsp)
	movq	%rax, 56(%rsp)
	movq	%rdi, 40(%rsp)
	movl	$64, 88(%rsp)
	movl	$118, 72(%rsp)
	movl	$48, 64(%rsp)
	movl	$118, 48(%rsp)
	movl	$3, 32(%rsp)
	movl	$1, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlogfile_write(%rip)
	leaq	936(%rdi), %rcx
	leaq	2424(%rdi), %rdx
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB457_34:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %ecx
	xorl	ng8(%rip), %ecx
	movl	ng7+4(%rip), %ebx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB457_36
# BB#35:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB457_36
# BB#129:
	movl	$1, -28(%rbp)
.LBB457_36:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_37
# BB#130:
	movl	$1, -40(%rbp)
	jmp	.LBB457_38
.LBB457_37:
	testl	%eax, %eax
	je	.LBB457_38
# BB#131:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB457_38:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB457_40
# BB#39:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB457_40:
	testb	%al, %al
	je	.LBB457_41
# BB#132:
	leaq	ng64(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_less(%rip)
	movq	%rax, %rbx
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB457_133
# BB#142:
	movl	$1, -72(%rbp)
	jmp	.LBB457_134
.LBB457_41:
	leaq	-128(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB457_42
.LBB457_133:
	testl	%eax, %eax
	je	.LBB457_134
# BB#143:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB457_134:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB457_136
# BB#135:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB457_136:
	testb	%al, %al
	je	.LBB457_137
# BB#144:
	leaq	ng65(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$64, 40(%rsp)
	leaq	ng64(%rip), %r8
	leaq	-96(%rbp), %rcx
	movl	$64, %edx
	movl	$64, %r9d
	callq	*__imp__iki_vlog_unsigned_greater(%rip)
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	(%rbx), %ecx
	testb	$1, %cl
	je	.LBB457_145
# BB#148:
	movl	$1, -104(%rbp)
	jmp	.LBB457_146
.LBB457_137:
	leaq	-112(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB457_138
.LBB457_145:
	testl	%eax, %eax
	je	.LBB457_146
# BB#149:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB457_146:
	movl	-72(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB457_138
# BB#147:
	orl	%eax, -112(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB457_138:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_139
# BB#150:
	movl	$1, -120(%rbp)
	jmp	.LBB457_140
.LBB457_139:
	testl	%eax, %eax
	je	.LBB457_140
# BB#151:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB457_140:
	movl	-40(%rbp), %eax
	orl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB457_42
# BB#141:
	orl	%eax, -128(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-124(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -124(%rbp)
.LBB457_42:
	movl	-124(%rbp), %eax
	notl	%eax
	testl	-128(%rbp), %eax
	je	.LBB457_43
# BB#152:
	movq	ng69(%rip), %r9
	leaq	1960(%rdi), %rax
	leaq	1976(%rdi), %rcx
	movq	%rcx, 80(%rsp)
	movq	%rax, 56(%rsp)
	movq	%rdi, 40(%rsp)
	movl	$64, 88(%rsp)
	movl	$118, 72(%rsp)
	movl	$48, 64(%rsp)
	movl	$118, 48(%rsp)
	movl	$3, 32(%rsp)
	movl	$1, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlogfile_write(%rip)
	leaq	936(%rdi), %rcx
	leaq	2424(%rdi), %rdx
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB457_43:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %ecx
	xorl	ng8(%rip), %ecx
	movl	ng7+4(%rip), %ebx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB457_45
# BB#44:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB457_45
# BB#153:
	movl	$1, -28(%rbp)
.LBB457_45:
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-28(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-32(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_46
# BB#154:
	movl	$1, -40(%rbp)
	jmp	.LBB457_47
.LBB457_46:
	testl	%eax, %eax
	je	.LBB457_47
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -40(%rbp)
.LBB457_47:
	cmpl	$0, -40(%rbp)
	movb	$1, %al
	je	.LBB457_49
# BB#48:
	cmpl	$0, -36(%rbp)
	setne	%al
.LBB457_49:
	testb	%al, %al
	je	.LBB457_50
# BB#156:
	movq	__imp__iki_std_memset(%rip), %rbx
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*%rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*%rbx
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_157
# BB#166:
	movl	$1, -104(%rbp)
	jmp	.LBB457_158
.LBB457_50:
	leaq	-144(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB457_51
.LBB457_157:
	testl	%eax, %eax
	je	.LBB457_158
# BB#167:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB457_158:
	cmpl	$0, -104(%rbp)
	movb	$1, %al
	jne	.LBB457_160
# BB#159:
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB457_160:
	testb	%al, %al
	je	.LBB457_161
# BB#168:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	ng7(%rip), %eax
	cmpl	ng8(%rip), %eax
	jne	.LBB457_174
# BB#169:
	movl	ng7+4(%rip), %eax
	cmpl	ng8+4(%rip), %eax
	je	.LBB457_170
.LBB457_174:
	movl	$1, -112(%rbp)
.LBB457_170:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_171
# BB#175:
	movl	$1, -120(%rbp)
	jmp	.LBB457_172
.LBB457_161:
	leaq	-128(%rbp), %rcx
	leaq	-104(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB457_162
.LBB457_171:
	testl	%eax, %eax
	je	.LBB457_172
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB457_172:
	movl	-104(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-100(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB457_162
# BB#173:
	orl	%eax, -128(%rbp)
	movl	-104(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-104(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB457_162:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB457_163
# BB#177:
	movl	$1, -136(%rbp)
	jmp	.LBB457_164
.LBB457_163:
	testl	%eax, %eax
	je	.LBB457_164
# BB#178:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB457_164:
	movl	-40(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-36(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB457_51
# BB#165:
	orl	%eax, -144(%rbp)
	movl	-36(%rbp), %eax
	notl	%eax
	andl	-40(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB457_51:
	movl	-140(%rbp), %eax
	notl	%eax
	testl	-144(%rbp), %eax
	je	.LBB457_52
# BB#179:
	movq	ng70(%rip), %r9
	leaq	1992(%rdi), %rax
	leaq	2008(%rdi), %rcx
	movq	%rcx, 80(%rsp)
	movq	%rax, 56(%rsp)
	movq	%rdi, 40(%rsp)
	movl	$1, 88(%rsp)
	movl	$118, 72(%rsp)
	movl	$48, 64(%rsp)
	movl	$118, 48(%rsp)
	movl	$3, 32(%rsp)
	movl	$1, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlogfile_write(%rip)
	leaq	936(%rdi), %rcx
	leaq	2424(%rdi), %rdx
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB457_52:
	movq	944(%rdi), %rbx
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB457_54
# BB#53:
	testl	%ebx, %ebx
	movl	$1, -32(%rbp)
	je	.LBB457_54
# BB#180:
	movl	$1, -28(%rbp)
.LBB457_54:
	movl	-28(%rbp), %eax
	notl	%eax
	testl	-32(%rbp), %eax
	je	.LBB457_4
# BB#55:
	leaq	.Ltmp1404(%rip), %r9
.LBB457_56:
	movl	$1, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r8
	callq	*__imp__iki_vlog_wait_and_set_next_state(%rip)
	jmp	.LBB457_5
.LBB457_4:
	movb	$1, 2288(%rdi)
	leaq	.Ltmp1402(%rip), %rax
	movq	%rax, 2208(%rdi)
.LBB457_5:
	addq	$216, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_639;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_639
	.align	16, 0x90
_execute_639:                           # @_execute_639
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$52, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	1440(%rsi), %rcx
	leaq	2576(%rsi), %rdx
	movl	$63, 32(%rsp)
	leaq	ng64(%rip), %rdi
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	1496(%rsi), %rcx
	leaq	2608(%rsi), %rdx
	movl	$63, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	1552(%rsi), %rcx
	leaq	2640(%rsi), %rdx
	movl	$63, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	1608(%rsi), %rcx
	addq	$2672, %rsi             # imm = 0xA70
	movl	$63, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_640;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_640
	.align	16, 0x90
_execute_640:                           # @_execute_640
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$64, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB459_1:                              # =>This Inner Loop Header: Depth=1
	movl	$53, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	2744(%rsi), %rax
	testq	%rax, %rax
	je	.LBB459_6
# BB#2:                                 #   in Loop: Header=BB459_1 Depth=1
	jmpq	*%rax
.Ltmp1411:                              # Block address taken
.LBB459_3:
	movb	$0, 2824(%rsi)
	movq	1056(%rsi), %rbx
	movq	__imp__iki_std_memset(%rip), %r14
	leaq	-56(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	movq	%rbx, 32(%rsp)
	movl	$5, 40(%rsp)
	leaq	ng45(%rip), %r12
	movq	__imp__iki_vlog_unsigned_multiply(%rip), %r15
	movl	$32, %edx
	movl	$32, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*%r15
	leaq	1664(%rsi), %rcx
	leaq	2832(%rsi), %rdx
	movl	$5, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	movq	1056(%rsi), %rbx
	leaq	-64(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	movq	%rbx, 32(%rsp)
	movl	$5, 40(%rsp)
	movl	$32, %edx
	movl	$32, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*%r15
	cmpl	$0, 4(%rax)
	je	.LBB459_4
# BB#7:
	movq	$-1, -56(%rbp)
	jmp	.LBB459_5
.LBB459_4:
	movl	(%rax), %eax
	incl	%eax
	movl	%eax, -56(%rbp)
	movl	$0, -52(%rbp)
.LBB459_5:
	leaq	1720(%rsi), %rcx
	leaq	2864(%rsi), %rdx
	movl	$5, 32(%rsp)
	leaq	-56(%rbp), %r8
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
.LBB459_6:
	movb	$1, 2824(%rsi)
	leaq	.Ltmp1411(%rip), %rax
	movq	%rax, 2744(%rsi)
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_641;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_641
	.align	16, 0x90
_execute_641:                           # @_execute_641
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$64, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB460_1:                              # =>This Inner Loop Header: Depth=1
	movl	$54, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	2936(%rsi), %rax
	testq	%rax, %rax
	je	.LBB460_52
# BB#2:                                 #   in Loop: Header=BB460_1 Depth=1
	jmpq	*%rax
.Ltmp1415:                              # Block address taken
.LBB460_3:
	movb	$0, 3016(%rsi)
	movq	1392(%rsi), %rax
	movl	4(%rax), %ecx
	notl	%ecx
	testl	(%rax), %ecx
	je	.LBB460_52
# BB#4:
	movq	1112(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	movq	1672(%rsi), %rcx
	cmpl	$63, (%rcx)
	movb	$1, %al
	movb	$1, %dl
	ja	.LBB460_6
# BB#5:                                 # %select.mid
	xorl	%edx, %edx
.LBB460_6:                              # %select.end
	testb	%dl, %dl
	movl	(%rcx), %r14d
	jne	.LBB460_8
# BB#7:
	cmpl	$0, 4(%rcx)
	setne	%al
.LBB460_8:
	testb	%al, %al
	jne	.LBB460_10
# BB#9:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1440(%rsi), %rcx
	leaq	3024(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB460_10:
	movq	1112(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	movq	1728(%rsi), %rcx
	cmpl	$63, (%rcx)
	movb	$1, %al
	movb	$1, %dl
	ja	.LBB460_12
# BB#11:                                # %select.mid14
	xorl	%edx, %edx
.LBB460_12:                             # %select.end13
	testb	%dl, %dl
	movl	(%rcx), %r14d
	jne	.LBB460_14
# BB#13:
	cmpl	$0, 4(%rcx)
	setne	%al
.LBB460_14:
	testb	%al, %al
	jne	.LBB460_16
# BB#15:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1440(%rsi), %rcx
	leaq	3064(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB460_16:
	movq	1168(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	movq	1672(%rsi), %rcx
	cmpl	$63, (%rcx)
	movb	$1, %al
	movb	$1, %dl
	ja	.LBB460_18
# BB#17:                                # %select.mid19
	xorl	%edx, %edx
.LBB460_18:                             # %select.end18
	testb	%dl, %dl
	movl	(%rcx), %r14d
	jne	.LBB460_20
# BB#19:
	cmpl	$0, 4(%rcx)
	setne	%al
.LBB460_20:
	testb	%al, %al
	jne	.LBB460_22
# BB#21:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1496(%rsi), %rcx
	leaq	3104(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB460_22:
	movq	1168(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	movq	1728(%rsi), %rcx
	cmpl	$63, (%rcx)
	movb	$1, %al
	movb	$1, %dl
	ja	.LBB460_24
# BB#23:                                # %select.mid27
	xorl	%edx, %edx
.LBB460_24:                             # %select.end26
	testb	%dl, %dl
	movl	(%rcx), %r14d
	jne	.LBB460_26
# BB#25:
	cmpl	$0, 4(%rcx)
	setne	%al
.LBB460_26:
	testb	%al, %al
	jne	.LBB460_28
# BB#27:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1496(%rsi), %rcx
	leaq	3144(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB460_28:
	movq	1224(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	movq	1672(%rsi), %rcx
	cmpl	$63, (%rcx)
	movb	$1, %al
	movb	$1, %dl
	ja	.LBB460_30
# BB#29:                                # %select.mid32
	xorl	%edx, %edx
.LBB460_30:                             # %select.end31
	testb	%dl, %dl
	movl	(%rcx), %r14d
	jne	.LBB460_32
# BB#31:
	cmpl	$0, 4(%rcx)
	setne	%al
.LBB460_32:
	testb	%al, %al
	jne	.LBB460_34
# BB#33:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1552(%rsi), %rcx
	leaq	3184(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB460_34:
	movq	1224(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	movq	1728(%rsi), %rcx
	cmpl	$63, (%rcx)
	movb	$1, %al
	movb	$1, %dl
	ja	.LBB460_36
# BB#35:                                # %select.mid40
	xorl	%edx, %edx
.LBB460_36:                             # %select.end39
	testb	%dl, %dl
	movl	(%rcx), %r14d
	jne	.LBB460_38
# BB#37:
	cmpl	$0, 4(%rcx)
	setne	%al
.LBB460_38:
	testb	%al, %al
	jne	.LBB460_40
# BB#39:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1552(%rsi), %rcx
	leaq	3224(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB460_40:
	movq	1280(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	xorl	%r8d, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	movq	1672(%rsi), %rcx
	cmpl	$63, (%rcx)
	movb	$1, %al
	movb	$1, %dl
	ja	.LBB460_42
# BB#41:                                # %select.mid45
	xorl	%edx, %edx
.LBB460_42:                             # %select.end44
	testb	%dl, %dl
	movl	(%rcx), %r14d
	jne	.LBB460_44
# BB#43:
	cmpl	$0, 4(%rcx)
	setne	%al
.LBB460_44:
	testb	%al, %al
	jne	.LBB460_46
# BB#45:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1608(%rsi), %rcx
	leaq	3264(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB460_46:
	movq	1280(%rsi), %rdx
	leaq	-40(%rbp), %rcx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	movq	1728(%rsi), %rcx
	cmpl	$63, (%rcx)
	movb	$1, %al
	movb	$1, %dl
	ja	.LBB460_48
# BB#47:                                # %select.mid53
	xorl	%edx, %edx
.LBB460_48:                             # %select.end52
	testb	%dl, %dl
	movl	(%rcx), %r14d
	jne	.LBB460_50
# BB#49:
	cmpl	$0, 4(%rcx)
	setne	%al
.LBB460_50:
	testb	%al, %al
	jne	.LBB460_52
# BB#51:
	callq	*__imp__iki_malloc8(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	andl	$1, %eax
	movl	%eax, (%rbx)
	movl	4(%rdi), %eax
	andl	$1, %eax
	movl	%eax, 4(%rbx)
	leaq	1608(%rsi), %rcx
	leaq	3304(%rsi), %rdx
	movq	$100, 48(%rsp)
	movl	$11, 40(%rsp)
	movl	$0, 32(%rsp)
	movq	%rbx, %r8
	movl	%r14d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_non_blocking_delay_signal(%rip)
.LBB460_52:
	movb	$1, 3016(%rsi)
	leaq	.Ltmp1415(%rip), %rax
	movq	%rax, 2936(%rsi)
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_258848;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258848
	.align	16, 0x90
_execute_258848:                        # @_execute_258848
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$128, %rsp
	movq	%rdx, %rsi
	movq	1448(%rsi), %r14
	leaq	264(%rsi), %rcx
	movl	$5, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-48(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movq	%rbx, 32(%rsp)
	movl	$5, 40(%rsp)
	leaq	ng45(%rip), %r8
	movl	$32, %edx
	movl	$32, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_unsigned_multiply(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-40(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movl	(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 5056(%rsi)
	movl	4(%rax), %eax
	andl	$1, %eax
	movl	%eax, 5060(%rsi)
	leaq	40(%rsi), %rcx
	addq	$5032, %rsi             # imm = 0x13A8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$128, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_258849;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258849
	.align	16, 0x90
_execute_258849:                        # @_execute_258849
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$136, %rsp
	movq	%rdx, %rsi
	movq	1448(%rsi), %r14
	leaq	264(%rsi), %rcx
	movl	$5, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rdi
	movq	__imp__iki_std_memset(%rip), %r15
	leaq	-56(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*%r15
	movq	%rdi, 32(%rsp)
	movl	$5, 40(%rsp)
	leaq	ng45(%rip), %r8
	movl	$32, %edx
	movl	$32, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_unsigned_multiply(%rip)
	movq	%rax, %rdi
	leaq	-64(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*%r15
	cmpl	$0, 4(%rdi)
	jne	.LBB462_4
# BB#1:
	cmpl	$0, ng27+4(%rip)
	je	.LBB462_2
.LBB462_4:
	movq	$-1, -64(%rbp)
.LBB462_3:
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-48(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movl	(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 5224(%rsi)
	movl	4(%rax), %eax
	andl	$1, %eax
	movl	%eax, 5228(%rsi)
	leaq	40(%rsi), %rcx
	addq	$5200, %rsi             # imm = 0x1450
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$136, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB462_2:
	movl	(%rdi), %eax
	addl	ng27(%rip), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -60(%rbp)
	jmp	.LBB462_3

	.def	 _execute_258850;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258850
	.align	16, 0x90
_execute_258850:                        # @_execute_258850
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$128, %rsp
	movq	%rdx, %rsi
	movq	1504(%rsi), %r14
	leaq	320(%rsi), %rcx
	movl	$5, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-48(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movq	%rbx, 32(%rsp)
	movl	$5, 40(%rsp)
	leaq	ng45(%rip), %r8
	movl	$32, %edx
	movl	$32, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_unsigned_multiply(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-40(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movl	(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 5392(%rsi)
	movl	4(%rax), %eax
	andl	$1, %eax
	movl	%eax, 5396(%rsi)
	leaq	96(%rsi), %rcx
	addq	$5368, %rsi             # imm = 0x14F8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$128, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_258851;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258851
	.align	16, 0x90
_execute_258851:                        # @_execute_258851
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$136, %rsp
	movq	%rdx, %rsi
	movq	1504(%rsi), %r14
	leaq	320(%rsi), %rcx
	movl	$5, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rdi
	movq	__imp__iki_std_memset(%rip), %r15
	leaq	-56(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*%r15
	movq	%rdi, 32(%rsp)
	movl	$5, 40(%rsp)
	leaq	ng45(%rip), %r8
	movl	$32, %edx
	movl	$32, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_unsigned_multiply(%rip)
	movq	%rax, %rdi
	leaq	-64(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*%r15
	cmpl	$0, 4(%rdi)
	jne	.LBB464_4
# BB#1:
	cmpl	$0, ng27+4(%rip)
	je	.LBB464_2
.LBB464_4:
	movq	$-1, -64(%rbp)
.LBB464_3:
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-48(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movl	(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 5560(%rsi)
	movl	4(%rax), %eax
	andl	$1, %eax
	movl	%eax, 5564(%rsi)
	leaq	96(%rsi), %rcx
	addq	$5536, %rsi             # imm = 0x15A0
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$136, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB464_2:
	movl	(%rdi), %eax
	addl	ng27(%rip), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -60(%rbp)
	jmp	.LBB464_3

	.def	 _execute_258852;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258852
	.align	16, 0x90
_execute_258852:                        # @_execute_258852
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$128, %rsp
	movq	%rdx, %rsi
	movq	1560(%rsi), %r14
	leaq	376(%rsi), %rcx
	movl	$5, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-48(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movq	%rbx, 32(%rsp)
	movl	$5, 40(%rsp)
	leaq	ng45(%rip), %r8
	movl	$32, %edx
	movl	$32, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_unsigned_multiply(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-40(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movl	(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 5728(%rsi)
	movl	4(%rax), %eax
	andl	$1, %eax
	movl	%eax, 5732(%rsi)
	leaq	152(%rsi), %rcx
	addq	$5704, %rsi             # imm = 0x1648
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$128, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_258853;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258853
	.align	16, 0x90
_execute_258853:                        # @_execute_258853
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$136, %rsp
	movq	%rdx, %rsi
	movq	1560(%rsi), %r14
	leaq	376(%rsi), %rcx
	movl	$5, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rdi
	movq	__imp__iki_std_memset(%rip), %r15
	leaq	-56(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*%r15
	movq	%rdi, 32(%rsp)
	movl	$5, 40(%rsp)
	leaq	ng45(%rip), %r8
	movl	$32, %edx
	movl	$32, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_unsigned_multiply(%rip)
	movq	%rax, %rdi
	leaq	-64(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*%r15
	cmpl	$0, 4(%rdi)
	jne	.LBB466_4
# BB#1:
	cmpl	$0, ng27+4(%rip)
	je	.LBB466_2
.LBB466_4:
	movq	$-1, -64(%rbp)
.LBB466_3:
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-48(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movl	(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 5896(%rsi)
	movl	4(%rax), %eax
	andl	$1, %eax
	movl	%eax, 5900(%rsi)
	leaq	152(%rsi), %rcx
	addq	$5872, %rsi             # imm = 0x16F0
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$136, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB466_2:
	movl	(%rdi), %eax
	addl	ng27(%rip), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -60(%rbp)
	jmp	.LBB466_3

	.def	 _execute_258854;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258854
	.align	16, 0x90
_execute_258854:                        # @_execute_258854
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$128, %rsp
	movq	%rdx, %rsi
	movq	1616(%rsi), %r14
	movq	1056(%rsi), %rdi
	leaq	-48(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movq	%rdi, 32(%rsp)
	movl	$5, 40(%rsp)
	leaq	ng45(%rip), %r8
	movl	$32, %edx
	movl	$32, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_unsigned_multiply(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-40(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movl	(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 6064(%rsi)
	movl	4(%rax), %eax
	andl	$1, %eax
	movl	%eax, 6068(%rsi)
	leaq	208(%rsi), %rcx
	addq	$6040, %rsi             # imm = 0x1798
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$128, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_258855;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258855
	.align	16, 0x90
_execute_258855:                        # @_execute_258855
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$136, %rsp
	movq	%rdx, %rsi
	movq	1616(%rsi), %r14
	movq	1056(%rsi), %rbx
	movq	__imp__iki_std_memset(%rip), %r15
	leaq	-56(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r15
	movq	%rbx, 32(%rsp)
	movl	$5, 40(%rsp)
	leaq	ng45(%rip), %r8
	movl	$32, %edx
	movl	$32, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_unsigned_multiply(%rip)
	movq	%rax, %rdi
	leaq	-64(%rbp), %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rbx, %rcx
	callq	*%r15
	cmpl	$0, 4(%rdi)
	jne	.LBB468_4
# BB#1:
	cmpl	$0, ng27+4(%rip)
	je	.LBB468_2
.LBB468_4:
	movq	$-1, -64(%rbp)
.LBB468_3:
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$63, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-48(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movl	(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 6232(%rsi)
	movl	4(%rax), %eax
	andl	$1, %eax
	movl	%eax, 6236(%rsi)
	leaq	208(%rsi), %rcx
	addq	$6208, %rsi             # imm = 0x1840
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg(%rip)
	addq	$136, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB468_2:
	movl	(%rdi), %eax
	addl	ng27(%rip), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -60(%rbp)
	jmp	.LBB468_3

	.def	 _execute_642;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_642
	.align	16, 0x90
_execute_642:                           # @_execute_642
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$55, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	824(%rsi), %rcx
	leaq	3464(%rsi), %rdx
	leaq	ng7(%rip), %rdi
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	880(%rsi), %rcx
	leaq	3496(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%rbx
	leaq	936(%rsi), %rcx
	addq	$3528, %rsi             # imm = 0xDC8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258856;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258856
	.align	16, 0x90
_execute_258856:                        # @_execute_258856
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258857;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258857
	.align	16, 0x90
_execute_258857:                        # @_execute_258857
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258858;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258858
	.align	16, 0x90
_execute_258858:                        # @_execute_258858
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258859;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258859
	.align	16, 0x90
_execute_258859:                        # @_execute_258859
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258860;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258860
	.align	16, 0x90
_execute_258860:                        # @_execute_258860
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258861;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258861
	.align	16, 0x90
_execute_258861:                        # @_execute_258861
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258862;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258862
	.align	16, 0x90
_execute_258862:                        # @_execute_258862
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258863;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258863
	.align	16, 0x90
_execute_258863:                        # @_execute_258863
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_644;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_644
	.align	16, 0x90
_execute_644:                           # @_execute_644
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$56, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_645;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_645
	.align	16, 0x90
_execute_645:                           # @_execute_645
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB479_1:                              # =>This Inner Loop Header: Depth=1
	movl	$57, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB479_29
# BB#2:                                 #   in Loop: Header=BB479_1 Depth=1
	jmpq	*%rax
.Ltmp1473:                              # Block address taken
.LBB479_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB479_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB479_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB479_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB479_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB479_32
.LBB479_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB479_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB479_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB479_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB479_9
# BB#34:
	movq	664(%rsi), %r8
.LBB479_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB479_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB479_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1473(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB479_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB479_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB479_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB479_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB479_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB479_13
.LBB479_12:
	testl	%eax, %eax
	je	.LBB479_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB479_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB479_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB479_15:
	testb	%al, %al
	je	.LBB479_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB479_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB479_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB479_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB479_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB479_42
.LBB479_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB479_17
.LBB479_41:
	testl	%eax, %eax
	je	.LBB479_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB479_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB479_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB479_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB479_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB479_28
.LBB479_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB479_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB479_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB479_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB479_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB479_22
.LBB479_21:
	testl	%eax, %eax
	je	.LBB479_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB479_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB479_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB479_24:
	testb	%al, %al
	je	.LBB479_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB479_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB479_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB479_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB479_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB479_55
.LBB479_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB479_26
.LBB479_54:
	testl	%eax, %eax
	je	.LBB479_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB479_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB479_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB479_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB479_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB479_28
.LBB479_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB479_28

	.def	 _execute_646;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_646
	.align	16, 0x90
_execute_646:                           # @_execute_646
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB480_1:                              # =>This Inner Loop Header: Depth=1
	movl	$58, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB480_17
# BB#2:                                 #   in Loop: Header=BB480_1 Depth=1
	jmpq	*%rax
.Ltmp1477:                              # Block address taken
.LBB480_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB480_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB480_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB480_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB480_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB480_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB480_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB480_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB480_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB480_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB480_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB480_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB480_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB480_11
.LBB480_10:
	testl	%eax, %eax
	je	.LBB480_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB480_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB480_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB480_13:
	testb	%al, %al
	je	.LBB480_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB480_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB480_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB480_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB480_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB480_29
.LBB480_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB480_15
.LBB480_28:
	testl	%eax, %eax
	je	.LBB480_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB480_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB480_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB480_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB480_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB480_17
.LBB480_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167180736, %ecx        # imm = 0x9F6F9C0
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167175568, %ecx        # imm = 0x9F6E590
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_e37c6229_89(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175568, %ecx        # imm = 0x9F6E590
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_e37c6229_89(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175568, %ecx        # imm = 0x9F6E590
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_e37c6229_89(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175568, %ecx        # imm = 0x9F6E590
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_e37c6229_89(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_e37c6229_90(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167180736, %ecx        # imm = 0x9F6F9C0
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167175568, %ecx        # imm = 0x9F6E590
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_e37c6229_89(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175568, %ecx        # imm = 0x9F6E590
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_e37c6229_89(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167175568, %ecx        # imm = 0x9F6E590
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167175568, %ecx        # imm = 0x9F6E590
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_e37c6229_89(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_e37c6229_90(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB480_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1477(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_e37c6229_89;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_e37c6229_89
	.align	16, 0x90
_subprog_m_7ddf9423_e37c6229_89:        # @_subprog_m_7ddf9423_e37c6229_89
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB481_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB481_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB481_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB481_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB481_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB481_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB481_6
.LBB481_5:
	testl	%eax, %eax
	je	.LBB481_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB481_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB481_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB481_8:
	testb	%al, %al
	je	.LBB481_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB481_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB481_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB481_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB481_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB481_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB481_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB481_160
.LBB481_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB481_10
.LBB481_159:
	testl	%eax, %eax
	je	.LBB481_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB481_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB481_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB481_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB481_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB481_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB481_148
.LBB481_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB481_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB481_13
.LBB481_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB481_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB481_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB481_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB481_148
.LBB481_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB481_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB481_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB481_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB481_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB481_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB481_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB481_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB481_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB481_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB481_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB481_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB481_23
.LBB481_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB481_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB481_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB481_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB481_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB481_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB481_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB481_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB481_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB481_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB481_182
.LBB481_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB481_27
.LBB481_181:
	testl	%eax, %eax
	je	.LBB481_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB481_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB481_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB481_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB481_29
.LBB481_28:
	testl	%eax, %eax
	je	.LBB481_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB481_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB481_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB481_31:
	testb	%al, %al
	je	.LBB481_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB481_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB481_195
.LBB481_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB481_33
.LBB481_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB481_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB481_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB481_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB481_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB481_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB481_228
.LBB481_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB481_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB481_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB481_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB481_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB481_39
.LBB481_38:
	testl	%eax, %eax
	je	.LBB481_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB481_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB481_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB481_41:
	testb	%al, %al
	je	.LBB481_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB481_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB481_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB481_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB481_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB481_209
.LBB481_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB481_43
.LBB481_208:
	testl	%eax, %eax
	je	.LBB481_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB481_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB481_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB481_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB481_45
.LBB481_44:
	testl	%eax, %eax
	je	.LBB481_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB481_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB481_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB481_47:
	testb	%al, %al
	je	.LBB481_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB481_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB481_222
.LBB481_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB481_49
.LBB481_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB481_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB481_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB481_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB481_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB481_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB481_227
.LBB481_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB481_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB481_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB481_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB481_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB481_55
.LBB481_54:
	testl	%eax, %eax
	je	.LBB481_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB481_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB481_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB481_57:
	testb	%al, %al
	je	.LBB481_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB481_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB481_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB481_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB481_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB481_240
.LBB481_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB481_59
.LBB481_239:
	testl	%eax, %eax
	je	.LBB481_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB481_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB481_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB481_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB481_61
.LBB481_60:
	testl	%eax, %eax
	je	.LBB481_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB481_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB481_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB481_63:
	testb	%al, %al
	je	.LBB481_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB481_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB481_253
.LBB481_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB481_65
.LBB481_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB481_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB481_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB481_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB481_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB481_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB481_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB481_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB481_229
.LBB481_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB481_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB481_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB481_70
.LBB481_69:
	testl	%eax, %eax
	je	.LBB481_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB481_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB481_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB481_72:
	testb	%al, %al
	je	.LBB481_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB481_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB481_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB481_265
.LBB481_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB481_74
.LBB481_264:
	testl	%eax, %eax
	je	.LBB481_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB481_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB481_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB481_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB481_76
.LBB481_75:
	testl	%eax, %eax
	je	.LBB481_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB481_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB481_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB481_78:
	testb	%al, %al
	je	.LBB481_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB481_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB481_277
.LBB481_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB481_80
.LBB481_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB481_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB481_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB481_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB481_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB481_82
.LBB481_81:
	testl	%eax, %eax
	je	.LBB481_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB481_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB481_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB481_84:
	testb	%al, %al
	je	.LBB481_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB481_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB481_288
.LBB481_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB481_86
.LBB481_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB481_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB481_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB481_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB481_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB481_88
.LBB481_87:
	testl	%eax, %eax
	je	.LBB481_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB481_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB481_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB481_90:
	testb	%al, %al
	je	.LBB481_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB481_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB481_299
.LBB481_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB481_92
.LBB481_298:
	testl	%eax, %eax
	je	.LBB481_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB481_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB481_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB481_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB481_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB481_351
.LBB481_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB481_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB481_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB481_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB481_97
.LBB481_96:
	testl	%eax, %eax
	je	.LBB481_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB481_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB481_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB481_99:
	testb	%al, %al
	je	.LBB481_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB481_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB481_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB481_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB481_311
.LBB481_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB481_101
.LBB481_310:
	testl	%eax, %eax
	je	.LBB481_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB481_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB481_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB481_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB481_103
.LBB481_102:
	testl	%eax, %eax
	je	.LBB481_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB481_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB481_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB481_105:
	testb	%al, %al
	je	.LBB481_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB481_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB481_323
.LBB481_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB481_107
.LBB481_322:
	testl	%eax, %eax
	je	.LBB481_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB481_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB481_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB481_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB481_109
.LBB481_108:
	testl	%eax, %eax
	je	.LBB481_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB481_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB481_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB481_111:
	testb	%al, %al
	je	.LBB481_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB481_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB481_334
.LBB481_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB481_113
.LBB481_333:
	testl	%eax, %eax
	je	.LBB481_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB481_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB481_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB481_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB481_115
.LBB481_114:
	testl	%eax, %eax
	je	.LBB481_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB481_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB481_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB481_117:
	testb	%al, %al
	je	.LBB481_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB481_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB481_345
.LBB481_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB481_119
.LBB481_344:
	testl	%eax, %eax
	je	.LBB481_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB481_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB481_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB481_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB481_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB481_350
.LBB481_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB481_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB481_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB481_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB481_124
.LBB481_123:
	testl	%eax, %eax
	je	.LBB481_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB481_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB481_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB481_126:
	testb	%al, %al
	je	.LBB481_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB481_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB481_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB481_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB481_359
.LBB481_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB481_128
.LBB481_358:
	testl	%eax, %eax
	je	.LBB481_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB481_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB481_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB481_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB481_130
.LBB481_129:
	testl	%eax, %eax
	je	.LBB481_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB481_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB481_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB481_132:
	testb	%al, %al
	je	.LBB481_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB481_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB481_371
.LBB481_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB481_134
.LBB481_370:
	testl	%eax, %eax
	je	.LBB481_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB481_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB481_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB481_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB481_136
.LBB481_135:
	testl	%eax, %eax
	je	.LBB481_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB481_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB481_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB481_138:
	testb	%al, %al
	je	.LBB481_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB481_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB481_382
.LBB481_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB481_140
.LBB481_381:
	testl	%eax, %eax
	je	.LBB481_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB481_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB481_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB481_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB481_142
.LBB481_141:
	testl	%eax, %eax
	je	.LBB481_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB481_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB481_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB481_144:
	testb	%al, %al
	je	.LBB481_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB481_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB481_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB481_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB481_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB481_393
.LBB481_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB481_146
.LBB481_392:
	testl	%eax, %eax
	je	.LBB481_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB481_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB481_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB481_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB481_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB481_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB481_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB481_148
.LBB481_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB481_148

	.def	 _subprog_m_7ddf9423_e37c6229_90;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_e37c6229_90
	.align	16, 0x90
_subprog_m_7ddf9423_e37c6229_90:        # @_subprog_m_7ddf9423_e37c6229_90
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB482_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB482_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB482_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB482_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB482_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB482_5
.LBB482_4:
	testl	%eax, %eax
	je	.LBB482_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB482_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB482_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB482_7:
	testb	%al, %al
	je	.LBB482_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB482_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB482_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB482_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB482_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB482_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB482_73
.LBB482_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB482_9
.LBB482_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB482_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB482_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB482_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB482_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB482_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB482_63
.LBB482_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB482_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB482_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB482_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB482_15
.LBB482_14:
	testl	%eax, %eax
	je	.LBB482_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB482_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB482_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB482_17:
	testb	%al, %al
	je	.LBB482_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB482_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB482_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB482_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB482_87
.LBB482_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB482_19
.LBB482_86:
	testl	%eax, %eax
	je	.LBB482_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB482_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB482_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB482_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB482_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB482_21
.LBB482_20:
	testl	%eax, %eax
	je	.LBB482_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB482_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB482_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB482_23:
	testb	%al, %al
	je	.LBB482_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB482_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB482_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB482_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB482_98
.LBB482_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB482_25
.LBB482_97:
	testl	%eax, %eax
	je	.LBB482_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB482_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB482_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB482_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB482_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB482_103
.LBB482_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB482_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB482_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB482_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB482_30
.LBB482_29:
	testl	%eax, %eax
	je	.LBB482_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB482_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB482_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB482_32:
	testb	%al, %al
	je	.LBB482_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB482_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB482_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB482_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB482_114
.LBB482_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB482_34
.LBB482_113:
	testl	%eax, %eax
	je	.LBB482_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB482_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB482_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB482_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB482_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB482_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB482_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB482_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB482_39
.LBB482_38:
	testl	%eax, %eax
	je	.LBB482_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB482_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB482_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB482_41:
	testb	%al, %al
	je	.LBB482_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB482_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB482_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB482_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB482_126
.LBB482_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB482_43
.LBB482_125:
	testl	%eax, %eax
	je	.LBB482_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB482_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB482_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB482_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB482_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB482_104
.LBB482_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB482_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB482_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB482_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB482_48
.LBB482_47:
	testl	%eax, %eax
	je	.LBB482_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB482_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB482_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB482_50:
	testb	%al, %al
	je	.LBB482_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB482_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB482_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB482_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB482_139
.LBB482_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB482_52
.LBB482_138:
	testl	%eax, %eax
	je	.LBB482_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB482_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB482_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB482_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB482_53
.LBB482_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB482_103:
	xorl	%r8d, %r8d
.LBB482_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB482_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB482_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB482_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB482_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB482_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB482_57
.LBB482_56:
	testl	%eax, %eax
	je	.LBB482_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB482_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB482_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB482_59:
	testb	%al, %al
	je	.LBB482_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB482_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB482_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB482_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB482_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB482_152
.LBB482_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB482_61
.LBB482_151:
	testl	%eax, %eax
	je	.LBB482_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB482_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB482_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB482_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB482_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB482_104
.LBB482_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB482_63

	.def	 _execute_649;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_649
	.align	16, 0x90
_execute_649:                           # @_execute_649
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$59, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng84(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258864;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258864
	.align	16, 0x90
_execute_258864:                        # @_execute_258864
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258865;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258865
	.align	16, 0x90
_execute_258865:                        # @_execute_258865
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258866;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258866
	.align	16, 0x90
_execute_258866:                        # @_execute_258866
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258867;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258867
	.align	16, 0x90
_execute_258867:                        # @_execute_258867
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258868;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258868
	.align	16, 0x90
_execute_258868:                        # @_execute_258868
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258869;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258869
	.align	16, 0x90
_execute_258869:                        # @_execute_258869
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258870;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258870
	.align	16, 0x90
_execute_258870:                        # @_execute_258870
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258871;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258871
	.align	16, 0x90
_execute_258871:                        # @_execute_258871
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_651;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_651
	.align	16, 0x90
_execute_651:                           # @_execute_651
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$60, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_652;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_652
	.align	16, 0x90
_execute_652:                           # @_execute_652
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB493_1:                              # =>This Inner Loop Header: Depth=1
	movl	$61, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB493_29
# BB#2:                                 #   in Loop: Header=BB493_1 Depth=1
	jmpq	*%rax
.Ltmp1517:                              # Block address taken
.LBB493_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB493_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB493_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB493_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB493_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB493_32
.LBB493_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB493_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB493_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB493_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB493_9
# BB#34:
	movq	664(%rsi), %r8
.LBB493_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB493_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB493_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1517(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB493_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB493_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB493_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB493_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB493_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB493_13
.LBB493_12:
	testl	%eax, %eax
	je	.LBB493_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB493_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB493_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB493_15:
	testb	%al, %al
	je	.LBB493_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB493_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB493_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB493_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB493_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB493_42
.LBB493_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB493_17
.LBB493_41:
	testl	%eax, %eax
	je	.LBB493_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB493_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB493_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB493_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB493_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB493_28
.LBB493_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB493_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB493_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB493_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB493_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB493_22
.LBB493_21:
	testl	%eax, %eax
	je	.LBB493_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB493_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB493_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB493_24:
	testb	%al, %al
	je	.LBB493_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB493_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB493_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB493_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB493_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB493_55
.LBB493_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB493_26
.LBB493_54:
	testl	%eax, %eax
	je	.LBB493_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB493_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB493_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB493_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB493_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB493_28
.LBB493_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB493_28

	.def	 _execute_653;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_653
	.align	16, 0x90
_execute_653:                           # @_execute_653
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB494_1:                              # =>This Inner Loop Header: Depth=1
	movl	$62, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB494_17
# BB#2:                                 #   in Loop: Header=BB494_1 Depth=1
	jmpq	*%rax
.Ltmp1521:                              # Block address taken
.LBB494_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB494_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB494_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB494_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB494_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB494_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB494_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB494_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB494_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB494_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB494_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB494_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB494_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB494_11
.LBB494_10:
	testl	%eax, %eax
	je	.LBB494_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB494_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB494_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB494_13:
	testb	%al, %al
	je	.LBB494_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB494_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB494_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB494_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB494_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB494_29
.LBB494_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB494_15
.LBB494_28:
	testl	%eax, %eax
	je	.LBB494_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB494_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB494_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB494_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB494_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB494_17
.LBB494_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167179672, %ecx        # imm = 0x9F6F598
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167178304, %ecx        # imm = 0x9F6F040
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_e1df224c_91(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178304, %ecx        # imm = 0x9F6F040
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_e1df224c_91(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178304, %ecx        # imm = 0x9F6F040
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_e1df224c_91(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178304, %ecx        # imm = 0x9F6F040
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_e1df224c_91(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_e1df224c_92(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167179672, %ecx        # imm = 0x9F6F598
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167178304, %ecx        # imm = 0x9F6F040
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_e1df224c_91(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167178304, %ecx        # imm = 0x9F6F040
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_e1df224c_91(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167178304, %ecx        # imm = 0x9F6F040
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167178304, %ecx        # imm = 0x9F6F040
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_e1df224c_91(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_e1df224c_92(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB494_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1521(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_e1df224c_91;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_e1df224c_91
	.align	16, 0x90
_subprog_m_7ddf9423_e1df224c_91:        # @_subprog_m_7ddf9423_e1df224c_91
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB495_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB495_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB495_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB495_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB495_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB495_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB495_6
.LBB495_5:
	testl	%eax, %eax
	je	.LBB495_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB495_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB495_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB495_8:
	testb	%al, %al
	je	.LBB495_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB495_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB495_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB495_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB495_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB495_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB495_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB495_160
.LBB495_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB495_10
.LBB495_159:
	testl	%eax, %eax
	je	.LBB495_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB495_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB495_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB495_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB495_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB495_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB495_148
.LBB495_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB495_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB495_13
.LBB495_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB495_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB495_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB495_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB495_148
.LBB495_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB495_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB495_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB495_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB495_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB495_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB495_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB495_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB495_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB495_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB495_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB495_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB495_23
.LBB495_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB495_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB495_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB495_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB495_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB495_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB495_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB495_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB495_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB495_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB495_182
.LBB495_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB495_27
.LBB495_181:
	testl	%eax, %eax
	je	.LBB495_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB495_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB495_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB495_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB495_29
.LBB495_28:
	testl	%eax, %eax
	je	.LBB495_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB495_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB495_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB495_31:
	testb	%al, %al
	je	.LBB495_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB495_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB495_195
.LBB495_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB495_33
.LBB495_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB495_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB495_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB495_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB495_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB495_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB495_228
.LBB495_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB495_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB495_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB495_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB495_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB495_39
.LBB495_38:
	testl	%eax, %eax
	je	.LBB495_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB495_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB495_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB495_41:
	testb	%al, %al
	je	.LBB495_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB495_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB495_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB495_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB495_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB495_209
.LBB495_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB495_43
.LBB495_208:
	testl	%eax, %eax
	je	.LBB495_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB495_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB495_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB495_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB495_45
.LBB495_44:
	testl	%eax, %eax
	je	.LBB495_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB495_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB495_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB495_47:
	testb	%al, %al
	je	.LBB495_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB495_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB495_222
.LBB495_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB495_49
.LBB495_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB495_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB495_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB495_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB495_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB495_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB495_227
.LBB495_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB495_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB495_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB495_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB495_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB495_55
.LBB495_54:
	testl	%eax, %eax
	je	.LBB495_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB495_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB495_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB495_57:
	testb	%al, %al
	je	.LBB495_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB495_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB495_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB495_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB495_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB495_240
.LBB495_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB495_59
.LBB495_239:
	testl	%eax, %eax
	je	.LBB495_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB495_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB495_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB495_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB495_61
.LBB495_60:
	testl	%eax, %eax
	je	.LBB495_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB495_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB495_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB495_63:
	testb	%al, %al
	je	.LBB495_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB495_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB495_253
.LBB495_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB495_65
.LBB495_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB495_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB495_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB495_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB495_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB495_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB495_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB495_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB495_229
.LBB495_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB495_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB495_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB495_70
.LBB495_69:
	testl	%eax, %eax
	je	.LBB495_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB495_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB495_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB495_72:
	testb	%al, %al
	je	.LBB495_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB495_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB495_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB495_265
.LBB495_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB495_74
.LBB495_264:
	testl	%eax, %eax
	je	.LBB495_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB495_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB495_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB495_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB495_76
.LBB495_75:
	testl	%eax, %eax
	je	.LBB495_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB495_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB495_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB495_78:
	testb	%al, %al
	je	.LBB495_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB495_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB495_277
.LBB495_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB495_80
.LBB495_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB495_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB495_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB495_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB495_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB495_82
.LBB495_81:
	testl	%eax, %eax
	je	.LBB495_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB495_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB495_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB495_84:
	testb	%al, %al
	je	.LBB495_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB495_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB495_288
.LBB495_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB495_86
.LBB495_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB495_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB495_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB495_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB495_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB495_88
.LBB495_87:
	testl	%eax, %eax
	je	.LBB495_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB495_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB495_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB495_90:
	testb	%al, %al
	je	.LBB495_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB495_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB495_299
.LBB495_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB495_92
.LBB495_298:
	testl	%eax, %eax
	je	.LBB495_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB495_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB495_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB495_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB495_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB495_351
.LBB495_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB495_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB495_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB495_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB495_97
.LBB495_96:
	testl	%eax, %eax
	je	.LBB495_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB495_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB495_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB495_99:
	testb	%al, %al
	je	.LBB495_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB495_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB495_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB495_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB495_311
.LBB495_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB495_101
.LBB495_310:
	testl	%eax, %eax
	je	.LBB495_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB495_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB495_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB495_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB495_103
.LBB495_102:
	testl	%eax, %eax
	je	.LBB495_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB495_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB495_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB495_105:
	testb	%al, %al
	je	.LBB495_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB495_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB495_323
.LBB495_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB495_107
.LBB495_322:
	testl	%eax, %eax
	je	.LBB495_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB495_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB495_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB495_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB495_109
.LBB495_108:
	testl	%eax, %eax
	je	.LBB495_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB495_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB495_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB495_111:
	testb	%al, %al
	je	.LBB495_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB495_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB495_334
.LBB495_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB495_113
.LBB495_333:
	testl	%eax, %eax
	je	.LBB495_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB495_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB495_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB495_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB495_115
.LBB495_114:
	testl	%eax, %eax
	je	.LBB495_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB495_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB495_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB495_117:
	testb	%al, %al
	je	.LBB495_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB495_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB495_345
.LBB495_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB495_119
.LBB495_344:
	testl	%eax, %eax
	je	.LBB495_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB495_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB495_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB495_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB495_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB495_350
.LBB495_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB495_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB495_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB495_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB495_124
.LBB495_123:
	testl	%eax, %eax
	je	.LBB495_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB495_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB495_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB495_126:
	testb	%al, %al
	je	.LBB495_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB495_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB495_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB495_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB495_359
.LBB495_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB495_128
.LBB495_358:
	testl	%eax, %eax
	je	.LBB495_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB495_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB495_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB495_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB495_130
.LBB495_129:
	testl	%eax, %eax
	je	.LBB495_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB495_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB495_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB495_132:
	testb	%al, %al
	je	.LBB495_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB495_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB495_371
.LBB495_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB495_134
.LBB495_370:
	testl	%eax, %eax
	je	.LBB495_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB495_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB495_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB495_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB495_136
.LBB495_135:
	testl	%eax, %eax
	je	.LBB495_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB495_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB495_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB495_138:
	testb	%al, %al
	je	.LBB495_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB495_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB495_382
.LBB495_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB495_140
.LBB495_381:
	testl	%eax, %eax
	je	.LBB495_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB495_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB495_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB495_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB495_142
.LBB495_141:
	testl	%eax, %eax
	je	.LBB495_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB495_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB495_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB495_144:
	testb	%al, %al
	je	.LBB495_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB495_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB495_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB495_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB495_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB495_393
.LBB495_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB495_146
.LBB495_392:
	testl	%eax, %eax
	je	.LBB495_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB495_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB495_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB495_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB495_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB495_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB495_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB495_148
.LBB495_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB495_148

	.def	 _subprog_m_7ddf9423_e1df224c_92;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_e1df224c_92
	.align	16, 0x90
_subprog_m_7ddf9423_e1df224c_92:        # @_subprog_m_7ddf9423_e1df224c_92
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB496_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB496_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB496_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB496_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB496_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB496_5
.LBB496_4:
	testl	%eax, %eax
	je	.LBB496_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB496_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB496_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB496_7:
	testb	%al, %al
	je	.LBB496_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB496_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB496_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB496_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB496_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB496_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB496_73
.LBB496_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB496_9
.LBB496_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB496_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB496_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB496_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB496_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB496_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB496_63
.LBB496_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB496_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB496_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB496_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB496_15
.LBB496_14:
	testl	%eax, %eax
	je	.LBB496_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB496_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB496_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB496_17:
	testb	%al, %al
	je	.LBB496_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB496_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB496_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB496_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB496_87
.LBB496_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB496_19
.LBB496_86:
	testl	%eax, %eax
	je	.LBB496_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB496_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB496_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB496_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB496_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB496_21
.LBB496_20:
	testl	%eax, %eax
	je	.LBB496_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB496_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB496_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB496_23:
	testb	%al, %al
	je	.LBB496_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB496_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB496_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB496_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB496_98
.LBB496_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB496_25
.LBB496_97:
	testl	%eax, %eax
	je	.LBB496_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB496_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB496_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB496_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB496_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB496_103
.LBB496_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB496_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB496_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB496_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB496_30
.LBB496_29:
	testl	%eax, %eax
	je	.LBB496_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB496_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB496_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB496_32:
	testb	%al, %al
	je	.LBB496_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB496_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB496_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB496_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB496_114
.LBB496_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB496_34
.LBB496_113:
	testl	%eax, %eax
	je	.LBB496_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB496_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB496_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB496_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB496_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB496_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB496_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB496_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB496_39
.LBB496_38:
	testl	%eax, %eax
	je	.LBB496_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB496_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB496_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB496_41:
	testb	%al, %al
	je	.LBB496_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB496_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB496_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB496_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB496_126
.LBB496_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB496_43
.LBB496_125:
	testl	%eax, %eax
	je	.LBB496_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB496_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB496_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB496_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB496_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB496_104
.LBB496_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB496_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB496_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB496_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB496_48
.LBB496_47:
	testl	%eax, %eax
	je	.LBB496_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB496_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB496_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB496_50:
	testb	%al, %al
	je	.LBB496_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB496_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB496_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB496_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB496_139
.LBB496_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB496_52
.LBB496_138:
	testl	%eax, %eax
	je	.LBB496_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB496_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB496_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB496_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB496_53
.LBB496_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB496_103:
	xorl	%r8d, %r8d
.LBB496_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB496_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB496_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB496_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB496_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB496_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB496_57
.LBB496_56:
	testl	%eax, %eax
	je	.LBB496_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB496_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB496_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB496_59:
	testb	%al, %al
	je	.LBB496_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB496_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB496_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB496_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB496_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB496_152
.LBB496_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB496_61
.LBB496_151:
	testl	%eax, %eax
	je	.LBB496_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB496_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB496_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB496_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB496_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB496_104
.LBB496_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB496_63

	.def	 _execute_656;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_656
	.align	16, 0x90
_execute_656:                           # @_execute_656
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$63, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng87(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258872;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258872
	.align	16, 0x90
_execute_258872:                        # @_execute_258872
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258873;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258873
	.align	16, 0x90
_execute_258873:                        # @_execute_258873
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258874;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258874
	.align	16, 0x90
_execute_258874:                        # @_execute_258874
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258875;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258875
	.align	16, 0x90
_execute_258875:                        # @_execute_258875
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258876;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258876
	.align	16, 0x90
_execute_258876:                        # @_execute_258876
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258877;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258877
	.align	16, 0x90
_execute_258877:                        # @_execute_258877
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258878;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258878
	.align	16, 0x90
_execute_258878:                        # @_execute_258878
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258879;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258879
	.align	16, 0x90
_execute_258879:                        # @_execute_258879
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_658;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_658
	.align	16, 0x90
_execute_658:                           # @_execute_658
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$64, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_659;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_659
	.align	16, 0x90
_execute_659:                           # @_execute_659
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB507_1:                              # =>This Inner Loop Header: Depth=1
	movl	$65, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB507_29
# BB#2:                                 #   in Loop: Header=BB507_1 Depth=1
	jmpq	*%rax
.Ltmp1561:                              # Block address taken
.LBB507_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB507_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB507_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB507_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB507_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB507_32
.LBB507_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB507_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB507_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB507_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB507_9
# BB#34:
	movq	664(%rsi), %r8
.LBB507_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB507_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB507_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1561(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB507_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB507_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB507_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB507_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB507_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB507_13
.LBB507_12:
	testl	%eax, %eax
	je	.LBB507_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB507_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB507_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB507_15:
	testb	%al, %al
	je	.LBB507_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB507_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB507_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB507_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB507_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB507_42
.LBB507_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB507_17
.LBB507_41:
	testl	%eax, %eax
	je	.LBB507_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB507_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB507_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB507_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB507_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB507_28
.LBB507_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB507_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB507_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB507_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB507_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB507_22
.LBB507_21:
	testl	%eax, %eax
	je	.LBB507_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB507_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB507_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB507_24:
	testb	%al, %al
	je	.LBB507_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB507_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB507_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB507_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB507_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB507_55
.LBB507_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB507_26
.LBB507_54:
	testl	%eax, %eax
	je	.LBB507_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB507_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB507_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB507_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB507_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB507_28
.LBB507_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB507_28

	.def	 _execute_660;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_660
	.align	16, 0x90
_execute_660:                           # @_execute_660
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB508_1:                              # =>This Inner Loop Header: Depth=1
	movl	$66, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB508_17
# BB#2:                                 #   in Loop: Header=BB508_1 Depth=1
	jmpq	*%rax
.Ltmp1565:                              # Block address taken
.LBB508_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB508_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB508_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB508_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB508_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB508_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB508_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB508_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB508_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB508_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB508_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB508_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB508_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB508_11
.LBB508_10:
	testl	%eax, %eax
	je	.LBB508_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB508_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB508_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB508_13:
	testb	%al, %al
	je	.LBB508_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB508_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB508_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB508_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB508_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB508_29
.LBB508_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB508_15
.LBB508_28:
	testl	%eax, %eax
	je	.LBB508_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB508_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB508_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB508_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB508_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB508_17
.LBB508_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167179216, %ecx        # imm = 0x9F6F3D0
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167180280, %ecx        # imm = 0x9F6F7F8
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_1a68e5d0_93(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180280, %ecx        # imm = 0x9F6F7F8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_1a68e5d0_93(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180280, %ecx        # imm = 0x9F6F7F8
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_1a68e5d0_93(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180280, %ecx        # imm = 0x9F6F7F8
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_1a68e5d0_93(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_1a68e5d0_94(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167179216, %ecx        # imm = 0x9F6F3D0
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167180280, %ecx        # imm = 0x9F6F7F8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_1a68e5d0_93(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180280, %ecx        # imm = 0x9F6F7F8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_1a68e5d0_93(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167180280, %ecx        # imm = 0x9F6F7F8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167180280, %ecx        # imm = 0x9F6F7F8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_1a68e5d0_93(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_1a68e5d0_94(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB508_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1565(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_1a68e5d0_93;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_1a68e5d0_93
	.align	16, 0x90
_subprog_m_7ddf9423_1a68e5d0_93:        # @_subprog_m_7ddf9423_1a68e5d0_93
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB509_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB509_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB509_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB509_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB509_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB509_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB509_6
.LBB509_5:
	testl	%eax, %eax
	je	.LBB509_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB509_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB509_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB509_8:
	testb	%al, %al
	je	.LBB509_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB509_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB509_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB509_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB509_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB509_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB509_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB509_160
.LBB509_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB509_10
.LBB509_159:
	testl	%eax, %eax
	je	.LBB509_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB509_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB509_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB509_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB509_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB509_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB509_148
.LBB509_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB509_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB509_13
.LBB509_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB509_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB509_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB509_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB509_148
.LBB509_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB509_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB509_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB509_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB509_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB509_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB509_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB509_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB509_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB509_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB509_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB509_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB509_23
.LBB509_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB509_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB509_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB509_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB509_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB509_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB509_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB509_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB509_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB509_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB509_182
.LBB509_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB509_27
.LBB509_181:
	testl	%eax, %eax
	je	.LBB509_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB509_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB509_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB509_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB509_29
.LBB509_28:
	testl	%eax, %eax
	je	.LBB509_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB509_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB509_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB509_31:
	testb	%al, %al
	je	.LBB509_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB509_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB509_195
.LBB509_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB509_33
.LBB509_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB509_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB509_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB509_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB509_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB509_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB509_228
.LBB509_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB509_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB509_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB509_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB509_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB509_39
.LBB509_38:
	testl	%eax, %eax
	je	.LBB509_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB509_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB509_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB509_41:
	testb	%al, %al
	je	.LBB509_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB509_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB509_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB509_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB509_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB509_209
.LBB509_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB509_43
.LBB509_208:
	testl	%eax, %eax
	je	.LBB509_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB509_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB509_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB509_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB509_45
.LBB509_44:
	testl	%eax, %eax
	je	.LBB509_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB509_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB509_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB509_47:
	testb	%al, %al
	je	.LBB509_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB509_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB509_222
.LBB509_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB509_49
.LBB509_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB509_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB509_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB509_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB509_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB509_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB509_227
.LBB509_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB509_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB509_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB509_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB509_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB509_55
.LBB509_54:
	testl	%eax, %eax
	je	.LBB509_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB509_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB509_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB509_57:
	testb	%al, %al
	je	.LBB509_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB509_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB509_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB509_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB509_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB509_240
.LBB509_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB509_59
.LBB509_239:
	testl	%eax, %eax
	je	.LBB509_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB509_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB509_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB509_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB509_61
.LBB509_60:
	testl	%eax, %eax
	je	.LBB509_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB509_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB509_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB509_63:
	testb	%al, %al
	je	.LBB509_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB509_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB509_253
.LBB509_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB509_65
.LBB509_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB509_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB509_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB509_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB509_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB509_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB509_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB509_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB509_229
.LBB509_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB509_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB509_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB509_70
.LBB509_69:
	testl	%eax, %eax
	je	.LBB509_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB509_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB509_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB509_72:
	testb	%al, %al
	je	.LBB509_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB509_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB509_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB509_265
.LBB509_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB509_74
.LBB509_264:
	testl	%eax, %eax
	je	.LBB509_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB509_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB509_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB509_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB509_76
.LBB509_75:
	testl	%eax, %eax
	je	.LBB509_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB509_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB509_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB509_78:
	testb	%al, %al
	je	.LBB509_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB509_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB509_277
.LBB509_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB509_80
.LBB509_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB509_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB509_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB509_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB509_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB509_82
.LBB509_81:
	testl	%eax, %eax
	je	.LBB509_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB509_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB509_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB509_84:
	testb	%al, %al
	je	.LBB509_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB509_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB509_288
.LBB509_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB509_86
.LBB509_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB509_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB509_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB509_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB509_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB509_88
.LBB509_87:
	testl	%eax, %eax
	je	.LBB509_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB509_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB509_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB509_90:
	testb	%al, %al
	je	.LBB509_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB509_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB509_299
.LBB509_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB509_92
.LBB509_298:
	testl	%eax, %eax
	je	.LBB509_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB509_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB509_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB509_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB509_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB509_351
.LBB509_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB509_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB509_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB509_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB509_97
.LBB509_96:
	testl	%eax, %eax
	je	.LBB509_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB509_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB509_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB509_99:
	testb	%al, %al
	je	.LBB509_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB509_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB509_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB509_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB509_311
.LBB509_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB509_101
.LBB509_310:
	testl	%eax, %eax
	je	.LBB509_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB509_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB509_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB509_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB509_103
.LBB509_102:
	testl	%eax, %eax
	je	.LBB509_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB509_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB509_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB509_105:
	testb	%al, %al
	je	.LBB509_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB509_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB509_323
.LBB509_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB509_107
.LBB509_322:
	testl	%eax, %eax
	je	.LBB509_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB509_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB509_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB509_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB509_109
.LBB509_108:
	testl	%eax, %eax
	je	.LBB509_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB509_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB509_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB509_111:
	testb	%al, %al
	je	.LBB509_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB509_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB509_334
.LBB509_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB509_113
.LBB509_333:
	testl	%eax, %eax
	je	.LBB509_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB509_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB509_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB509_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB509_115
.LBB509_114:
	testl	%eax, %eax
	je	.LBB509_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB509_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB509_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB509_117:
	testb	%al, %al
	je	.LBB509_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB509_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB509_345
.LBB509_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB509_119
.LBB509_344:
	testl	%eax, %eax
	je	.LBB509_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB509_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB509_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB509_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB509_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB509_350
.LBB509_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB509_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB509_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB509_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB509_124
.LBB509_123:
	testl	%eax, %eax
	je	.LBB509_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB509_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB509_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB509_126:
	testb	%al, %al
	je	.LBB509_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB509_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB509_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB509_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB509_359
.LBB509_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB509_128
.LBB509_358:
	testl	%eax, %eax
	je	.LBB509_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB509_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB509_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB509_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB509_130
.LBB509_129:
	testl	%eax, %eax
	je	.LBB509_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB509_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB509_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB509_132:
	testb	%al, %al
	je	.LBB509_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB509_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB509_371
.LBB509_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB509_134
.LBB509_370:
	testl	%eax, %eax
	je	.LBB509_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB509_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB509_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB509_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB509_136
.LBB509_135:
	testl	%eax, %eax
	je	.LBB509_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB509_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB509_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB509_138:
	testb	%al, %al
	je	.LBB509_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB509_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB509_382
.LBB509_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB509_140
.LBB509_381:
	testl	%eax, %eax
	je	.LBB509_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB509_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB509_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB509_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB509_142
.LBB509_141:
	testl	%eax, %eax
	je	.LBB509_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB509_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB509_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB509_144:
	testb	%al, %al
	je	.LBB509_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB509_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB509_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB509_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB509_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB509_393
.LBB509_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB509_146
.LBB509_392:
	testl	%eax, %eax
	je	.LBB509_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB509_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB509_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB509_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB509_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB509_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB509_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB509_148
.LBB509_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB509_148

	.def	 _subprog_m_7ddf9423_1a68e5d0_94;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_1a68e5d0_94
	.align	16, 0x90
_subprog_m_7ddf9423_1a68e5d0_94:        # @_subprog_m_7ddf9423_1a68e5d0_94
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB510_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB510_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB510_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB510_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB510_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB510_5
.LBB510_4:
	testl	%eax, %eax
	je	.LBB510_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB510_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB510_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB510_7:
	testb	%al, %al
	je	.LBB510_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB510_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB510_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB510_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB510_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB510_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB510_73
.LBB510_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB510_9
.LBB510_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB510_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB510_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB510_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB510_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB510_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB510_63
.LBB510_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB510_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB510_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB510_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB510_15
.LBB510_14:
	testl	%eax, %eax
	je	.LBB510_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB510_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB510_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB510_17:
	testb	%al, %al
	je	.LBB510_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB510_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB510_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB510_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB510_87
.LBB510_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB510_19
.LBB510_86:
	testl	%eax, %eax
	je	.LBB510_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB510_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB510_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB510_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB510_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB510_21
.LBB510_20:
	testl	%eax, %eax
	je	.LBB510_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB510_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB510_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB510_23:
	testb	%al, %al
	je	.LBB510_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB510_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB510_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB510_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB510_98
.LBB510_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB510_25
.LBB510_97:
	testl	%eax, %eax
	je	.LBB510_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB510_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB510_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB510_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB510_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB510_103
.LBB510_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB510_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB510_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB510_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB510_30
.LBB510_29:
	testl	%eax, %eax
	je	.LBB510_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB510_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB510_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB510_32:
	testb	%al, %al
	je	.LBB510_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB510_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB510_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB510_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB510_114
.LBB510_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB510_34
.LBB510_113:
	testl	%eax, %eax
	je	.LBB510_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB510_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB510_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB510_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB510_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB510_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB510_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB510_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB510_39
.LBB510_38:
	testl	%eax, %eax
	je	.LBB510_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB510_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB510_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB510_41:
	testb	%al, %al
	je	.LBB510_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB510_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB510_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB510_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB510_126
.LBB510_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB510_43
.LBB510_125:
	testl	%eax, %eax
	je	.LBB510_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB510_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB510_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB510_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB510_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB510_104
.LBB510_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB510_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB510_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB510_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB510_48
.LBB510_47:
	testl	%eax, %eax
	je	.LBB510_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB510_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB510_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB510_50:
	testb	%al, %al
	je	.LBB510_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB510_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB510_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB510_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB510_139
.LBB510_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB510_52
.LBB510_138:
	testl	%eax, %eax
	je	.LBB510_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB510_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB510_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB510_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB510_53
.LBB510_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB510_103:
	xorl	%r8d, %r8d
.LBB510_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB510_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB510_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB510_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB510_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB510_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB510_57
.LBB510_56:
	testl	%eax, %eax
	je	.LBB510_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB510_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB510_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB510_59:
	testb	%al, %al
	je	.LBB510_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB510_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB510_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB510_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB510_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB510_152
.LBB510_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB510_61
.LBB510_151:
	testl	%eax, %eax
	je	.LBB510_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB510_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB510_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB510_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB510_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB510_104
.LBB510_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB510_63

	.def	 _execute_663;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_663
	.align	16, 0x90
_execute_663:                           # @_execute_663
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$67, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng90(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258894;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258894
	.align	16, 0x90
_execute_258894:                        # @_execute_258894
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258895;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258895
	.align	16, 0x90
_execute_258895:                        # @_execute_258895
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258896;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258896
	.align	16, 0x90
_execute_258896:                        # @_execute_258896
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258897;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258897
	.align	16, 0x90
_execute_258897:                        # @_execute_258897
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258898;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258898
	.align	16, 0x90
_execute_258898:                        # @_execute_258898
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258899;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258899
	.align	16, 0x90
_execute_258899:                        # @_execute_258899
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258900;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258900
	.align	16, 0x90
_execute_258900:                        # @_execute_258900
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258901;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258901
	.align	16, 0x90
_execute_258901:                        # @_execute_258901
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_666;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_666
	.align	16, 0x90
_execute_666:                           # @_execute_666
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$68, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_667;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_667
	.align	16, 0x90
_execute_667:                           # @_execute_667
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB521_1:                              # =>This Inner Loop Header: Depth=1
	movl	$69, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB521_29
# BB#2:                                 #   in Loop: Header=BB521_1 Depth=1
	jmpq	*%rax
.Ltmp1605:                              # Block address taken
.LBB521_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB521_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB521_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB521_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB521_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB521_32
.LBB521_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB521_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB521_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB521_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB521_9
# BB#34:
	movq	664(%rsi), %r8
.LBB521_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB521_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB521_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1605(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB521_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB521_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB521_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB521_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB521_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB521_13
.LBB521_12:
	testl	%eax, %eax
	je	.LBB521_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB521_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB521_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB521_15:
	testb	%al, %al
	je	.LBB521_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB521_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB521_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB521_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB521_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB521_42
.LBB521_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB521_17
.LBB521_41:
	testl	%eax, %eax
	je	.LBB521_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB521_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB521_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB521_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB521_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB521_28
.LBB521_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB521_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB521_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB521_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB521_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB521_22
.LBB521_21:
	testl	%eax, %eax
	je	.LBB521_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB521_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB521_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB521_24:
	testb	%al, %al
	je	.LBB521_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB521_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB521_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB521_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB521_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB521_55
.LBB521_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB521_26
.LBB521_54:
	testl	%eax, %eax
	je	.LBB521_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB521_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB521_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB521_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB521_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB521_28
.LBB521_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB521_28

	.def	 _execute_668;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_668
	.align	16, 0x90
_execute_668:                           # @_execute_668
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB522_1:                              # =>This Inner Loop Header: Depth=1
	movl	$70, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB522_17
# BB#2:                                 #   in Loop: Header=BB522_1 Depth=1
	jmpq	*%rax
.Ltmp1609:                              # Block address taken
.LBB522_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB522_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB522_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB522_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB522_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB522_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB522_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB522_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB522_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB522_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB522_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB522_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB522_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB522_11
.LBB522_10:
	testl	%eax, %eax
	je	.LBB522_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB522_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB522_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB522_13:
	testb	%al, %al
	je	.LBB522_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB522_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB522_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB522_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB522_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB522_29
.LBB522_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB522_15
.LBB522_28:
	testl	%eax, %eax
	je	.LBB522_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB522_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB522_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB522_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB522_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB522_17
.LBB522_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167180888, %ecx        # imm = 0x9F6FA58
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167175720, %ecx        # imm = 0x9F6E628
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_ca3db043_95(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175720, %ecx        # imm = 0x9F6E628
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_ca3db043_95(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175720, %ecx        # imm = 0x9F6E628
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_ca3db043_95(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175720, %ecx        # imm = 0x9F6E628
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_ca3db043_95(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_ca3db043_96(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167180888, %ecx        # imm = 0x9F6FA58
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167175720, %ecx        # imm = 0x9F6E628
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_ca3db043_95(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167175720, %ecx        # imm = 0x9F6E628
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_ca3db043_95(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167175720, %ecx        # imm = 0x9F6E628
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167175720, %ecx        # imm = 0x9F6E628
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_ca3db043_95(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_ca3db043_96(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB522_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1609(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_ca3db043_95;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_ca3db043_95
	.align	16, 0x90
_subprog_m_7ddf9423_ca3db043_95:        # @_subprog_m_7ddf9423_ca3db043_95
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB523_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB523_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB523_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB523_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB523_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB523_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB523_6
.LBB523_5:
	testl	%eax, %eax
	je	.LBB523_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB523_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB523_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB523_8:
	testb	%al, %al
	je	.LBB523_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB523_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB523_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB523_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB523_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB523_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB523_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB523_160
.LBB523_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB523_10
.LBB523_159:
	testl	%eax, %eax
	je	.LBB523_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB523_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB523_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB523_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB523_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB523_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB523_148
.LBB523_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB523_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB523_13
.LBB523_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB523_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB523_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB523_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB523_148
.LBB523_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB523_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB523_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB523_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB523_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB523_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB523_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB523_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB523_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB523_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB523_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB523_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB523_23
.LBB523_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB523_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB523_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB523_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB523_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB523_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB523_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB523_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB523_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB523_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB523_182
.LBB523_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB523_27
.LBB523_181:
	testl	%eax, %eax
	je	.LBB523_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB523_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB523_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB523_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB523_29
.LBB523_28:
	testl	%eax, %eax
	je	.LBB523_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB523_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB523_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB523_31:
	testb	%al, %al
	je	.LBB523_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB523_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB523_195
.LBB523_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB523_33
.LBB523_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB523_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB523_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB523_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB523_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB523_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB523_228
.LBB523_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB523_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB523_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB523_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB523_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB523_39
.LBB523_38:
	testl	%eax, %eax
	je	.LBB523_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB523_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB523_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB523_41:
	testb	%al, %al
	je	.LBB523_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB523_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB523_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB523_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB523_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB523_209
.LBB523_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB523_43
.LBB523_208:
	testl	%eax, %eax
	je	.LBB523_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB523_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB523_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB523_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB523_45
.LBB523_44:
	testl	%eax, %eax
	je	.LBB523_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB523_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB523_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB523_47:
	testb	%al, %al
	je	.LBB523_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB523_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB523_222
.LBB523_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB523_49
.LBB523_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB523_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB523_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB523_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB523_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB523_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB523_227
.LBB523_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB523_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB523_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB523_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB523_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB523_55
.LBB523_54:
	testl	%eax, %eax
	je	.LBB523_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB523_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB523_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB523_57:
	testb	%al, %al
	je	.LBB523_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB523_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB523_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB523_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB523_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB523_240
.LBB523_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB523_59
.LBB523_239:
	testl	%eax, %eax
	je	.LBB523_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB523_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB523_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB523_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB523_61
.LBB523_60:
	testl	%eax, %eax
	je	.LBB523_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB523_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB523_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB523_63:
	testb	%al, %al
	je	.LBB523_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB523_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB523_253
.LBB523_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB523_65
.LBB523_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB523_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB523_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB523_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB523_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB523_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB523_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB523_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB523_229
.LBB523_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB523_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB523_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB523_70
.LBB523_69:
	testl	%eax, %eax
	je	.LBB523_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB523_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB523_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB523_72:
	testb	%al, %al
	je	.LBB523_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB523_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB523_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB523_265
.LBB523_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB523_74
.LBB523_264:
	testl	%eax, %eax
	je	.LBB523_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB523_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB523_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB523_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB523_76
.LBB523_75:
	testl	%eax, %eax
	je	.LBB523_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB523_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB523_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB523_78:
	testb	%al, %al
	je	.LBB523_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB523_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB523_277
.LBB523_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB523_80
.LBB523_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB523_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB523_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB523_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB523_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB523_82
.LBB523_81:
	testl	%eax, %eax
	je	.LBB523_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB523_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB523_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB523_84:
	testb	%al, %al
	je	.LBB523_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB523_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB523_288
.LBB523_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB523_86
.LBB523_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB523_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB523_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB523_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB523_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB523_88
.LBB523_87:
	testl	%eax, %eax
	je	.LBB523_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB523_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB523_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB523_90:
	testb	%al, %al
	je	.LBB523_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB523_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB523_299
.LBB523_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB523_92
.LBB523_298:
	testl	%eax, %eax
	je	.LBB523_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB523_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB523_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB523_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB523_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB523_351
.LBB523_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB523_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB523_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB523_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB523_97
.LBB523_96:
	testl	%eax, %eax
	je	.LBB523_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB523_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB523_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB523_99:
	testb	%al, %al
	je	.LBB523_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB523_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB523_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB523_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB523_311
.LBB523_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB523_101
.LBB523_310:
	testl	%eax, %eax
	je	.LBB523_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB523_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB523_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB523_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB523_103
.LBB523_102:
	testl	%eax, %eax
	je	.LBB523_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB523_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB523_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB523_105:
	testb	%al, %al
	je	.LBB523_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB523_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB523_323
.LBB523_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB523_107
.LBB523_322:
	testl	%eax, %eax
	je	.LBB523_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB523_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB523_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB523_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB523_109
.LBB523_108:
	testl	%eax, %eax
	je	.LBB523_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB523_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB523_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB523_111:
	testb	%al, %al
	je	.LBB523_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB523_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB523_334
.LBB523_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB523_113
.LBB523_333:
	testl	%eax, %eax
	je	.LBB523_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB523_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB523_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB523_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB523_115
.LBB523_114:
	testl	%eax, %eax
	je	.LBB523_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB523_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB523_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB523_117:
	testb	%al, %al
	je	.LBB523_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB523_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB523_345
.LBB523_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB523_119
.LBB523_344:
	testl	%eax, %eax
	je	.LBB523_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB523_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB523_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB523_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB523_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB523_350
.LBB523_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB523_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB523_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB523_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB523_124
.LBB523_123:
	testl	%eax, %eax
	je	.LBB523_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB523_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB523_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB523_126:
	testb	%al, %al
	je	.LBB523_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB523_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB523_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB523_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB523_359
.LBB523_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB523_128
.LBB523_358:
	testl	%eax, %eax
	je	.LBB523_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB523_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB523_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB523_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB523_130
.LBB523_129:
	testl	%eax, %eax
	je	.LBB523_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB523_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB523_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB523_132:
	testb	%al, %al
	je	.LBB523_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB523_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB523_371
.LBB523_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB523_134
.LBB523_370:
	testl	%eax, %eax
	je	.LBB523_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB523_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB523_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB523_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB523_136
.LBB523_135:
	testl	%eax, %eax
	je	.LBB523_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB523_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB523_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB523_138:
	testb	%al, %al
	je	.LBB523_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB523_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB523_382
.LBB523_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB523_140
.LBB523_381:
	testl	%eax, %eax
	je	.LBB523_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB523_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB523_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB523_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB523_142
.LBB523_141:
	testl	%eax, %eax
	je	.LBB523_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB523_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB523_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB523_144:
	testb	%al, %al
	je	.LBB523_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB523_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB523_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB523_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB523_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB523_393
.LBB523_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB523_146
.LBB523_392:
	testl	%eax, %eax
	je	.LBB523_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB523_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB523_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB523_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB523_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB523_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB523_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB523_148
.LBB523_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB523_148

	.def	 _subprog_m_7ddf9423_ca3db043_96;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_ca3db043_96
	.align	16, 0x90
_subprog_m_7ddf9423_ca3db043_96:        # @_subprog_m_7ddf9423_ca3db043_96
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB524_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB524_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB524_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB524_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB524_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB524_5
.LBB524_4:
	testl	%eax, %eax
	je	.LBB524_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB524_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB524_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB524_7:
	testb	%al, %al
	je	.LBB524_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB524_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB524_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB524_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB524_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB524_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB524_73
.LBB524_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB524_9
.LBB524_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB524_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB524_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB524_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB524_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB524_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB524_63
.LBB524_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB524_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB524_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB524_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB524_15
.LBB524_14:
	testl	%eax, %eax
	je	.LBB524_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB524_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB524_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB524_17:
	testb	%al, %al
	je	.LBB524_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB524_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB524_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB524_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB524_87
.LBB524_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB524_19
.LBB524_86:
	testl	%eax, %eax
	je	.LBB524_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB524_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB524_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB524_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB524_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB524_21
.LBB524_20:
	testl	%eax, %eax
	je	.LBB524_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB524_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB524_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB524_23:
	testb	%al, %al
	je	.LBB524_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB524_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB524_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB524_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB524_98
.LBB524_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB524_25
.LBB524_97:
	testl	%eax, %eax
	je	.LBB524_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB524_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB524_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB524_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB524_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB524_103
.LBB524_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB524_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB524_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB524_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB524_30
.LBB524_29:
	testl	%eax, %eax
	je	.LBB524_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB524_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB524_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB524_32:
	testb	%al, %al
	je	.LBB524_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB524_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB524_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB524_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB524_114
.LBB524_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB524_34
.LBB524_113:
	testl	%eax, %eax
	je	.LBB524_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB524_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB524_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB524_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB524_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB524_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB524_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB524_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB524_39
.LBB524_38:
	testl	%eax, %eax
	je	.LBB524_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB524_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB524_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB524_41:
	testb	%al, %al
	je	.LBB524_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB524_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB524_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB524_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB524_126
.LBB524_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB524_43
.LBB524_125:
	testl	%eax, %eax
	je	.LBB524_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB524_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB524_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB524_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB524_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB524_104
.LBB524_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB524_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB524_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB524_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB524_48
.LBB524_47:
	testl	%eax, %eax
	je	.LBB524_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB524_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB524_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB524_50:
	testb	%al, %al
	je	.LBB524_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB524_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB524_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB524_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB524_139
.LBB524_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB524_52
.LBB524_138:
	testl	%eax, %eax
	je	.LBB524_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB524_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB524_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB524_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB524_53
.LBB524_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB524_103:
	xorl	%r8d, %r8d
.LBB524_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB524_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB524_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB524_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB524_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB524_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB524_57
.LBB524_56:
	testl	%eax, %eax
	je	.LBB524_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB524_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB524_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB524_59:
	testb	%al, %al
	je	.LBB524_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB524_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB524_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB524_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB524_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB524_152
.LBB524_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB524_61
.LBB524_151:
	testl	%eax, %eax
	je	.LBB524_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB524_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB524_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB524_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB524_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB524_104
.LBB524_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB524_63

	.def	 _execute_671;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_671
	.align	16, 0x90
_execute_671:                           # @_execute_671
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$71, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng93(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258918;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258918
	.align	16, 0x90
_execute_258918:                        # @_execute_258918
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258919;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258919
	.align	16, 0x90
_execute_258919:                        # @_execute_258919
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258920;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258920
	.align	16, 0x90
_execute_258920:                        # @_execute_258920
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258921;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258921
	.align	16, 0x90
_execute_258921:                        # @_execute_258921
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258922;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258922
	.align	16, 0x90
_execute_258922:                        # @_execute_258922
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258923;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258923
	.align	16, 0x90
_execute_258923:                        # @_execute_258923
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258924;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258924
	.align	16, 0x90
_execute_258924:                        # @_execute_258924
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258925;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258925
	.align	16, 0x90
_execute_258925:                        # @_execute_258925
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_679;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_679
	.align	16, 0x90
_execute_679:                           # @_execute_679
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$72, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_680;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_680
	.align	16, 0x90
_execute_680:                           # @_execute_680
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB535_1:                              # =>This Inner Loop Header: Depth=1
	movl	$73, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB535_29
# BB#2:                                 #   in Loop: Header=BB535_1 Depth=1
	jmpq	*%rax
.Ltmp1649:                              # Block address taken
.LBB535_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB535_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB535_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB535_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB535_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB535_32
.LBB535_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB535_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB535_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB535_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB535_9
# BB#34:
	movq	664(%rsi), %r8
.LBB535_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB535_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB535_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1649(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB535_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB535_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB535_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB535_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB535_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB535_13
.LBB535_12:
	testl	%eax, %eax
	je	.LBB535_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB535_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB535_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB535_15:
	testb	%al, %al
	je	.LBB535_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB535_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB535_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB535_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB535_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB535_42
.LBB535_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB535_17
.LBB535_41:
	testl	%eax, %eax
	je	.LBB535_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB535_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB535_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB535_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB535_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB535_28
.LBB535_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB535_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB535_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB535_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB535_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB535_22
.LBB535_21:
	testl	%eax, %eax
	je	.LBB535_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB535_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB535_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB535_24:
	testb	%al, %al
	je	.LBB535_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB535_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB535_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB535_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB535_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB535_55
.LBB535_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB535_26
.LBB535_54:
	testl	%eax, %eax
	je	.LBB535_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB535_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB535_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB535_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB535_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB535_28
.LBB535_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB535_28

	.def	 _execute_681;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_681
	.align	16, 0x90
_execute_681:                           # @_execute_681
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB536_1:                              # =>This Inner Loop Header: Depth=1
	movl	$74, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB536_17
# BB#2:                                 #   in Loop: Header=BB536_1 Depth=1
	jmpq	*%rax
.Ltmp1653:                              # Block address taken
.LBB536_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB536_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB536_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB536_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB536_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB536_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB536_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB536_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB536_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB536_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB536_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB536_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB536_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB536_11
.LBB536_10:
	testl	%eax, %eax
	je	.LBB536_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB536_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB536_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB536_13:
	testb	%al, %al
	je	.LBB536_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB536_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB536_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB536_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB536_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB536_29
.LBB536_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB536_15
.LBB536_28:
	testl	%eax, %eax
	je	.LBB536_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB536_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB536_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB536_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB536_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB536_17
.LBB536_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167179368, %ecx        # imm = 0x9F6F468
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167180432, %ecx        # imm = 0x9F6F890
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_d3bb070b_99(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180432, %ecx        # imm = 0x9F6F890
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_d3bb070b_99(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180432, %ecx        # imm = 0x9F6F890
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_d3bb070b_99(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180432, %ecx        # imm = 0x9F6F890
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_d3bb070b_99(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_d3bb070b_100(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167179368, %ecx        # imm = 0x9F6F468
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167180432, %ecx        # imm = 0x9F6F890
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_d3bb070b_99(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180432, %ecx        # imm = 0x9F6F890
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_d3bb070b_99(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167180432, %ecx        # imm = 0x9F6F890
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167180432, %ecx        # imm = 0x9F6F890
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_d3bb070b_99(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_d3bb070b_100(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB536_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1653(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_d3bb070b_99;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_d3bb070b_99
	.align	16, 0x90
_subprog_m_7ddf9423_d3bb070b_99:        # @_subprog_m_7ddf9423_d3bb070b_99
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB537_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB537_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB537_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB537_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB537_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB537_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB537_6
.LBB537_5:
	testl	%eax, %eax
	je	.LBB537_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB537_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB537_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB537_8:
	testb	%al, %al
	je	.LBB537_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB537_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB537_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB537_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB537_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB537_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB537_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB537_160
.LBB537_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB537_10
.LBB537_159:
	testl	%eax, %eax
	je	.LBB537_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB537_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB537_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB537_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB537_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB537_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB537_148
.LBB537_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB537_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB537_13
.LBB537_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB537_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB537_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB537_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB537_148
.LBB537_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB537_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB537_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB537_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB537_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB537_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB537_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB537_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB537_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB537_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB537_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB537_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB537_23
.LBB537_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB537_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB537_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB537_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB537_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB537_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB537_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB537_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB537_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB537_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB537_182
.LBB537_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB537_27
.LBB537_181:
	testl	%eax, %eax
	je	.LBB537_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB537_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB537_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB537_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB537_29
.LBB537_28:
	testl	%eax, %eax
	je	.LBB537_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB537_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB537_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB537_31:
	testb	%al, %al
	je	.LBB537_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB537_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB537_195
.LBB537_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB537_33
.LBB537_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB537_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB537_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB537_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB537_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB537_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB537_228
.LBB537_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB537_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB537_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB537_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB537_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB537_39
.LBB537_38:
	testl	%eax, %eax
	je	.LBB537_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB537_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB537_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB537_41:
	testb	%al, %al
	je	.LBB537_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB537_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB537_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB537_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB537_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB537_209
.LBB537_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB537_43
.LBB537_208:
	testl	%eax, %eax
	je	.LBB537_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB537_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB537_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB537_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB537_45
.LBB537_44:
	testl	%eax, %eax
	je	.LBB537_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB537_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB537_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB537_47:
	testb	%al, %al
	je	.LBB537_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB537_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB537_222
.LBB537_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB537_49
.LBB537_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB537_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB537_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB537_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB537_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB537_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB537_227
.LBB537_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB537_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB537_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB537_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB537_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB537_55
.LBB537_54:
	testl	%eax, %eax
	je	.LBB537_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB537_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB537_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB537_57:
	testb	%al, %al
	je	.LBB537_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB537_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB537_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB537_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB537_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB537_240
.LBB537_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB537_59
.LBB537_239:
	testl	%eax, %eax
	je	.LBB537_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB537_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB537_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB537_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB537_61
.LBB537_60:
	testl	%eax, %eax
	je	.LBB537_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB537_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB537_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB537_63:
	testb	%al, %al
	je	.LBB537_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB537_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB537_253
.LBB537_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB537_65
.LBB537_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB537_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB537_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB537_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB537_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB537_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB537_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB537_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB537_229
.LBB537_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB537_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB537_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB537_70
.LBB537_69:
	testl	%eax, %eax
	je	.LBB537_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB537_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB537_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB537_72:
	testb	%al, %al
	je	.LBB537_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB537_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB537_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB537_265
.LBB537_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB537_74
.LBB537_264:
	testl	%eax, %eax
	je	.LBB537_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB537_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB537_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB537_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB537_76
.LBB537_75:
	testl	%eax, %eax
	je	.LBB537_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB537_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB537_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB537_78:
	testb	%al, %al
	je	.LBB537_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB537_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB537_277
.LBB537_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB537_80
.LBB537_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB537_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB537_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB537_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB537_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB537_82
.LBB537_81:
	testl	%eax, %eax
	je	.LBB537_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB537_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB537_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB537_84:
	testb	%al, %al
	je	.LBB537_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB537_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB537_288
.LBB537_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB537_86
.LBB537_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB537_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB537_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB537_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB537_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB537_88
.LBB537_87:
	testl	%eax, %eax
	je	.LBB537_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB537_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB537_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB537_90:
	testb	%al, %al
	je	.LBB537_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB537_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB537_299
.LBB537_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB537_92
.LBB537_298:
	testl	%eax, %eax
	je	.LBB537_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB537_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB537_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB537_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB537_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB537_351
.LBB537_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB537_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB537_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB537_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB537_97
.LBB537_96:
	testl	%eax, %eax
	je	.LBB537_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB537_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB537_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB537_99:
	testb	%al, %al
	je	.LBB537_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB537_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB537_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB537_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB537_311
.LBB537_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB537_101
.LBB537_310:
	testl	%eax, %eax
	je	.LBB537_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB537_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB537_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB537_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB537_103
.LBB537_102:
	testl	%eax, %eax
	je	.LBB537_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB537_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB537_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB537_105:
	testb	%al, %al
	je	.LBB537_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB537_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB537_323
.LBB537_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB537_107
.LBB537_322:
	testl	%eax, %eax
	je	.LBB537_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB537_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB537_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB537_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB537_109
.LBB537_108:
	testl	%eax, %eax
	je	.LBB537_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB537_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB537_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB537_111:
	testb	%al, %al
	je	.LBB537_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB537_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB537_334
.LBB537_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB537_113
.LBB537_333:
	testl	%eax, %eax
	je	.LBB537_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB537_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB537_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB537_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB537_115
.LBB537_114:
	testl	%eax, %eax
	je	.LBB537_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB537_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB537_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB537_117:
	testb	%al, %al
	je	.LBB537_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB537_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB537_345
.LBB537_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB537_119
.LBB537_344:
	testl	%eax, %eax
	je	.LBB537_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB537_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB537_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB537_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB537_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB537_350
.LBB537_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB537_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB537_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB537_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB537_124
.LBB537_123:
	testl	%eax, %eax
	je	.LBB537_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB537_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB537_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB537_126:
	testb	%al, %al
	je	.LBB537_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB537_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB537_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB537_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB537_359
.LBB537_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB537_128
.LBB537_358:
	testl	%eax, %eax
	je	.LBB537_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB537_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB537_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB537_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB537_130
.LBB537_129:
	testl	%eax, %eax
	je	.LBB537_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB537_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB537_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB537_132:
	testb	%al, %al
	je	.LBB537_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB537_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB537_371
.LBB537_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB537_134
.LBB537_370:
	testl	%eax, %eax
	je	.LBB537_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB537_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB537_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB537_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB537_136
.LBB537_135:
	testl	%eax, %eax
	je	.LBB537_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB537_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB537_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB537_138:
	testb	%al, %al
	je	.LBB537_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB537_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB537_382
.LBB537_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB537_140
.LBB537_381:
	testl	%eax, %eax
	je	.LBB537_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB537_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB537_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB537_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB537_142
.LBB537_141:
	testl	%eax, %eax
	je	.LBB537_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB537_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB537_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB537_144:
	testb	%al, %al
	je	.LBB537_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB537_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB537_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB537_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB537_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB537_393
.LBB537_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB537_146
.LBB537_392:
	testl	%eax, %eax
	je	.LBB537_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB537_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB537_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB537_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB537_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB537_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB537_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB537_148
.LBB537_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB537_148

	.def	 _subprog_m_7ddf9423_d3bb070b_100;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_d3bb070b_100
	.align	16, 0x90
_subprog_m_7ddf9423_d3bb070b_100:       # @_subprog_m_7ddf9423_d3bb070b_100
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB538_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB538_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB538_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB538_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB538_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB538_5
.LBB538_4:
	testl	%eax, %eax
	je	.LBB538_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB538_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB538_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB538_7:
	testb	%al, %al
	je	.LBB538_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB538_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB538_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB538_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB538_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB538_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB538_73
.LBB538_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB538_9
.LBB538_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB538_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB538_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB538_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB538_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB538_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB538_63
.LBB538_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB538_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB538_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB538_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB538_15
.LBB538_14:
	testl	%eax, %eax
	je	.LBB538_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB538_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB538_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB538_17:
	testb	%al, %al
	je	.LBB538_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB538_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB538_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB538_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB538_87
.LBB538_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB538_19
.LBB538_86:
	testl	%eax, %eax
	je	.LBB538_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB538_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB538_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB538_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB538_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB538_21
.LBB538_20:
	testl	%eax, %eax
	je	.LBB538_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB538_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB538_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB538_23:
	testb	%al, %al
	je	.LBB538_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB538_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB538_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB538_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB538_98
.LBB538_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB538_25
.LBB538_97:
	testl	%eax, %eax
	je	.LBB538_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB538_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB538_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB538_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB538_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB538_103
.LBB538_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB538_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB538_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB538_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB538_30
.LBB538_29:
	testl	%eax, %eax
	je	.LBB538_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB538_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB538_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB538_32:
	testb	%al, %al
	je	.LBB538_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB538_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB538_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB538_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB538_114
.LBB538_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB538_34
.LBB538_113:
	testl	%eax, %eax
	je	.LBB538_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB538_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB538_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB538_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB538_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB538_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB538_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB538_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB538_39
.LBB538_38:
	testl	%eax, %eax
	je	.LBB538_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB538_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB538_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB538_41:
	testb	%al, %al
	je	.LBB538_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB538_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB538_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB538_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB538_126
.LBB538_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB538_43
.LBB538_125:
	testl	%eax, %eax
	je	.LBB538_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB538_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB538_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB538_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB538_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB538_104
.LBB538_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB538_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB538_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB538_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB538_48
.LBB538_47:
	testl	%eax, %eax
	je	.LBB538_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB538_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB538_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB538_50:
	testb	%al, %al
	je	.LBB538_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB538_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB538_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB538_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB538_139
.LBB538_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB538_52
.LBB538_138:
	testl	%eax, %eax
	je	.LBB538_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB538_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB538_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB538_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB538_53
.LBB538_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB538_103:
	xorl	%r8d, %r8d
.LBB538_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB538_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB538_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB538_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB538_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB538_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB538_57
.LBB538_56:
	testl	%eax, %eax
	je	.LBB538_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB538_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB538_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB538_59:
	testb	%al, %al
	je	.LBB538_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB538_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB538_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB538_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB538_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB538_152
.LBB538_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB538_61
.LBB538_151:
	testl	%eax, %eax
	je	.LBB538_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB538_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB538_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB538_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB538_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB538_104
.LBB538_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB538_63

	.def	 _execute_684;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_684
	.align	16, 0x90
_execute_684:                           # @_execute_684
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$75, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng96(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258926;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258926
	.align	16, 0x90
_execute_258926:                        # @_execute_258926
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258927;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258927
	.align	16, 0x90
_execute_258927:                        # @_execute_258927
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258928;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258928
	.align	16, 0x90
_execute_258928:                        # @_execute_258928
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258929;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258929
	.align	16, 0x90
_execute_258929:                        # @_execute_258929
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258930;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258930
	.align	16, 0x90
_execute_258930:                        # @_execute_258930
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258931;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258931
	.align	16, 0x90
_execute_258931:                        # @_execute_258931
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258932;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258932
	.align	16, 0x90
_execute_258932:                        # @_execute_258932
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258933;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258933
	.align	16, 0x90
_execute_258933:                        # @_execute_258933
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_686;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_686
	.align	16, 0x90
_execute_686:                           # @_execute_686
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$76, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_687;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_687
	.align	16, 0x90
_execute_687:                           # @_execute_687
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB549_1:                              # =>This Inner Loop Header: Depth=1
	movl	$77, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB549_29
# BB#2:                                 #   in Loop: Header=BB549_1 Depth=1
	jmpq	*%rax
.Ltmp1693:                              # Block address taken
.LBB549_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB549_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB549_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB549_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB549_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB549_32
.LBB549_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB549_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB549_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB549_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB549_9
# BB#34:
	movq	664(%rsi), %r8
.LBB549_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB549_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB549_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1693(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB549_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB549_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB549_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB549_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB549_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB549_13
.LBB549_12:
	testl	%eax, %eax
	je	.LBB549_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB549_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB549_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB549_15:
	testb	%al, %al
	je	.LBB549_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB549_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB549_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB549_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB549_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB549_42
.LBB549_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB549_17
.LBB549_41:
	testl	%eax, %eax
	je	.LBB549_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB549_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB549_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB549_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB549_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB549_28
.LBB549_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB549_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB549_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB549_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB549_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB549_22
.LBB549_21:
	testl	%eax, %eax
	je	.LBB549_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB549_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB549_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB549_24:
	testb	%al, %al
	je	.LBB549_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB549_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB549_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB549_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB549_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB549_55
.LBB549_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB549_26
.LBB549_54:
	testl	%eax, %eax
	je	.LBB549_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB549_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB549_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB549_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB549_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB549_28
.LBB549_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB549_28

	.def	 _execute_688;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_688
	.align	16, 0x90
_execute_688:                           # @_execute_688
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB550_1:                              # =>This Inner Loop Header: Depth=1
	movl	$78, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB550_17
# BB#2:                                 #   in Loop: Header=BB550_1 Depth=1
	jmpq	*%rax
.Ltmp1697:                              # Block address taken
.LBB550_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB550_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB550_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB550_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB550_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB550_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB550_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB550_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB550_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB550_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB550_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB550_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB550_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB550_11
.LBB550_10:
	testl	%eax, %eax
	je	.LBB550_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB550_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB550_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB550_13:
	testb	%al, %al
	je	.LBB550_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB550_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB550_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB550_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB550_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB550_29
.LBB550_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB550_15
.LBB550_28:
	testl	%eax, %eax
	je	.LBB550_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB550_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB550_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB550_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB550_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB550_17
.LBB550_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167177696, %ecx        # imm = 0x9F6EDE0
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167180584, %ecx        # imm = 0x9F6F928
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_7fc18d44_101(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180584, %ecx        # imm = 0x9F6F928
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_7fc18d44_101(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180584, %ecx        # imm = 0x9F6F928
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7fc18d44_101(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180584, %ecx        # imm = 0x9F6F928
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_7fc18d44_101(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_7fc18d44_102(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167177696, %ecx        # imm = 0x9F6EDE0
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167180584, %ecx        # imm = 0x9F6F928
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7fc18d44_101(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167180584, %ecx        # imm = 0x9F6F928
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7fc18d44_101(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167180584, %ecx        # imm = 0x9F6F928
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167180584, %ecx        # imm = 0x9F6F928
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_7fc18d44_101(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7fc18d44_102(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB550_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1697(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_7fc18d44_101;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_7fc18d44_101
	.align	16, 0x90
_subprog_m_7ddf9423_7fc18d44_101:       # @_subprog_m_7ddf9423_7fc18d44_101
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB551_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB551_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB551_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB551_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB551_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB551_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB551_6
.LBB551_5:
	testl	%eax, %eax
	je	.LBB551_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB551_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB551_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB551_8:
	testb	%al, %al
	je	.LBB551_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB551_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB551_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB551_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB551_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB551_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB551_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB551_160
.LBB551_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB551_10
.LBB551_159:
	testl	%eax, %eax
	je	.LBB551_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB551_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB551_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB551_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB551_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB551_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB551_148
.LBB551_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB551_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB551_13
.LBB551_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB551_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB551_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB551_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB551_148
.LBB551_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB551_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB551_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB551_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB551_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB551_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB551_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB551_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB551_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB551_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB551_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB551_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB551_23
.LBB551_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB551_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB551_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB551_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB551_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB551_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB551_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB551_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB551_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB551_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB551_182
.LBB551_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB551_27
.LBB551_181:
	testl	%eax, %eax
	je	.LBB551_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB551_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB551_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB551_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB551_29
.LBB551_28:
	testl	%eax, %eax
	je	.LBB551_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB551_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB551_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB551_31:
	testb	%al, %al
	je	.LBB551_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB551_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB551_195
.LBB551_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB551_33
.LBB551_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB551_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB551_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB551_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB551_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB551_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB551_228
.LBB551_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB551_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB551_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB551_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB551_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB551_39
.LBB551_38:
	testl	%eax, %eax
	je	.LBB551_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB551_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB551_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB551_41:
	testb	%al, %al
	je	.LBB551_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB551_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB551_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB551_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB551_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB551_209
.LBB551_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB551_43
.LBB551_208:
	testl	%eax, %eax
	je	.LBB551_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB551_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB551_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB551_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB551_45
.LBB551_44:
	testl	%eax, %eax
	je	.LBB551_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB551_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB551_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB551_47:
	testb	%al, %al
	je	.LBB551_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB551_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB551_222
.LBB551_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB551_49
.LBB551_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB551_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB551_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB551_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB551_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB551_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB551_227
.LBB551_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB551_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB551_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB551_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB551_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB551_55
.LBB551_54:
	testl	%eax, %eax
	je	.LBB551_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB551_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB551_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB551_57:
	testb	%al, %al
	je	.LBB551_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB551_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB551_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB551_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB551_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB551_240
.LBB551_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB551_59
.LBB551_239:
	testl	%eax, %eax
	je	.LBB551_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB551_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB551_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB551_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB551_61
.LBB551_60:
	testl	%eax, %eax
	je	.LBB551_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB551_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB551_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB551_63:
	testb	%al, %al
	je	.LBB551_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB551_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB551_253
.LBB551_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB551_65
.LBB551_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB551_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB551_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB551_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB551_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB551_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB551_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB551_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB551_229
.LBB551_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB551_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB551_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB551_70
.LBB551_69:
	testl	%eax, %eax
	je	.LBB551_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB551_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB551_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB551_72:
	testb	%al, %al
	je	.LBB551_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB551_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB551_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB551_265
.LBB551_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB551_74
.LBB551_264:
	testl	%eax, %eax
	je	.LBB551_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB551_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB551_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB551_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB551_76
.LBB551_75:
	testl	%eax, %eax
	je	.LBB551_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB551_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB551_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB551_78:
	testb	%al, %al
	je	.LBB551_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB551_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB551_277
.LBB551_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB551_80
.LBB551_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB551_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB551_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB551_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB551_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB551_82
.LBB551_81:
	testl	%eax, %eax
	je	.LBB551_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB551_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB551_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB551_84:
	testb	%al, %al
	je	.LBB551_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB551_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB551_288
.LBB551_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB551_86
.LBB551_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB551_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB551_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB551_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB551_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB551_88
.LBB551_87:
	testl	%eax, %eax
	je	.LBB551_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB551_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB551_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB551_90:
	testb	%al, %al
	je	.LBB551_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB551_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB551_299
.LBB551_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB551_92
.LBB551_298:
	testl	%eax, %eax
	je	.LBB551_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB551_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB551_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB551_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB551_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB551_351
.LBB551_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB551_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB551_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB551_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB551_97
.LBB551_96:
	testl	%eax, %eax
	je	.LBB551_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB551_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB551_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB551_99:
	testb	%al, %al
	je	.LBB551_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB551_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB551_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB551_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB551_311
.LBB551_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB551_101
.LBB551_310:
	testl	%eax, %eax
	je	.LBB551_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB551_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB551_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB551_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB551_103
.LBB551_102:
	testl	%eax, %eax
	je	.LBB551_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB551_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB551_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB551_105:
	testb	%al, %al
	je	.LBB551_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB551_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB551_323
.LBB551_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB551_107
.LBB551_322:
	testl	%eax, %eax
	je	.LBB551_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB551_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB551_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB551_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB551_109
.LBB551_108:
	testl	%eax, %eax
	je	.LBB551_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB551_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB551_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB551_111:
	testb	%al, %al
	je	.LBB551_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB551_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB551_334
.LBB551_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB551_113
.LBB551_333:
	testl	%eax, %eax
	je	.LBB551_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB551_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB551_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB551_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB551_115
.LBB551_114:
	testl	%eax, %eax
	je	.LBB551_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB551_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB551_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB551_117:
	testb	%al, %al
	je	.LBB551_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB551_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB551_345
.LBB551_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB551_119
.LBB551_344:
	testl	%eax, %eax
	je	.LBB551_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB551_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB551_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB551_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB551_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB551_350
.LBB551_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB551_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB551_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB551_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB551_124
.LBB551_123:
	testl	%eax, %eax
	je	.LBB551_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB551_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB551_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB551_126:
	testb	%al, %al
	je	.LBB551_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB551_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB551_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB551_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB551_359
.LBB551_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB551_128
.LBB551_358:
	testl	%eax, %eax
	je	.LBB551_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB551_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB551_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB551_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB551_130
.LBB551_129:
	testl	%eax, %eax
	je	.LBB551_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB551_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB551_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB551_132:
	testb	%al, %al
	je	.LBB551_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB551_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB551_371
.LBB551_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB551_134
.LBB551_370:
	testl	%eax, %eax
	je	.LBB551_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB551_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB551_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB551_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB551_136
.LBB551_135:
	testl	%eax, %eax
	je	.LBB551_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB551_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB551_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB551_138:
	testb	%al, %al
	je	.LBB551_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB551_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB551_382
.LBB551_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB551_140
.LBB551_381:
	testl	%eax, %eax
	je	.LBB551_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB551_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB551_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB551_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB551_142
.LBB551_141:
	testl	%eax, %eax
	je	.LBB551_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB551_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB551_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB551_144:
	testb	%al, %al
	je	.LBB551_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB551_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB551_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB551_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB551_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB551_393
.LBB551_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB551_146
.LBB551_392:
	testl	%eax, %eax
	je	.LBB551_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB551_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB551_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB551_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB551_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB551_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB551_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB551_148
.LBB551_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB551_148

	.def	 _subprog_m_7ddf9423_7fc18d44_102;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_7fc18d44_102
	.align	16, 0x90
_subprog_m_7ddf9423_7fc18d44_102:       # @_subprog_m_7ddf9423_7fc18d44_102
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB552_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB552_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB552_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB552_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB552_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB552_5
.LBB552_4:
	testl	%eax, %eax
	je	.LBB552_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB552_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB552_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB552_7:
	testb	%al, %al
	je	.LBB552_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB552_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB552_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB552_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB552_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB552_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB552_73
.LBB552_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB552_9
.LBB552_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB552_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB552_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB552_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB552_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB552_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB552_63
.LBB552_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB552_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB552_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB552_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB552_15
.LBB552_14:
	testl	%eax, %eax
	je	.LBB552_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB552_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB552_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB552_17:
	testb	%al, %al
	je	.LBB552_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB552_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB552_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB552_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB552_87
.LBB552_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB552_19
.LBB552_86:
	testl	%eax, %eax
	je	.LBB552_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB552_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB552_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB552_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB552_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB552_21
.LBB552_20:
	testl	%eax, %eax
	je	.LBB552_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB552_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB552_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB552_23:
	testb	%al, %al
	je	.LBB552_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB552_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB552_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB552_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB552_98
.LBB552_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB552_25
.LBB552_97:
	testl	%eax, %eax
	je	.LBB552_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB552_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB552_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB552_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB552_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB552_103
.LBB552_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB552_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB552_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB552_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB552_30
.LBB552_29:
	testl	%eax, %eax
	je	.LBB552_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB552_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB552_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB552_32:
	testb	%al, %al
	je	.LBB552_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB552_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB552_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB552_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB552_114
.LBB552_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB552_34
.LBB552_113:
	testl	%eax, %eax
	je	.LBB552_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB552_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB552_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB552_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB552_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB552_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB552_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB552_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB552_39
.LBB552_38:
	testl	%eax, %eax
	je	.LBB552_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB552_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB552_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB552_41:
	testb	%al, %al
	je	.LBB552_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB552_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB552_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB552_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB552_126
.LBB552_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB552_43
.LBB552_125:
	testl	%eax, %eax
	je	.LBB552_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB552_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB552_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB552_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB552_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB552_104
.LBB552_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB552_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB552_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB552_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB552_48
.LBB552_47:
	testl	%eax, %eax
	je	.LBB552_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB552_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB552_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB552_50:
	testb	%al, %al
	je	.LBB552_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB552_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB552_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB552_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB552_139
.LBB552_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB552_52
.LBB552_138:
	testl	%eax, %eax
	je	.LBB552_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB552_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB552_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB552_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB552_53
.LBB552_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB552_103:
	xorl	%r8d, %r8d
.LBB552_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB552_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB552_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB552_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB552_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB552_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB552_57
.LBB552_56:
	testl	%eax, %eax
	je	.LBB552_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB552_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB552_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB552_59:
	testb	%al, %al
	je	.LBB552_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB552_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB552_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB552_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB552_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB552_152
.LBB552_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB552_61
.LBB552_151:
	testl	%eax, %eax
	je	.LBB552_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB552_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB552_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB552_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB552_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB552_104
.LBB552_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB552_63

	.def	 _execute_691;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_691
	.align	16, 0x90
_execute_691:                           # @_execute_691
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$79, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng99(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258956;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258956
	.align	16, 0x90
_execute_258956:                        # @_execute_258956
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258957;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258957
	.align	16, 0x90
_execute_258957:                        # @_execute_258957
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258958;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258958
	.align	16, 0x90
_execute_258958:                        # @_execute_258958
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258959;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258959
	.align	16, 0x90
_execute_258959:                        # @_execute_258959
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258960;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258960
	.align	16, 0x90
_execute_258960:                        # @_execute_258960
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258961;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258961
	.align	16, 0x90
_execute_258961:                        # @_execute_258961
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258962;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258962
	.align	16, 0x90
_execute_258962:                        # @_execute_258962
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258963;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258963
	.align	16, 0x90
_execute_258963:                        # @_execute_258963
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_701;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_701
	.align	16, 0x90
_execute_701:                           # @_execute_701
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$80, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_702;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_702
	.align	16, 0x90
_execute_702:                           # @_execute_702
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB563_1:                              # =>This Inner Loop Header: Depth=1
	movl	$81, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB563_29
# BB#2:                                 #   in Loop: Header=BB563_1 Depth=1
	jmpq	*%rax
.Ltmp1737:                              # Block address taken
.LBB563_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB563_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB563_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB563_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB563_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB563_32
.LBB563_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB563_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB563_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB563_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB563_9
# BB#34:
	movq	664(%rsi), %r8
.LBB563_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB563_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB563_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1737(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB563_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB563_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB563_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB563_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB563_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB563_13
.LBB563_12:
	testl	%eax, %eax
	je	.LBB563_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB563_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB563_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB563_15:
	testb	%al, %al
	je	.LBB563_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB563_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB563_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB563_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB563_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB563_42
.LBB563_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB563_17
.LBB563_41:
	testl	%eax, %eax
	je	.LBB563_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB563_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB563_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB563_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB563_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB563_28
.LBB563_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB563_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB563_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB563_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB563_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB563_22
.LBB563_21:
	testl	%eax, %eax
	je	.LBB563_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB563_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB563_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB563_24:
	testb	%al, %al
	je	.LBB563_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB563_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB563_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB563_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB563_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB563_55
.LBB563_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB563_26
.LBB563_54:
	testl	%eax, %eax
	je	.LBB563_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB563_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB563_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB563_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB563_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB563_28
.LBB563_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB563_28

	.def	 _execute_703;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_703
	.align	16, 0x90
_execute_703:                           # @_execute_703
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB564_1:                              # =>This Inner Loop Header: Depth=1
	movl	$82, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB564_17
# BB#2:                                 #   in Loop: Header=BB564_1 Depth=1
	jmpq	*%rax
.Ltmp1741:                              # Block address taken
.LBB564_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB564_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB564_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB564_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB564_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB564_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB564_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB564_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB564_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB564_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB564_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB564_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB564_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB564_11
.LBB564_10:
	testl	%eax, %eax
	je	.LBB564_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB564_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB564_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB564_13:
	testb	%al, %al
	je	.LBB564_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB564_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB564_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB564_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB564_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB564_29
.LBB564_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB564_15
.LBB564_28:
	testl	%eax, %eax
	je	.LBB564_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB564_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB564_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB564_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB564_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB564_17
.LBB564_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167175872, %ecx        # imm = 0x9F6E6C0
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167176024, %ecx        # imm = 0x9F6E758
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_44c8f5f4_104(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176024, %ecx        # imm = 0x9F6E758
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_44c8f5f4_104(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176024, %ecx        # imm = 0x9F6E758
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_44c8f5f4_104(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176024, %ecx        # imm = 0x9F6E758
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_44c8f5f4_104(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_44c8f5f4_105(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167175872, %ecx        # imm = 0x9F6E6C0
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167176024, %ecx        # imm = 0x9F6E758
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_44c8f5f4_104(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176024, %ecx        # imm = 0x9F6E758
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_44c8f5f4_104(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167176024, %ecx        # imm = 0x9F6E758
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167176024, %ecx        # imm = 0x9F6E758
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_44c8f5f4_104(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_44c8f5f4_105(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB564_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1741(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_44c8f5f4_104;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_44c8f5f4_104
	.align	16, 0x90
_subprog_m_7ddf9423_44c8f5f4_104:       # @_subprog_m_7ddf9423_44c8f5f4_104
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB565_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB565_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB565_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB565_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB565_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB565_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB565_6
.LBB565_5:
	testl	%eax, %eax
	je	.LBB565_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB565_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB565_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB565_8:
	testb	%al, %al
	je	.LBB565_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB565_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB565_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB565_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB565_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB565_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB565_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB565_160
.LBB565_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB565_10
.LBB565_159:
	testl	%eax, %eax
	je	.LBB565_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB565_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB565_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB565_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB565_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB565_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB565_148
.LBB565_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB565_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB565_13
.LBB565_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB565_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB565_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB565_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB565_148
.LBB565_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB565_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB565_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB565_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB565_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB565_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB565_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB565_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB565_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB565_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB565_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB565_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB565_23
.LBB565_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB565_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB565_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB565_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB565_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB565_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB565_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB565_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB565_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB565_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB565_182
.LBB565_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB565_27
.LBB565_181:
	testl	%eax, %eax
	je	.LBB565_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB565_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB565_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB565_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB565_29
.LBB565_28:
	testl	%eax, %eax
	je	.LBB565_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB565_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB565_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB565_31:
	testb	%al, %al
	je	.LBB565_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB565_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB565_195
.LBB565_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB565_33
.LBB565_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB565_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB565_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB565_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB565_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB565_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB565_228
.LBB565_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB565_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB565_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB565_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB565_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB565_39
.LBB565_38:
	testl	%eax, %eax
	je	.LBB565_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB565_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB565_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB565_41:
	testb	%al, %al
	je	.LBB565_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB565_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB565_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB565_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB565_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB565_209
.LBB565_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB565_43
.LBB565_208:
	testl	%eax, %eax
	je	.LBB565_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB565_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB565_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB565_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB565_45
.LBB565_44:
	testl	%eax, %eax
	je	.LBB565_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB565_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB565_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB565_47:
	testb	%al, %al
	je	.LBB565_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB565_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB565_222
.LBB565_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB565_49
.LBB565_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB565_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB565_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB565_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB565_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB565_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB565_227
.LBB565_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB565_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB565_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB565_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB565_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB565_55
.LBB565_54:
	testl	%eax, %eax
	je	.LBB565_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB565_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB565_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB565_57:
	testb	%al, %al
	je	.LBB565_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB565_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB565_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB565_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB565_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB565_240
.LBB565_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB565_59
.LBB565_239:
	testl	%eax, %eax
	je	.LBB565_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB565_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB565_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB565_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB565_61
.LBB565_60:
	testl	%eax, %eax
	je	.LBB565_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB565_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB565_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB565_63:
	testb	%al, %al
	je	.LBB565_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB565_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB565_253
.LBB565_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB565_65
.LBB565_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB565_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB565_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB565_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB565_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB565_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB565_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB565_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB565_229
.LBB565_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB565_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB565_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB565_70
.LBB565_69:
	testl	%eax, %eax
	je	.LBB565_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB565_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB565_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB565_72:
	testb	%al, %al
	je	.LBB565_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB565_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB565_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB565_265
.LBB565_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB565_74
.LBB565_264:
	testl	%eax, %eax
	je	.LBB565_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB565_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB565_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB565_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB565_76
.LBB565_75:
	testl	%eax, %eax
	je	.LBB565_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB565_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB565_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB565_78:
	testb	%al, %al
	je	.LBB565_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB565_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB565_277
.LBB565_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB565_80
.LBB565_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB565_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB565_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB565_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB565_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB565_82
.LBB565_81:
	testl	%eax, %eax
	je	.LBB565_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB565_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB565_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB565_84:
	testb	%al, %al
	je	.LBB565_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB565_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB565_288
.LBB565_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB565_86
.LBB565_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB565_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB565_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB565_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB565_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB565_88
.LBB565_87:
	testl	%eax, %eax
	je	.LBB565_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB565_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB565_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB565_90:
	testb	%al, %al
	je	.LBB565_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB565_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB565_299
.LBB565_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB565_92
.LBB565_298:
	testl	%eax, %eax
	je	.LBB565_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB565_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB565_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB565_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB565_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB565_351
.LBB565_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB565_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB565_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB565_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB565_97
.LBB565_96:
	testl	%eax, %eax
	je	.LBB565_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB565_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB565_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB565_99:
	testb	%al, %al
	je	.LBB565_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB565_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB565_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB565_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB565_311
.LBB565_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB565_101
.LBB565_310:
	testl	%eax, %eax
	je	.LBB565_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB565_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB565_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB565_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB565_103
.LBB565_102:
	testl	%eax, %eax
	je	.LBB565_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB565_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB565_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB565_105:
	testb	%al, %al
	je	.LBB565_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB565_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB565_323
.LBB565_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB565_107
.LBB565_322:
	testl	%eax, %eax
	je	.LBB565_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB565_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB565_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB565_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB565_109
.LBB565_108:
	testl	%eax, %eax
	je	.LBB565_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB565_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB565_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB565_111:
	testb	%al, %al
	je	.LBB565_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB565_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB565_334
.LBB565_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB565_113
.LBB565_333:
	testl	%eax, %eax
	je	.LBB565_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB565_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB565_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB565_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB565_115
.LBB565_114:
	testl	%eax, %eax
	je	.LBB565_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB565_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB565_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB565_117:
	testb	%al, %al
	je	.LBB565_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB565_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB565_345
.LBB565_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB565_119
.LBB565_344:
	testl	%eax, %eax
	je	.LBB565_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB565_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB565_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB565_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB565_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB565_350
.LBB565_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB565_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB565_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB565_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB565_124
.LBB565_123:
	testl	%eax, %eax
	je	.LBB565_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB565_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB565_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB565_126:
	testb	%al, %al
	je	.LBB565_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB565_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB565_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB565_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB565_359
.LBB565_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB565_128
.LBB565_358:
	testl	%eax, %eax
	je	.LBB565_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB565_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB565_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB565_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB565_130
.LBB565_129:
	testl	%eax, %eax
	je	.LBB565_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB565_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB565_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB565_132:
	testb	%al, %al
	je	.LBB565_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB565_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB565_371
.LBB565_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB565_134
.LBB565_370:
	testl	%eax, %eax
	je	.LBB565_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB565_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB565_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB565_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB565_136
.LBB565_135:
	testl	%eax, %eax
	je	.LBB565_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB565_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB565_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB565_138:
	testb	%al, %al
	je	.LBB565_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB565_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB565_382
.LBB565_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB565_140
.LBB565_381:
	testl	%eax, %eax
	je	.LBB565_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB565_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB565_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB565_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB565_142
.LBB565_141:
	testl	%eax, %eax
	je	.LBB565_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB565_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB565_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB565_144:
	testb	%al, %al
	je	.LBB565_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB565_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB565_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB565_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB565_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB565_393
.LBB565_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB565_146
.LBB565_392:
	testl	%eax, %eax
	je	.LBB565_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB565_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB565_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB565_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB565_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB565_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB565_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB565_148
.LBB565_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB565_148

	.def	 _subprog_m_7ddf9423_44c8f5f4_105;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_44c8f5f4_105
	.align	16, 0x90
_subprog_m_7ddf9423_44c8f5f4_105:       # @_subprog_m_7ddf9423_44c8f5f4_105
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB566_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB566_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB566_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB566_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB566_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB566_5
.LBB566_4:
	testl	%eax, %eax
	je	.LBB566_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB566_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB566_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB566_7:
	testb	%al, %al
	je	.LBB566_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB566_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB566_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB566_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB566_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB566_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB566_73
.LBB566_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB566_9
.LBB566_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB566_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB566_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB566_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB566_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB566_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB566_63
.LBB566_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB566_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB566_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB566_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB566_15
.LBB566_14:
	testl	%eax, %eax
	je	.LBB566_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB566_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB566_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB566_17:
	testb	%al, %al
	je	.LBB566_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB566_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB566_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB566_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB566_87
.LBB566_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB566_19
.LBB566_86:
	testl	%eax, %eax
	je	.LBB566_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB566_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB566_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB566_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB566_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB566_21
.LBB566_20:
	testl	%eax, %eax
	je	.LBB566_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB566_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB566_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB566_23:
	testb	%al, %al
	je	.LBB566_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB566_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB566_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB566_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB566_98
.LBB566_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB566_25
.LBB566_97:
	testl	%eax, %eax
	je	.LBB566_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB566_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB566_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB566_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB566_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB566_103
.LBB566_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB566_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB566_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB566_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB566_30
.LBB566_29:
	testl	%eax, %eax
	je	.LBB566_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB566_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB566_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB566_32:
	testb	%al, %al
	je	.LBB566_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB566_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB566_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB566_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB566_114
.LBB566_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB566_34
.LBB566_113:
	testl	%eax, %eax
	je	.LBB566_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB566_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB566_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB566_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB566_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB566_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB566_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB566_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB566_39
.LBB566_38:
	testl	%eax, %eax
	je	.LBB566_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB566_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB566_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB566_41:
	testb	%al, %al
	je	.LBB566_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB566_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB566_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB566_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB566_126
.LBB566_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB566_43
.LBB566_125:
	testl	%eax, %eax
	je	.LBB566_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB566_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB566_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB566_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB566_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB566_104
.LBB566_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB566_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB566_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB566_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB566_48
.LBB566_47:
	testl	%eax, %eax
	je	.LBB566_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB566_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB566_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB566_50:
	testb	%al, %al
	je	.LBB566_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB566_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB566_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB566_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB566_139
.LBB566_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB566_52
.LBB566_138:
	testl	%eax, %eax
	je	.LBB566_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB566_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB566_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB566_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB566_53
.LBB566_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB566_103:
	xorl	%r8d, %r8d
.LBB566_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB566_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB566_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB566_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB566_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB566_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB566_57
.LBB566_56:
	testl	%eax, %eax
	je	.LBB566_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB566_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB566_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB566_59:
	testb	%al, %al
	je	.LBB566_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB566_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB566_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB566_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB566_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB566_152
.LBB566_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB566_61
.LBB566_151:
	testl	%eax, %eax
	je	.LBB566_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB566_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB566_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB566_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB566_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB566_104
.LBB566_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB566_63

	.def	 _execute_706;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_706
	.align	16, 0x90
_execute_706:                           # @_execute_706
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$83, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng102(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258964;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258964
	.align	16, 0x90
_execute_258964:                        # @_execute_258964
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258965;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258965
	.align	16, 0x90
_execute_258965:                        # @_execute_258965
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258966;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258966
	.align	16, 0x90
_execute_258966:                        # @_execute_258966
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258967;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258967
	.align	16, 0x90
_execute_258967:                        # @_execute_258967
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258968;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258968
	.align	16, 0x90
_execute_258968:                        # @_execute_258968
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258969;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258969
	.align	16, 0x90
_execute_258969:                        # @_execute_258969
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258970;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258970
	.align	16, 0x90
_execute_258970:                        # @_execute_258970
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258971;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258971
	.align	16, 0x90
_execute_258971:                        # @_execute_258971
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_708;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_708
	.align	16, 0x90
_execute_708:                           # @_execute_708
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$84, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_709;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_709
	.align	16, 0x90
_execute_709:                           # @_execute_709
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB577_1:                              # =>This Inner Loop Header: Depth=1
	movl	$85, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB577_29
# BB#2:                                 #   in Loop: Header=BB577_1 Depth=1
	jmpq	*%rax
.Ltmp1781:                              # Block address taken
.LBB577_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB577_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB577_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB577_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB577_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB577_32
.LBB577_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB577_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB577_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB577_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB577_9
# BB#34:
	movq	664(%rsi), %r8
.LBB577_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB577_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB577_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1781(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB577_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB577_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB577_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB577_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB577_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB577_13
.LBB577_12:
	testl	%eax, %eax
	je	.LBB577_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB577_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB577_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB577_15:
	testb	%al, %al
	je	.LBB577_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB577_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB577_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB577_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB577_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB577_42
.LBB577_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB577_17
.LBB577_41:
	testl	%eax, %eax
	je	.LBB577_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB577_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB577_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB577_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB577_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB577_28
.LBB577_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB577_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB577_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB577_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB577_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB577_22
.LBB577_21:
	testl	%eax, %eax
	je	.LBB577_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB577_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB577_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB577_24:
	testb	%al, %al
	je	.LBB577_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB577_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB577_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB577_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB577_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB577_55
.LBB577_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB577_26
.LBB577_54:
	testl	%eax, %eax
	je	.LBB577_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB577_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB577_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB577_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB577_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB577_28
.LBB577_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB577_28

	.def	 _execute_710;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_710
	.align	16, 0x90
_execute_710:                           # @_execute_710
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB578_1:                              # =>This Inner Loop Header: Depth=1
	movl	$86, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB578_17
# BB#2:                                 #   in Loop: Header=BB578_1 Depth=1
	jmpq	*%rax
.Ltmp1785:                              # Block address taken
.LBB578_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB578_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB578_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB578_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB578_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB578_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB578_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB578_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB578_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB578_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB578_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB578_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB578_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB578_11
.LBB578_10:
	testl	%eax, %eax
	je	.LBB578_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB578_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB578_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB578_13:
	testb	%al, %al
	je	.LBB578_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB578_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB578_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB578_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB578_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB578_29
.LBB578_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB578_15
.LBB578_28:
	testl	%eax, %eax
	je	.LBB578_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB578_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB578_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB578_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB578_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB578_17
.LBB578_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167176480, %ecx        # imm = 0x9F6E920
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167176328, %ecx        # imm = 0x9F6E888
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_fd94fce2_106(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176328, %ecx        # imm = 0x9F6E888
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_fd94fce2_106(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176328, %ecx        # imm = 0x9F6E888
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_fd94fce2_106(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176328, %ecx        # imm = 0x9F6E888
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_fd94fce2_106(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_fd94fce2_107(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167176480, %ecx        # imm = 0x9F6E920
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167176328, %ecx        # imm = 0x9F6E888
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_fd94fce2_106(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176328, %ecx        # imm = 0x9F6E888
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_fd94fce2_106(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167176328, %ecx        # imm = 0x9F6E888
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167176328, %ecx        # imm = 0x9F6E888
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_fd94fce2_106(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_fd94fce2_107(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB578_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1785(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_fd94fce2_106;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_fd94fce2_106
	.align	16, 0x90
_subprog_m_7ddf9423_fd94fce2_106:       # @_subprog_m_7ddf9423_fd94fce2_106
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB579_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB579_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB579_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB579_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB579_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB579_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB579_6
.LBB579_5:
	testl	%eax, %eax
	je	.LBB579_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB579_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB579_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB579_8:
	testb	%al, %al
	je	.LBB579_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB579_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB579_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB579_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB579_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB579_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB579_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB579_160
.LBB579_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB579_10
.LBB579_159:
	testl	%eax, %eax
	je	.LBB579_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB579_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB579_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB579_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB579_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB579_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB579_148
.LBB579_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB579_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB579_13
.LBB579_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB579_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB579_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB579_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB579_148
.LBB579_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB579_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB579_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB579_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB579_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB579_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB579_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB579_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB579_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB579_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB579_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB579_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB579_23
.LBB579_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB579_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB579_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB579_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB579_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB579_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB579_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB579_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB579_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB579_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB579_182
.LBB579_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB579_27
.LBB579_181:
	testl	%eax, %eax
	je	.LBB579_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB579_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB579_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB579_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB579_29
.LBB579_28:
	testl	%eax, %eax
	je	.LBB579_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB579_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB579_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB579_31:
	testb	%al, %al
	je	.LBB579_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB579_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB579_195
.LBB579_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB579_33
.LBB579_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB579_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB579_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB579_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB579_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB579_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB579_228
.LBB579_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB579_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB579_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB579_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB579_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB579_39
.LBB579_38:
	testl	%eax, %eax
	je	.LBB579_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB579_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB579_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB579_41:
	testb	%al, %al
	je	.LBB579_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB579_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB579_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB579_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB579_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB579_209
.LBB579_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB579_43
.LBB579_208:
	testl	%eax, %eax
	je	.LBB579_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB579_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB579_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB579_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB579_45
.LBB579_44:
	testl	%eax, %eax
	je	.LBB579_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB579_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB579_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB579_47:
	testb	%al, %al
	je	.LBB579_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB579_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB579_222
.LBB579_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB579_49
.LBB579_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB579_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB579_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB579_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB579_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB579_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB579_227
.LBB579_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB579_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB579_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB579_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB579_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB579_55
.LBB579_54:
	testl	%eax, %eax
	je	.LBB579_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB579_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB579_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB579_57:
	testb	%al, %al
	je	.LBB579_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB579_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB579_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB579_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB579_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB579_240
.LBB579_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB579_59
.LBB579_239:
	testl	%eax, %eax
	je	.LBB579_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB579_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB579_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB579_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB579_61
.LBB579_60:
	testl	%eax, %eax
	je	.LBB579_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB579_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB579_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB579_63:
	testb	%al, %al
	je	.LBB579_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB579_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB579_253
.LBB579_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB579_65
.LBB579_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB579_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB579_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB579_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB579_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB579_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB579_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB579_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB579_229
.LBB579_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB579_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB579_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB579_70
.LBB579_69:
	testl	%eax, %eax
	je	.LBB579_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB579_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB579_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB579_72:
	testb	%al, %al
	je	.LBB579_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB579_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB579_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB579_265
.LBB579_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB579_74
.LBB579_264:
	testl	%eax, %eax
	je	.LBB579_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB579_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB579_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB579_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB579_76
.LBB579_75:
	testl	%eax, %eax
	je	.LBB579_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB579_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB579_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB579_78:
	testb	%al, %al
	je	.LBB579_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB579_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB579_277
.LBB579_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB579_80
.LBB579_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB579_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB579_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB579_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB579_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB579_82
.LBB579_81:
	testl	%eax, %eax
	je	.LBB579_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB579_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB579_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB579_84:
	testb	%al, %al
	je	.LBB579_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB579_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB579_288
.LBB579_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB579_86
.LBB579_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB579_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB579_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB579_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB579_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB579_88
.LBB579_87:
	testl	%eax, %eax
	je	.LBB579_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB579_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB579_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB579_90:
	testb	%al, %al
	je	.LBB579_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB579_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB579_299
.LBB579_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB579_92
.LBB579_298:
	testl	%eax, %eax
	je	.LBB579_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB579_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB579_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB579_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB579_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB579_351
.LBB579_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB579_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB579_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB579_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB579_97
.LBB579_96:
	testl	%eax, %eax
	je	.LBB579_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB579_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB579_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB579_99:
	testb	%al, %al
	je	.LBB579_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB579_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB579_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB579_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB579_311
.LBB579_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB579_101
.LBB579_310:
	testl	%eax, %eax
	je	.LBB579_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB579_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB579_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB579_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB579_103
.LBB579_102:
	testl	%eax, %eax
	je	.LBB579_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB579_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB579_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB579_105:
	testb	%al, %al
	je	.LBB579_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB579_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB579_323
.LBB579_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB579_107
.LBB579_322:
	testl	%eax, %eax
	je	.LBB579_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB579_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB579_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB579_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB579_109
.LBB579_108:
	testl	%eax, %eax
	je	.LBB579_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB579_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB579_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB579_111:
	testb	%al, %al
	je	.LBB579_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB579_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB579_334
.LBB579_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB579_113
.LBB579_333:
	testl	%eax, %eax
	je	.LBB579_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB579_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB579_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB579_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB579_115
.LBB579_114:
	testl	%eax, %eax
	je	.LBB579_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB579_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB579_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB579_117:
	testb	%al, %al
	je	.LBB579_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB579_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB579_345
.LBB579_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB579_119
.LBB579_344:
	testl	%eax, %eax
	je	.LBB579_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB579_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB579_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB579_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB579_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB579_350
.LBB579_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB579_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB579_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB579_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB579_124
.LBB579_123:
	testl	%eax, %eax
	je	.LBB579_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB579_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB579_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB579_126:
	testb	%al, %al
	je	.LBB579_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB579_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB579_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB579_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB579_359
.LBB579_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB579_128
.LBB579_358:
	testl	%eax, %eax
	je	.LBB579_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB579_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB579_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB579_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB579_130
.LBB579_129:
	testl	%eax, %eax
	je	.LBB579_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB579_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB579_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB579_132:
	testb	%al, %al
	je	.LBB579_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB579_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB579_371
.LBB579_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB579_134
.LBB579_370:
	testl	%eax, %eax
	je	.LBB579_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB579_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB579_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB579_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB579_136
.LBB579_135:
	testl	%eax, %eax
	je	.LBB579_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB579_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB579_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB579_138:
	testb	%al, %al
	je	.LBB579_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB579_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB579_382
.LBB579_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB579_140
.LBB579_381:
	testl	%eax, %eax
	je	.LBB579_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB579_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB579_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB579_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB579_142
.LBB579_141:
	testl	%eax, %eax
	je	.LBB579_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB579_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB579_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB579_144:
	testb	%al, %al
	je	.LBB579_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB579_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB579_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB579_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB579_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB579_393
.LBB579_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB579_146
.LBB579_392:
	testl	%eax, %eax
	je	.LBB579_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB579_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB579_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB579_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB579_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB579_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB579_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB579_148
.LBB579_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB579_148

	.def	 _subprog_m_7ddf9423_fd94fce2_107;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_fd94fce2_107
	.align	16, 0x90
_subprog_m_7ddf9423_fd94fce2_107:       # @_subprog_m_7ddf9423_fd94fce2_107
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB580_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB580_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB580_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB580_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB580_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB580_5
.LBB580_4:
	testl	%eax, %eax
	je	.LBB580_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB580_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB580_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB580_7:
	testb	%al, %al
	je	.LBB580_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB580_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB580_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB580_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB580_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB580_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB580_73
.LBB580_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB580_9
.LBB580_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB580_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB580_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB580_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB580_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB580_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB580_63
.LBB580_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB580_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB580_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB580_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB580_15
.LBB580_14:
	testl	%eax, %eax
	je	.LBB580_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB580_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB580_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB580_17:
	testb	%al, %al
	je	.LBB580_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB580_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB580_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB580_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB580_87
.LBB580_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB580_19
.LBB580_86:
	testl	%eax, %eax
	je	.LBB580_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB580_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB580_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB580_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB580_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB580_21
.LBB580_20:
	testl	%eax, %eax
	je	.LBB580_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB580_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB580_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB580_23:
	testb	%al, %al
	je	.LBB580_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB580_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB580_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB580_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB580_98
.LBB580_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB580_25
.LBB580_97:
	testl	%eax, %eax
	je	.LBB580_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB580_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB580_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB580_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB580_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB580_103
.LBB580_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB580_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB580_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB580_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB580_30
.LBB580_29:
	testl	%eax, %eax
	je	.LBB580_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB580_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB580_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB580_32:
	testb	%al, %al
	je	.LBB580_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB580_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB580_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB580_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB580_114
.LBB580_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB580_34
.LBB580_113:
	testl	%eax, %eax
	je	.LBB580_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB580_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB580_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB580_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB580_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB580_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB580_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB580_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB580_39
.LBB580_38:
	testl	%eax, %eax
	je	.LBB580_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB580_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB580_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB580_41:
	testb	%al, %al
	je	.LBB580_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB580_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB580_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB580_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB580_126
.LBB580_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB580_43
.LBB580_125:
	testl	%eax, %eax
	je	.LBB580_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB580_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB580_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB580_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB580_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB580_104
.LBB580_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB580_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB580_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB580_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB580_48
.LBB580_47:
	testl	%eax, %eax
	je	.LBB580_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB580_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB580_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB580_50:
	testb	%al, %al
	je	.LBB580_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB580_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB580_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB580_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB580_139
.LBB580_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB580_52
.LBB580_138:
	testl	%eax, %eax
	je	.LBB580_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB580_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB580_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB580_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB580_53
.LBB580_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB580_103:
	xorl	%r8d, %r8d
.LBB580_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB580_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB580_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB580_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB580_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB580_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB580_57
.LBB580_56:
	testl	%eax, %eax
	je	.LBB580_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB580_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB580_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB580_59:
	testb	%al, %al
	je	.LBB580_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB580_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB580_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB580_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB580_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB580_152
.LBB580_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB580_61
.LBB580_151:
	testl	%eax, %eax
	je	.LBB580_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB580_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB580_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB580_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB580_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB580_104
.LBB580_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB580_63

	.def	 _execute_713;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_713
	.align	16, 0x90
_execute_713:                           # @_execute_713
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$87, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng105(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258972;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258972
	.align	16, 0x90
_execute_258972:                        # @_execute_258972
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258973;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258973
	.align	16, 0x90
_execute_258973:                        # @_execute_258973
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258974;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258974
	.align	16, 0x90
_execute_258974:                        # @_execute_258974
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258975;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258975
	.align	16, 0x90
_execute_258975:                        # @_execute_258975
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258976;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258976
	.align	16, 0x90
_execute_258976:                        # @_execute_258976
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258977;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258977
	.align	16, 0x90
_execute_258977:                        # @_execute_258977
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258978;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258978
	.align	16, 0x90
_execute_258978:                        # @_execute_258978
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258979;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258979
	.align	16, 0x90
_execute_258979:                        # @_execute_258979
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_715;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_715
	.align	16, 0x90
_execute_715:                           # @_execute_715
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$88, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_716;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_716
	.align	16, 0x90
_execute_716:                           # @_execute_716
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB591_1:                              # =>This Inner Loop Header: Depth=1
	movl	$89, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB591_29
# BB#2:                                 #   in Loop: Header=BB591_1 Depth=1
	jmpq	*%rax
.Ltmp1825:                              # Block address taken
.LBB591_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB591_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB591_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB591_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB591_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB591_32
.LBB591_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB591_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB591_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB591_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB591_9
# BB#34:
	movq	664(%rsi), %r8
.LBB591_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB591_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB591_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1825(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB591_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB591_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB591_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB591_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB591_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB591_13
.LBB591_12:
	testl	%eax, %eax
	je	.LBB591_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB591_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB591_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB591_15:
	testb	%al, %al
	je	.LBB591_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB591_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB591_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB591_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB591_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB591_42
.LBB591_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB591_17
.LBB591_41:
	testl	%eax, %eax
	je	.LBB591_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB591_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB591_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB591_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB591_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB591_28
.LBB591_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB591_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB591_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB591_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB591_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB591_22
.LBB591_21:
	testl	%eax, %eax
	je	.LBB591_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB591_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB591_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB591_24:
	testb	%al, %al
	je	.LBB591_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB591_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB591_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB591_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB591_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB591_55
.LBB591_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB591_26
.LBB591_54:
	testl	%eax, %eax
	je	.LBB591_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB591_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB591_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB591_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB591_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB591_28
.LBB591_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB591_28

	.def	 _execute_717;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_717
	.align	16, 0x90
_execute_717:                           # @_execute_717
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB592_1:                              # =>This Inner Loop Header: Depth=1
	movl	$90, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB592_17
# BB#2:                                 #   in Loop: Header=BB592_1 Depth=1
	jmpq	*%rax
.Ltmp1829:                              # Block address taken
.LBB592_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB592_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB592_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB592_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB592_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB592_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB592_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB592_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB592_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB592_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB592_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB592_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB592_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB592_11
.LBB592_10:
	testl	%eax, %eax
	je	.LBB592_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB592_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB592_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB592_13:
	testb	%al, %al
	je	.LBB592_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB592_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB592_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB592_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB592_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB592_29
.LBB592_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB592_15
.LBB592_28:
	testl	%eax, %eax
	je	.LBB592_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB592_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB592_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB592_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB592_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB592_17
.LBB592_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167177088, %ecx        # imm = 0x9F6EB80
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167176936, %ecx        # imm = 0x9F6EAE8
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_d7fa3362_108(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176936, %ecx        # imm = 0x9F6EAE8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_d7fa3362_108(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176936, %ecx        # imm = 0x9F6EAE8
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_d7fa3362_108(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176936, %ecx        # imm = 0x9F6EAE8
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_d7fa3362_108(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_d7fa3362_109(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167177088, %ecx        # imm = 0x9F6EB80
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167176936, %ecx        # imm = 0x9F6EAE8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_d7fa3362_108(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167176936, %ecx        # imm = 0x9F6EAE8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_d7fa3362_108(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167176936, %ecx        # imm = 0x9F6EAE8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167176936, %ecx        # imm = 0x9F6EAE8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_d7fa3362_108(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_d7fa3362_109(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB592_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1829(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_d7fa3362_108;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_d7fa3362_108
	.align	16, 0x90
_subprog_m_7ddf9423_d7fa3362_108:       # @_subprog_m_7ddf9423_d7fa3362_108
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB593_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB593_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB593_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB593_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB593_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB593_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB593_6
.LBB593_5:
	testl	%eax, %eax
	je	.LBB593_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB593_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB593_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB593_8:
	testb	%al, %al
	je	.LBB593_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB593_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB593_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB593_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB593_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB593_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB593_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB593_160
.LBB593_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB593_10
.LBB593_159:
	testl	%eax, %eax
	je	.LBB593_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB593_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB593_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB593_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB593_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB593_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB593_148
.LBB593_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB593_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB593_13
.LBB593_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB593_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB593_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB593_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB593_148
.LBB593_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB593_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB593_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB593_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB593_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB593_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB593_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB593_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB593_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB593_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB593_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB593_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB593_23
.LBB593_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB593_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB593_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB593_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB593_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB593_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB593_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB593_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB593_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB593_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB593_182
.LBB593_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB593_27
.LBB593_181:
	testl	%eax, %eax
	je	.LBB593_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB593_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB593_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB593_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB593_29
.LBB593_28:
	testl	%eax, %eax
	je	.LBB593_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB593_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB593_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB593_31:
	testb	%al, %al
	je	.LBB593_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB593_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB593_195
.LBB593_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB593_33
.LBB593_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB593_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB593_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB593_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB593_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB593_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB593_228
.LBB593_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB593_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB593_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB593_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB593_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB593_39
.LBB593_38:
	testl	%eax, %eax
	je	.LBB593_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB593_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB593_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB593_41:
	testb	%al, %al
	je	.LBB593_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB593_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB593_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB593_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB593_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB593_209
.LBB593_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB593_43
.LBB593_208:
	testl	%eax, %eax
	je	.LBB593_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB593_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB593_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB593_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB593_45
.LBB593_44:
	testl	%eax, %eax
	je	.LBB593_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB593_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB593_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB593_47:
	testb	%al, %al
	je	.LBB593_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB593_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB593_222
.LBB593_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB593_49
.LBB593_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB593_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB593_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB593_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB593_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB593_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB593_227
.LBB593_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB593_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB593_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB593_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB593_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB593_55
.LBB593_54:
	testl	%eax, %eax
	je	.LBB593_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB593_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB593_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB593_57:
	testb	%al, %al
	je	.LBB593_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB593_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB593_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB593_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB593_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB593_240
.LBB593_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB593_59
.LBB593_239:
	testl	%eax, %eax
	je	.LBB593_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB593_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB593_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB593_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB593_61
.LBB593_60:
	testl	%eax, %eax
	je	.LBB593_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB593_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB593_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB593_63:
	testb	%al, %al
	je	.LBB593_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB593_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB593_253
.LBB593_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB593_65
.LBB593_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB593_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB593_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB593_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB593_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB593_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB593_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB593_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB593_229
.LBB593_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB593_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB593_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB593_70
.LBB593_69:
	testl	%eax, %eax
	je	.LBB593_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB593_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB593_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB593_72:
	testb	%al, %al
	je	.LBB593_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB593_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB593_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB593_265
.LBB593_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB593_74
.LBB593_264:
	testl	%eax, %eax
	je	.LBB593_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB593_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB593_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB593_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB593_76
.LBB593_75:
	testl	%eax, %eax
	je	.LBB593_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB593_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB593_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB593_78:
	testb	%al, %al
	je	.LBB593_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB593_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB593_277
.LBB593_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB593_80
.LBB593_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB593_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB593_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB593_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB593_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB593_82
.LBB593_81:
	testl	%eax, %eax
	je	.LBB593_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB593_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB593_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB593_84:
	testb	%al, %al
	je	.LBB593_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB593_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB593_288
.LBB593_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB593_86
.LBB593_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB593_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB593_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB593_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB593_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB593_88
.LBB593_87:
	testl	%eax, %eax
	je	.LBB593_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB593_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB593_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB593_90:
	testb	%al, %al
	je	.LBB593_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB593_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB593_299
.LBB593_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB593_92
.LBB593_298:
	testl	%eax, %eax
	je	.LBB593_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB593_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB593_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB593_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB593_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB593_351
.LBB593_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB593_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB593_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB593_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB593_97
.LBB593_96:
	testl	%eax, %eax
	je	.LBB593_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB593_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB593_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB593_99:
	testb	%al, %al
	je	.LBB593_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB593_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB593_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB593_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB593_311
.LBB593_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB593_101
.LBB593_310:
	testl	%eax, %eax
	je	.LBB593_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB593_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB593_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB593_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB593_103
.LBB593_102:
	testl	%eax, %eax
	je	.LBB593_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB593_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB593_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB593_105:
	testb	%al, %al
	je	.LBB593_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB593_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB593_323
.LBB593_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB593_107
.LBB593_322:
	testl	%eax, %eax
	je	.LBB593_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB593_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB593_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB593_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB593_109
.LBB593_108:
	testl	%eax, %eax
	je	.LBB593_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB593_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB593_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB593_111:
	testb	%al, %al
	je	.LBB593_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB593_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB593_334
.LBB593_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB593_113
.LBB593_333:
	testl	%eax, %eax
	je	.LBB593_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB593_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB593_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB593_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB593_115
.LBB593_114:
	testl	%eax, %eax
	je	.LBB593_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB593_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB593_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB593_117:
	testb	%al, %al
	je	.LBB593_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB593_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB593_345
.LBB593_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB593_119
.LBB593_344:
	testl	%eax, %eax
	je	.LBB593_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB593_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB593_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB593_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB593_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB593_350
.LBB593_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB593_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB593_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB593_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB593_124
.LBB593_123:
	testl	%eax, %eax
	je	.LBB593_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB593_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB593_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB593_126:
	testb	%al, %al
	je	.LBB593_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB593_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB593_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB593_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB593_359
.LBB593_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB593_128
.LBB593_358:
	testl	%eax, %eax
	je	.LBB593_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB593_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB593_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB593_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB593_130
.LBB593_129:
	testl	%eax, %eax
	je	.LBB593_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB593_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB593_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB593_132:
	testb	%al, %al
	je	.LBB593_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB593_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB593_371
.LBB593_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB593_134
.LBB593_370:
	testl	%eax, %eax
	je	.LBB593_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB593_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB593_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB593_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB593_136
.LBB593_135:
	testl	%eax, %eax
	je	.LBB593_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB593_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB593_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB593_138:
	testb	%al, %al
	je	.LBB593_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB593_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB593_382
.LBB593_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB593_140
.LBB593_381:
	testl	%eax, %eax
	je	.LBB593_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB593_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB593_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB593_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB593_142
.LBB593_141:
	testl	%eax, %eax
	je	.LBB593_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB593_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB593_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB593_144:
	testb	%al, %al
	je	.LBB593_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB593_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB593_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB593_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB593_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB593_393
.LBB593_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB593_146
.LBB593_392:
	testl	%eax, %eax
	je	.LBB593_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB593_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB593_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB593_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB593_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB593_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB593_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB593_148
.LBB593_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB593_148

	.def	 _subprog_m_7ddf9423_d7fa3362_109;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_d7fa3362_109
	.align	16, 0x90
_subprog_m_7ddf9423_d7fa3362_109:       # @_subprog_m_7ddf9423_d7fa3362_109
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB594_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB594_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB594_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB594_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB594_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB594_5
.LBB594_4:
	testl	%eax, %eax
	je	.LBB594_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB594_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB594_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB594_7:
	testb	%al, %al
	je	.LBB594_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB594_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB594_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB594_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB594_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB594_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB594_73
.LBB594_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB594_9
.LBB594_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB594_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB594_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB594_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB594_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB594_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB594_63
.LBB594_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB594_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB594_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB594_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB594_15
.LBB594_14:
	testl	%eax, %eax
	je	.LBB594_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB594_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB594_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB594_17:
	testb	%al, %al
	je	.LBB594_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB594_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB594_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB594_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB594_87
.LBB594_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB594_19
.LBB594_86:
	testl	%eax, %eax
	je	.LBB594_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB594_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB594_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB594_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB594_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB594_21
.LBB594_20:
	testl	%eax, %eax
	je	.LBB594_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB594_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB594_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB594_23:
	testb	%al, %al
	je	.LBB594_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB594_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB594_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB594_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB594_98
.LBB594_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB594_25
.LBB594_97:
	testl	%eax, %eax
	je	.LBB594_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB594_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB594_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB594_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB594_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB594_103
.LBB594_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB594_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB594_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB594_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB594_30
.LBB594_29:
	testl	%eax, %eax
	je	.LBB594_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB594_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB594_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB594_32:
	testb	%al, %al
	je	.LBB594_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB594_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB594_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB594_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB594_114
.LBB594_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB594_34
.LBB594_113:
	testl	%eax, %eax
	je	.LBB594_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB594_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB594_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB594_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB594_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB594_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB594_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB594_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB594_39
.LBB594_38:
	testl	%eax, %eax
	je	.LBB594_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB594_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB594_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB594_41:
	testb	%al, %al
	je	.LBB594_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB594_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB594_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB594_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB594_126
.LBB594_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB594_43
.LBB594_125:
	testl	%eax, %eax
	je	.LBB594_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB594_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB594_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB594_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB594_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB594_104
.LBB594_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB594_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB594_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB594_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB594_48
.LBB594_47:
	testl	%eax, %eax
	je	.LBB594_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB594_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB594_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB594_50:
	testb	%al, %al
	je	.LBB594_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB594_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB594_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB594_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB594_139
.LBB594_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB594_52
.LBB594_138:
	testl	%eax, %eax
	je	.LBB594_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB594_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB594_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB594_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB594_53
.LBB594_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB594_103:
	xorl	%r8d, %r8d
.LBB594_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB594_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB594_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB594_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB594_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB594_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB594_57
.LBB594_56:
	testl	%eax, %eax
	je	.LBB594_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB594_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB594_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB594_59:
	testb	%al, %al
	je	.LBB594_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB594_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB594_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB594_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB594_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB594_152
.LBB594_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB594_61
.LBB594_151:
	testl	%eax, %eax
	je	.LBB594_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB594_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB594_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB594_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB594_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB594_104
.LBB594_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB594_63

	.def	 _execute_720;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_720
	.align	16, 0x90
_execute_720:                           # @_execute_720
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$91, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng108(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258981;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258981
	.align	16, 0x90
_execute_258981:                        # @_execute_258981
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	%rcx, %rbx
	.align	16, 0x90
.LBB596_1:                              # =>This Inner Loop Header: Depth=1
	cmpq	$0, 304(%rsi)
	jne	.LBB596_1
# BB#2:
	leaq	40(%rsi), %r14
	movl	$1, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	leaq	-40(%rbp), %rdi
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	384(%rsi), %rdx
	addq	$167166320, %rbx        # imm = 0x9F6C170
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_udp_matching_64(%rip)
	movsbl	%al, %eax
	testl	%eax, %eax
	je	.LBB596_4
# BB#3:
	movl	-40(%rbp), %eax
	andl	$1, %eax
	movl	%eax, 416(%rsi)
	movl	-36(%rbp), %eax
	andl	$1, %eax
	movl	%eax, 420(%rsi)
	addq	$392, %rsi              # imm = 0x188
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast(%rip)
.LBB596_4:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%rbp
	ret

	.def	 _execute_258980;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258980
	.align	16, 0x90
_execute_258980:                        # @_execute_258980
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	552(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	208(%rsi), %rcx
	addq	$528, %rsi              # imm = 0x210
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258982;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258982
	.align	16, 0x90
_execute_258982:                        # @_execute_258982
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$120, %rsp
	movq	%rdx, %rsi
	leaq	384(%rsi), %r9
	leaq	ng27(%rip), %rax
	movq	%rax, 80(%rsp)
	movl	$1, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$1, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-16(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	720(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	320(%rsi), %rcx
	addq	$696, %rsi              # imm = 0x2B8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$120, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_258983;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_258983
	.align	16, 0x90
_execute_258983:                        # @_execute_258983
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$120, %rsp
	movq	%rdx, %rsi
	leaq	392(%rsi), %r9
	leaq	ng24(%rip), %rax
	movq	%rax, 80(%rsp)
	movl	$1, 96(%rsp)
	movl	$32, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$1, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-16(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	888(%rsi), %rcx
	movl	$8, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	264(%rsi), %rcx
	addq	$864, %rsi              # imm = 0x360
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$120, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259082;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259082
	.align	16, 0x90
_execute_259082:                        # @_execute_259082
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259083;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259083
	.align	16, 0x90
_execute_259083:                        # @_execute_259083
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259084;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259084
	.align	16, 0x90
_execute_259084:                        # @_execute_259084
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259085;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259085
	.align	16, 0x90
_execute_259085:                        # @_execute_259085
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259086;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259086
	.align	16, 0x90
_execute_259086:                        # @_execute_259086
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259087;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259087
	.align	16, 0x90
_execute_259087:                        # @_execute_259087
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259088;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259088
	.align	16, 0x90
_execute_259088:                        # @_execute_259088
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259089;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259089
	.align	16, 0x90
_execute_259089:                        # @_execute_259089
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_760;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_760
	.align	16, 0x90
_execute_760:                           # @_execute_760
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$92, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_761;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_761
	.align	16, 0x90
_execute_761:                           # @_execute_761
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB609_1:                              # =>This Inner Loop Header: Depth=1
	movl	$93, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB609_29
# BB#2:                                 #   in Loop: Header=BB609_1 Depth=1
	jmpq	*%rax
.Ltmp1881:                              # Block address taken
.LBB609_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB609_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB609_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB609_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB609_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB609_32
.LBB609_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB609_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB609_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB609_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB609_9
# BB#34:
	movq	664(%rsi), %r8
.LBB609_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB609_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB609_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1881(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB609_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB609_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB609_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB609_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB609_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB609_13
.LBB609_12:
	testl	%eax, %eax
	je	.LBB609_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB609_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB609_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB609_15:
	testb	%al, %al
	je	.LBB609_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB609_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB609_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB609_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB609_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB609_42
.LBB609_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB609_17
.LBB609_41:
	testl	%eax, %eax
	je	.LBB609_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB609_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB609_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB609_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB609_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB609_28
.LBB609_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB609_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB609_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB609_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB609_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB609_22
.LBB609_21:
	testl	%eax, %eax
	je	.LBB609_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB609_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB609_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB609_24:
	testb	%al, %al
	je	.LBB609_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB609_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB609_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB609_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB609_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB609_55
.LBB609_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB609_26
.LBB609_54:
	testl	%eax, %eax
	je	.LBB609_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB609_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB609_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB609_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB609_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB609_28
.LBB609_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB609_28

	.def	 _execute_762;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_762
	.align	16, 0x90
_execute_762:                           # @_execute_762
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB610_1:                              # =>This Inner Loop Header: Depth=1
	movl	$94, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB610_17
# BB#2:                                 #   in Loop: Header=BB610_1 Depth=1
	jmpq	*%rax
.Ltmp1885:                              # Block address taken
.LBB610_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB610_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB610_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB610_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB610_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB610_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB610_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB610_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB610_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB610_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB610_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB610_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB610_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB610_11
.LBB610_10:
	testl	%eax, %eax
	je	.LBB610_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB610_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB610_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB610_13:
	testb	%al, %al
	je	.LBB610_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB610_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB610_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB610_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB610_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB610_29
.LBB610_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB610_15
.LBB610_28:
	testl	%eax, %eax
	je	.LBB610_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB610_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB610_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB610_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB610_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB610_17
.LBB610_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167177544, %ecx        # imm = 0x9F6ED48
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167177240, %ecx        # imm = 0x9F6EC18
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_99e4bc71_112(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167177240, %ecx        # imm = 0x9F6EC18
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_99e4bc71_112(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167177240, %ecx        # imm = 0x9F6EC18
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_99e4bc71_112(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167177240, %ecx        # imm = 0x9F6EC18
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_99e4bc71_112(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_99e4bc71_113(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167177544, %ecx        # imm = 0x9F6ED48
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167177240, %ecx        # imm = 0x9F6EC18
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_99e4bc71_112(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167177240, %ecx        # imm = 0x9F6EC18
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_99e4bc71_112(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167177240, %ecx        # imm = 0x9F6EC18
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167177240, %ecx        # imm = 0x9F6EC18
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_99e4bc71_112(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_99e4bc71_113(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB610_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1885(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_99e4bc71_112;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_99e4bc71_112
	.align	16, 0x90
_subprog_m_7ddf9423_99e4bc71_112:       # @_subprog_m_7ddf9423_99e4bc71_112
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB611_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB611_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB611_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB611_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB611_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB611_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB611_6
.LBB611_5:
	testl	%eax, %eax
	je	.LBB611_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB611_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB611_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB611_8:
	testb	%al, %al
	je	.LBB611_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB611_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB611_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB611_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB611_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB611_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB611_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB611_160
.LBB611_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB611_10
.LBB611_159:
	testl	%eax, %eax
	je	.LBB611_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB611_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB611_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB611_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB611_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB611_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB611_148
.LBB611_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB611_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB611_13
.LBB611_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB611_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB611_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB611_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB611_148
.LBB611_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB611_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB611_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB611_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB611_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB611_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB611_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB611_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB611_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB611_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB611_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB611_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB611_23
.LBB611_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB611_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB611_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB611_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB611_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB611_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB611_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB611_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB611_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB611_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB611_182
.LBB611_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB611_27
.LBB611_181:
	testl	%eax, %eax
	je	.LBB611_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB611_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB611_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB611_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB611_29
.LBB611_28:
	testl	%eax, %eax
	je	.LBB611_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB611_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB611_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB611_31:
	testb	%al, %al
	je	.LBB611_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB611_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB611_195
.LBB611_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB611_33
.LBB611_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB611_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB611_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB611_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB611_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB611_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB611_228
.LBB611_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB611_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB611_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB611_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB611_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB611_39
.LBB611_38:
	testl	%eax, %eax
	je	.LBB611_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB611_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB611_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB611_41:
	testb	%al, %al
	je	.LBB611_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB611_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB611_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB611_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB611_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB611_209
.LBB611_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB611_43
.LBB611_208:
	testl	%eax, %eax
	je	.LBB611_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB611_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB611_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB611_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB611_45
.LBB611_44:
	testl	%eax, %eax
	je	.LBB611_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB611_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB611_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB611_47:
	testb	%al, %al
	je	.LBB611_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB611_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB611_222
.LBB611_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB611_49
.LBB611_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB611_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB611_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB611_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB611_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB611_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB611_227
.LBB611_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB611_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB611_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB611_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB611_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB611_55
.LBB611_54:
	testl	%eax, %eax
	je	.LBB611_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB611_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB611_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB611_57:
	testb	%al, %al
	je	.LBB611_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB611_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB611_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB611_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB611_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB611_240
.LBB611_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB611_59
.LBB611_239:
	testl	%eax, %eax
	je	.LBB611_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB611_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB611_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB611_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB611_61
.LBB611_60:
	testl	%eax, %eax
	je	.LBB611_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB611_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB611_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB611_63:
	testb	%al, %al
	je	.LBB611_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB611_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB611_253
.LBB611_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB611_65
.LBB611_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB611_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB611_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB611_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB611_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB611_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB611_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB611_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB611_229
.LBB611_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB611_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB611_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB611_70
.LBB611_69:
	testl	%eax, %eax
	je	.LBB611_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB611_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB611_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB611_72:
	testb	%al, %al
	je	.LBB611_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB611_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB611_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB611_265
.LBB611_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB611_74
.LBB611_264:
	testl	%eax, %eax
	je	.LBB611_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB611_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB611_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB611_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB611_76
.LBB611_75:
	testl	%eax, %eax
	je	.LBB611_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB611_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB611_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB611_78:
	testb	%al, %al
	je	.LBB611_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB611_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB611_277
.LBB611_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB611_80
.LBB611_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB611_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB611_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB611_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB611_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB611_82
.LBB611_81:
	testl	%eax, %eax
	je	.LBB611_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB611_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB611_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB611_84:
	testb	%al, %al
	je	.LBB611_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB611_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB611_288
.LBB611_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB611_86
.LBB611_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB611_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB611_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB611_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB611_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB611_88
.LBB611_87:
	testl	%eax, %eax
	je	.LBB611_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB611_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB611_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB611_90:
	testb	%al, %al
	je	.LBB611_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB611_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB611_299
.LBB611_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB611_92
.LBB611_298:
	testl	%eax, %eax
	je	.LBB611_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB611_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB611_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB611_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB611_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB611_351
.LBB611_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB611_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB611_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB611_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB611_97
.LBB611_96:
	testl	%eax, %eax
	je	.LBB611_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB611_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB611_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB611_99:
	testb	%al, %al
	je	.LBB611_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB611_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB611_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB611_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB611_311
.LBB611_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB611_101
.LBB611_310:
	testl	%eax, %eax
	je	.LBB611_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB611_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB611_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB611_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB611_103
.LBB611_102:
	testl	%eax, %eax
	je	.LBB611_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB611_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB611_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB611_105:
	testb	%al, %al
	je	.LBB611_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB611_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB611_323
.LBB611_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB611_107
.LBB611_322:
	testl	%eax, %eax
	je	.LBB611_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB611_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB611_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB611_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB611_109
.LBB611_108:
	testl	%eax, %eax
	je	.LBB611_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB611_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB611_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB611_111:
	testb	%al, %al
	je	.LBB611_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB611_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB611_334
.LBB611_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB611_113
.LBB611_333:
	testl	%eax, %eax
	je	.LBB611_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB611_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB611_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB611_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB611_115
.LBB611_114:
	testl	%eax, %eax
	je	.LBB611_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB611_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB611_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB611_117:
	testb	%al, %al
	je	.LBB611_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB611_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB611_345
.LBB611_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB611_119
.LBB611_344:
	testl	%eax, %eax
	je	.LBB611_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB611_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB611_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB611_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB611_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB611_350
.LBB611_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB611_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB611_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB611_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB611_124
.LBB611_123:
	testl	%eax, %eax
	je	.LBB611_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB611_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB611_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB611_126:
	testb	%al, %al
	je	.LBB611_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB611_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB611_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB611_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB611_359
.LBB611_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB611_128
.LBB611_358:
	testl	%eax, %eax
	je	.LBB611_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB611_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB611_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB611_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB611_130
.LBB611_129:
	testl	%eax, %eax
	je	.LBB611_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB611_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB611_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB611_132:
	testb	%al, %al
	je	.LBB611_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB611_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB611_371
.LBB611_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB611_134
.LBB611_370:
	testl	%eax, %eax
	je	.LBB611_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB611_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB611_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB611_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB611_136
.LBB611_135:
	testl	%eax, %eax
	je	.LBB611_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB611_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB611_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB611_138:
	testb	%al, %al
	je	.LBB611_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB611_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB611_382
.LBB611_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB611_140
.LBB611_381:
	testl	%eax, %eax
	je	.LBB611_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB611_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB611_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB611_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB611_142
.LBB611_141:
	testl	%eax, %eax
	je	.LBB611_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB611_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB611_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB611_144:
	testb	%al, %al
	je	.LBB611_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB611_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB611_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB611_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB611_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB611_393
.LBB611_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB611_146
.LBB611_392:
	testl	%eax, %eax
	je	.LBB611_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB611_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB611_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB611_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB611_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB611_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB611_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB611_148
.LBB611_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB611_148

	.def	 _subprog_m_7ddf9423_99e4bc71_113;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_99e4bc71_113
	.align	16, 0x90
_subprog_m_7ddf9423_99e4bc71_113:       # @_subprog_m_7ddf9423_99e4bc71_113
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB612_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB612_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB612_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB612_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB612_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB612_5
.LBB612_4:
	testl	%eax, %eax
	je	.LBB612_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB612_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB612_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB612_7:
	testb	%al, %al
	je	.LBB612_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB612_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB612_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB612_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB612_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB612_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB612_73
.LBB612_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB612_9
.LBB612_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB612_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB612_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB612_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB612_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB612_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB612_63
.LBB612_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB612_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB612_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB612_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB612_15
.LBB612_14:
	testl	%eax, %eax
	je	.LBB612_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB612_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB612_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB612_17:
	testb	%al, %al
	je	.LBB612_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB612_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB612_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB612_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB612_87
.LBB612_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB612_19
.LBB612_86:
	testl	%eax, %eax
	je	.LBB612_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB612_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB612_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB612_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB612_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB612_21
.LBB612_20:
	testl	%eax, %eax
	je	.LBB612_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB612_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB612_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB612_23:
	testb	%al, %al
	je	.LBB612_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB612_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB612_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB612_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB612_98
.LBB612_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB612_25
.LBB612_97:
	testl	%eax, %eax
	je	.LBB612_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB612_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB612_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB612_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB612_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB612_103
.LBB612_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB612_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB612_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB612_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB612_30
.LBB612_29:
	testl	%eax, %eax
	je	.LBB612_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB612_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB612_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB612_32:
	testb	%al, %al
	je	.LBB612_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB612_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB612_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB612_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB612_114
.LBB612_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB612_34
.LBB612_113:
	testl	%eax, %eax
	je	.LBB612_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB612_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB612_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB612_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB612_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB612_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB612_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB612_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB612_39
.LBB612_38:
	testl	%eax, %eax
	je	.LBB612_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB612_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB612_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB612_41:
	testb	%al, %al
	je	.LBB612_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB612_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB612_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB612_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB612_126
.LBB612_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB612_43
.LBB612_125:
	testl	%eax, %eax
	je	.LBB612_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB612_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB612_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB612_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB612_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB612_104
.LBB612_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB612_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB612_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB612_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB612_48
.LBB612_47:
	testl	%eax, %eax
	je	.LBB612_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB612_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB612_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB612_50:
	testb	%al, %al
	je	.LBB612_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB612_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB612_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB612_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB612_139
.LBB612_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB612_52
.LBB612_138:
	testl	%eax, %eax
	je	.LBB612_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB612_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB612_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB612_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB612_53
.LBB612_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB612_103:
	xorl	%r8d, %r8d
.LBB612_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB612_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB612_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB612_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB612_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB612_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB612_57
.LBB612_56:
	testl	%eax, %eax
	je	.LBB612_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB612_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB612_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB612_59:
	testb	%al, %al
	je	.LBB612_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB612_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB612_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB612_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB612_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB612_152
.LBB612_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB612_61
.LBB612_151:
	testl	%eax, %eax
	je	.LBB612_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB612_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB612_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB612_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB612_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB612_104
.LBB612_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB612_63

	.def	 _execute_765;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_765
	.align	16, 0x90
_execute_765:                           # @_execute_765
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$95, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng111(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259132;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259132
	.align	16, 0x90
_execute_259132:                        # @_execute_259132
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259133;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259133
	.align	16, 0x90
_execute_259133:                        # @_execute_259133
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259134;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259134
	.align	16, 0x90
_execute_259134:                        # @_execute_259134
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259135;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259135
	.align	16, 0x90
_execute_259135:                        # @_execute_259135
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259136;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259136
	.align	16, 0x90
_execute_259136:                        # @_execute_259136
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259137;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259137
	.align	16, 0x90
_execute_259137:                        # @_execute_259137
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259138;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259138
	.align	16, 0x90
_execute_259138:                        # @_execute_259138
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259139;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259139
	.align	16, 0x90
_execute_259139:                        # @_execute_259139
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_778;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_778
	.align	16, 0x90
_execute_778:                           # @_execute_778
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$96, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_779;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_779
	.align	16, 0x90
_execute_779:                           # @_execute_779
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB623_1:                              # =>This Inner Loop Header: Depth=1
	movl	$97, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB623_29
# BB#2:                                 #   in Loop: Header=BB623_1 Depth=1
	jmpq	*%rax
.Ltmp1925:                              # Block address taken
.LBB623_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB623_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB623_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB623_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB623_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB623_32
.LBB623_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB623_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB623_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB623_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB623_9
# BB#34:
	movq	664(%rsi), %r8
.LBB623_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB623_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB623_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1925(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB623_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB623_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB623_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB623_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB623_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB623_13
.LBB623_12:
	testl	%eax, %eax
	je	.LBB623_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB623_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB623_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB623_15:
	testb	%al, %al
	je	.LBB623_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB623_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB623_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB623_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB623_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB623_42
.LBB623_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB623_17
.LBB623_41:
	testl	%eax, %eax
	je	.LBB623_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB623_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB623_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB623_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB623_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB623_28
.LBB623_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB623_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB623_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB623_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB623_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB623_22
.LBB623_21:
	testl	%eax, %eax
	je	.LBB623_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB623_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB623_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB623_24:
	testb	%al, %al
	je	.LBB623_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB623_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB623_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB623_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB623_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB623_55
.LBB623_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB623_26
.LBB623_54:
	testl	%eax, %eax
	je	.LBB623_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB623_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB623_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB623_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB623_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB623_28
.LBB623_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB623_28

	.def	 _execute_780;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_780
	.align	16, 0x90
_execute_780:                           # @_execute_780
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB624_1:                              # =>This Inner Loop Header: Depth=1
	movl	$98, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB624_17
# BB#2:                                 #   in Loop: Header=BB624_1 Depth=1
	jmpq	*%rax
.Ltmp1929:                              # Block address taken
.LBB624_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB624_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB624_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB624_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB624_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB624_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB624_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB624_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB624_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB624_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB624_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB624_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB624_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB624_11
.LBB624_10:
	testl	%eax, %eax
	je	.LBB624_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB624_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB624_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB624_13:
	testb	%al, %al
	je	.LBB624_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB624_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB624_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB624_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB624_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB624_29
.LBB624_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB624_15
.LBB624_28:
	testl	%eax, %eax
	je	.LBB624_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB624_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB624_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB624_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB624_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB624_17
.LBB624_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167181040, %ecx        # imm = 0x9F6FAF0
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167181800, %ecx        # imm = 0x9F6FDE8
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_7391957f_114(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167181800, %ecx        # imm = 0x9F6FDE8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_7391957f_114(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167181800, %ecx        # imm = 0x9F6FDE8
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7391957f_114(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167181800, %ecx        # imm = 0x9F6FDE8
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_7391957f_114(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_7391957f_115(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167181040, %ecx        # imm = 0x9F6FAF0
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167181800, %ecx        # imm = 0x9F6FDE8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7391957f_114(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167181800, %ecx        # imm = 0x9F6FDE8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7391957f_114(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167181800, %ecx        # imm = 0x9F6FDE8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167181800, %ecx        # imm = 0x9F6FDE8
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_7391957f_114(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_7391957f_115(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB624_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1929(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_7391957f_114;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_7391957f_114
	.align	16, 0x90
_subprog_m_7ddf9423_7391957f_114:       # @_subprog_m_7ddf9423_7391957f_114
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB625_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB625_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB625_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB625_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB625_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB625_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB625_6
.LBB625_5:
	testl	%eax, %eax
	je	.LBB625_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB625_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB625_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB625_8:
	testb	%al, %al
	je	.LBB625_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB625_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB625_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB625_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB625_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB625_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB625_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB625_160
.LBB625_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB625_10
.LBB625_159:
	testl	%eax, %eax
	je	.LBB625_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB625_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB625_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB625_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB625_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB625_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB625_148
.LBB625_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB625_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB625_13
.LBB625_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB625_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB625_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB625_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB625_148
.LBB625_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB625_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB625_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB625_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB625_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB625_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB625_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB625_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB625_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB625_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB625_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB625_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB625_23
.LBB625_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB625_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB625_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB625_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB625_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB625_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB625_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB625_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB625_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB625_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB625_182
.LBB625_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB625_27
.LBB625_181:
	testl	%eax, %eax
	je	.LBB625_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB625_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB625_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB625_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB625_29
.LBB625_28:
	testl	%eax, %eax
	je	.LBB625_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB625_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB625_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB625_31:
	testb	%al, %al
	je	.LBB625_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB625_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB625_195
.LBB625_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB625_33
.LBB625_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB625_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB625_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB625_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB625_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB625_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB625_228
.LBB625_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB625_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB625_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB625_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB625_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB625_39
.LBB625_38:
	testl	%eax, %eax
	je	.LBB625_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB625_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB625_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB625_41:
	testb	%al, %al
	je	.LBB625_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB625_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB625_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB625_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB625_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB625_209
.LBB625_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB625_43
.LBB625_208:
	testl	%eax, %eax
	je	.LBB625_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB625_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB625_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB625_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB625_45
.LBB625_44:
	testl	%eax, %eax
	je	.LBB625_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB625_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB625_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB625_47:
	testb	%al, %al
	je	.LBB625_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB625_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB625_222
.LBB625_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB625_49
.LBB625_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB625_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB625_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB625_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB625_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB625_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB625_227
.LBB625_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB625_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB625_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB625_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB625_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB625_55
.LBB625_54:
	testl	%eax, %eax
	je	.LBB625_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB625_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB625_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB625_57:
	testb	%al, %al
	je	.LBB625_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB625_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB625_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB625_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB625_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB625_240
.LBB625_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB625_59
.LBB625_239:
	testl	%eax, %eax
	je	.LBB625_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB625_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB625_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB625_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB625_61
.LBB625_60:
	testl	%eax, %eax
	je	.LBB625_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB625_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB625_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB625_63:
	testb	%al, %al
	je	.LBB625_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB625_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB625_253
.LBB625_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB625_65
.LBB625_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB625_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB625_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB625_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB625_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB625_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB625_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB625_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB625_229
.LBB625_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB625_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB625_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB625_70
.LBB625_69:
	testl	%eax, %eax
	je	.LBB625_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB625_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB625_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB625_72:
	testb	%al, %al
	je	.LBB625_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB625_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB625_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB625_265
.LBB625_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB625_74
.LBB625_264:
	testl	%eax, %eax
	je	.LBB625_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB625_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB625_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB625_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB625_76
.LBB625_75:
	testl	%eax, %eax
	je	.LBB625_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB625_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB625_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB625_78:
	testb	%al, %al
	je	.LBB625_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB625_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB625_277
.LBB625_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB625_80
.LBB625_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB625_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB625_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB625_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB625_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB625_82
.LBB625_81:
	testl	%eax, %eax
	je	.LBB625_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB625_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB625_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB625_84:
	testb	%al, %al
	je	.LBB625_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB625_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB625_288
.LBB625_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB625_86
.LBB625_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB625_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB625_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB625_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB625_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB625_88
.LBB625_87:
	testl	%eax, %eax
	je	.LBB625_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB625_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB625_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB625_90:
	testb	%al, %al
	je	.LBB625_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB625_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB625_299
.LBB625_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB625_92
.LBB625_298:
	testl	%eax, %eax
	je	.LBB625_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB625_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB625_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB625_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB625_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB625_351
.LBB625_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB625_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB625_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB625_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB625_97
.LBB625_96:
	testl	%eax, %eax
	je	.LBB625_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB625_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB625_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB625_99:
	testb	%al, %al
	je	.LBB625_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB625_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB625_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB625_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB625_311
.LBB625_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB625_101
.LBB625_310:
	testl	%eax, %eax
	je	.LBB625_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB625_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB625_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB625_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB625_103
.LBB625_102:
	testl	%eax, %eax
	je	.LBB625_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB625_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB625_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB625_105:
	testb	%al, %al
	je	.LBB625_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB625_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB625_323
.LBB625_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB625_107
.LBB625_322:
	testl	%eax, %eax
	je	.LBB625_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB625_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB625_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB625_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB625_109
.LBB625_108:
	testl	%eax, %eax
	je	.LBB625_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB625_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB625_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB625_111:
	testb	%al, %al
	je	.LBB625_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB625_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB625_334
.LBB625_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB625_113
.LBB625_333:
	testl	%eax, %eax
	je	.LBB625_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB625_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB625_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB625_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB625_115
.LBB625_114:
	testl	%eax, %eax
	je	.LBB625_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB625_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB625_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB625_117:
	testb	%al, %al
	je	.LBB625_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB625_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB625_345
.LBB625_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB625_119
.LBB625_344:
	testl	%eax, %eax
	je	.LBB625_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB625_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB625_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB625_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB625_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB625_350
.LBB625_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB625_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB625_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB625_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB625_124
.LBB625_123:
	testl	%eax, %eax
	je	.LBB625_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB625_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB625_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB625_126:
	testb	%al, %al
	je	.LBB625_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB625_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB625_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB625_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB625_359
.LBB625_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB625_128
.LBB625_358:
	testl	%eax, %eax
	je	.LBB625_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB625_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB625_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB625_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB625_130
.LBB625_129:
	testl	%eax, %eax
	je	.LBB625_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB625_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB625_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB625_132:
	testb	%al, %al
	je	.LBB625_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB625_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB625_371
.LBB625_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB625_134
.LBB625_370:
	testl	%eax, %eax
	je	.LBB625_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB625_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB625_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB625_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB625_136
.LBB625_135:
	testl	%eax, %eax
	je	.LBB625_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB625_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB625_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB625_138:
	testb	%al, %al
	je	.LBB625_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB625_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB625_382
.LBB625_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB625_140
.LBB625_381:
	testl	%eax, %eax
	je	.LBB625_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB625_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB625_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB625_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB625_142
.LBB625_141:
	testl	%eax, %eax
	je	.LBB625_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB625_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB625_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB625_144:
	testb	%al, %al
	je	.LBB625_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB625_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB625_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB625_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB625_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB625_393
.LBB625_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB625_146
.LBB625_392:
	testl	%eax, %eax
	je	.LBB625_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB625_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB625_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB625_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB625_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB625_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB625_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB625_148
.LBB625_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB625_148

	.def	 _subprog_m_7ddf9423_7391957f_115;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_7391957f_115
	.align	16, 0x90
_subprog_m_7ddf9423_7391957f_115:       # @_subprog_m_7ddf9423_7391957f_115
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB626_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB626_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB626_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB626_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB626_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB626_5
.LBB626_4:
	testl	%eax, %eax
	je	.LBB626_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB626_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB626_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB626_7:
	testb	%al, %al
	je	.LBB626_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB626_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB626_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB626_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB626_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB626_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB626_73
.LBB626_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB626_9
.LBB626_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB626_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB626_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB626_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB626_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB626_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB626_63
.LBB626_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB626_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB626_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB626_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB626_15
.LBB626_14:
	testl	%eax, %eax
	je	.LBB626_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB626_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB626_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB626_17:
	testb	%al, %al
	je	.LBB626_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB626_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB626_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB626_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB626_87
.LBB626_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB626_19
.LBB626_86:
	testl	%eax, %eax
	je	.LBB626_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB626_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB626_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB626_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB626_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB626_21
.LBB626_20:
	testl	%eax, %eax
	je	.LBB626_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB626_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB626_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB626_23:
	testb	%al, %al
	je	.LBB626_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB626_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB626_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB626_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB626_98
.LBB626_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB626_25
.LBB626_97:
	testl	%eax, %eax
	je	.LBB626_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB626_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB626_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB626_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB626_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB626_103
.LBB626_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB626_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB626_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB626_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB626_30
.LBB626_29:
	testl	%eax, %eax
	je	.LBB626_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB626_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB626_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB626_32:
	testb	%al, %al
	je	.LBB626_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB626_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB626_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB626_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB626_114
.LBB626_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB626_34
.LBB626_113:
	testl	%eax, %eax
	je	.LBB626_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB626_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB626_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB626_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB626_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB626_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB626_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB626_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB626_39
.LBB626_38:
	testl	%eax, %eax
	je	.LBB626_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB626_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB626_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB626_41:
	testb	%al, %al
	je	.LBB626_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB626_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB626_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB626_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB626_126
.LBB626_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB626_43
.LBB626_125:
	testl	%eax, %eax
	je	.LBB626_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB626_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB626_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB626_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB626_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB626_104
.LBB626_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB626_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB626_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB626_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB626_48
.LBB626_47:
	testl	%eax, %eax
	je	.LBB626_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB626_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB626_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB626_50:
	testb	%al, %al
	je	.LBB626_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB626_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB626_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB626_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB626_139
.LBB626_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB626_52
.LBB626_138:
	testl	%eax, %eax
	je	.LBB626_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB626_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB626_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB626_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB626_53
.LBB626_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB626_103:
	xorl	%r8d, %r8d
.LBB626_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB626_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB626_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB626_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB626_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB626_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB626_57
.LBB626_56:
	testl	%eax, %eax
	je	.LBB626_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB626_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB626_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB626_59:
	testb	%al, %al
	je	.LBB626_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB626_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB626_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB626_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB626_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB626_152
.LBB626_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB626_61
.LBB626_151:
	testl	%eax, %eax
	je	.LBB626_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB626_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB626_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB626_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB626_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB626_104
.LBB626_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB626_63

	.def	 _execute_783;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_783
	.align	16, 0x90
_execute_783:                           # @_execute_783
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$99, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng114(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259154;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259154
	.align	16, 0x90
_execute_259154:                        # @_execute_259154
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	832(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3024(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	376(%rsi), %rcx
	addq	$3000, %rsi             # imm = 0xBB8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259155;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259155
	.align	16, 0x90
_execute_259155:                        # @_execute_259155
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	movq	888(%rsi), %rdx
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3192(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	432(%rsi), %rcx
	addq	$3168, %rsi             # imm = 0xC60
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259156;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259156
	.align	16, 0x90
_execute_259156:                        # @_execute_259156
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	40(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3360(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	936(%rsi), %rcx
	addq	$3336, %rsi             # imm = 0xD08
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259157;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259157
	.align	16, 0x90
_execute_259157:                        # @_execute_259157
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	96(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3528(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	992(%rsi), %rcx
	addq	$3504, %rsi             # imm = 0xDB0
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259158;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259158
	.align	16, 0x90
_execute_259158:                        # @_execute_259158
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	152(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3696(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1048(%rsi), %rcx
	addq	$3672, %rsi             # imm = 0xE58
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259159;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259159
	.align	16, 0x90
_execute_259159:                        # @_execute_259159
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	208(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	3864(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1104(%rsi), %rcx
	addq	$3840, %rsi             # imm = 0xF00
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259160;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259160
	.align	16, 0x90
_execute_259160:                        # @_execute_259160
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	264(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4032(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1160(%rsi), %rcx
	addq	$4008, %rsi             # imm = 0xFA8
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_259161;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_259161
	.align	16, 0x90
_execute_259161:                        # @_execute_259161
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$48, %rsp
	movq	%rdx, %rsi
	leaq	320(%rsi), %rcx
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-24(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_bufGate(%rip)
	leaq	4200(%rsi), %rcx
	movl	$8, %r8d
	movq	%rdi, %rdx
	callq	*__imp__iki_std_memcpy(%rip)
	leaq	1216(%rsi), %rcx
	addq	$4176, %rsi             # imm = 0x1050
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_signal_fast_no_reg_no_agg(%rip)
	addq	$48, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret

	.def	 _execute_790;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_790
	.align	16, 0x90
_execute_790:                           # @_execute_790
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$152, %rsp
	movq	%rdx, %rsi
	movl	$100, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	leaq	-64(%rbp), %rbx
	movq	%rbx, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r14
	leaq	-48(%rbp), %rdi
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	544(%rsi), %rcx
	leaq	1408(%rsi), %rdx
	movl	$31, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*%r15
	movq	496(%rsi), %r9
	movl	$1, -64(%rbp)
	movl	$63, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	%rbx, 80(%rsp)
	leaq	ng26(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng25(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$32, %r8d
	movq	%rdi, %rcx
	callq	*%r14
	leaq	600(%rsi), %rcx
	addq	$1440, %rsi             # imm = 0x5A0
	movl	$31, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	movq	%rdi, %r8
	callq	*%r15
	addq	$152, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _execute_791;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_791
	.align	16, 0x90
_execute_791:                           # @_execute_791
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	pushq	%rdi
	subq	$80, %rsp
	movq	%rdx, %rsi
	.align	16, 0x90
.LBB637_1:                              # =>This Inner Loop Header: Depth=1
	movl	$101, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1512(%rsi), %rax
	testq	%rax, %rax
	je	.LBB637_29
# BB#2:                                 #   in Loop: Header=BB637_1 Depth=1
	jmpq	*%rax
.Ltmp1969:                              # Block address taken
.LBB637_3:
	movb	$0, 1592(%rsi)
	movq	664(%rsi), %r8
	leaq	824(%rsi), %rcx
	leaq	1600(%rsi), %rdx
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB637_5
# BB#4:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB637_5
# BB#30:
	movl	$1, -20(%rbp)
.LBB637_5:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB637_6
# BB#31:
	movq	720(%rsi), %r8
	jmp	.LBB637_32
.LBB637_6:
	movq	1224(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB637_8
# BB#7:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB637_8
# BB#33:
	movl	$1, -20(%rbp)
.LBB637_8:
	movl	-20(%rbp), %eax
	notl	%eax
	testl	-24(%rbp), %eax
	je	.LBB637_9
# BB#34:
	movq	664(%rsi), %r8
.LBB637_32:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
.LBB637_28:
	xorl	%r9d, %r9d
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB637_29:
	movb	$1, 1592(%rsi)
	leaq	.Ltmp1969(%rip), %rax
	movq	%rax, 1512(%rsi)
	addq	$80, %rsp
	popq	%rdi
	popq	%rsi
	popq	%rbp
	ret
.LBB637_9:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB637_11
# BB#10:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB637_11
# BB#35:
	movl	$1, -20(%rbp)
.LBB637_11:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB637_12
# BB#36:
	movl	$1, -32(%rbp)
	jmp	.LBB637_13
.LBB637_12:
	testl	%eax, %eax
	je	.LBB637_13
# BB#37:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB637_13:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB637_15
# BB#14:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB637_15:
	testb	%al, %al
	je	.LBB637_16
# BB#38:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB637_40
# BB#39:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB637_40
# BB#44:
	movl	$1, -36(%rbp)
.LBB637_40:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB637_41
# BB#45:
	movl	$1, -48(%rbp)
	jmp	.LBB637_42
.LBB637_16:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB637_17
.LBB637_41:
	testl	%eax, %eax
	je	.LBB637_42
# BB#46:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB637_42:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB637_17
# BB#43:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB637_17:
	movl	-52(%rbp), %eax
	notl	%eax
	testl	-56(%rbp), %eax
	je	.LBB637_18
# BB#47:
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	leaq	ng7(%rip), %r8
	jmp	.LBB637_28
.LBB637_18:
	movq	720(%rsi), %rdi
	leaq	-24(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB637_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -24(%rbp)
	je	.LBB637_20
# BB#48:
	movl	$1, -20(%rbp)
.LBB637_20:
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-24(%rbp), %ecx
	testb	$1, %cl
	je	.LBB637_21
# BB#49:
	movl	$1, -32(%rbp)
	jmp	.LBB637_22
.LBB637_21:
	testl	%eax, %eax
	je	.LBB637_22
# BB#50:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -32(%rbp)
.LBB637_22:
	cmpl	$0, -32(%rbp)
	movb	$1, %al
	jne	.LBB637_24
# BB#23:
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB637_24:
	testb	%al, %al
	je	.LBB637_25
# BB#51:
	movq	664(%rsi), %rdi
	leaq	-40(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB637_53
# BB#52:
	testl	%edi, %edi
	movl	$1, -40(%rbp)
	je	.LBB637_53
# BB#57:
	movl	$1, -36(%rbp)
.LBB637_53:
	leaq	-48(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-40(%rbp), %ecx
	testb	$1, %cl
	je	.LBB637_54
# BB#58:
	movl	$1, -48(%rbp)
	jmp	.LBB637_55
.LBB637_25:
	leaq	-56(%rbp), %rcx
	leaq	-32(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -56(%rbp)
	andl	$1, -52(%rbp)
	jmp	.LBB637_26
.LBB637_54:
	testl	%eax, %eax
	je	.LBB637_55
# BB#59:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -48(%rbp)
.LBB637_55:
	movl	-32(%rbp), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	orl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	je	.LBB637_26
# BB#56:
	orl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-52(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -52(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-56(%rbp), %ecx
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -56(%rbp)
.LBB637_26:
	movl	-52(%rbp), %eax
	notl	%eax
	leaq	880(%rsi), %rcx
	leaq	1760(%rsi), %rdx
	testl	-56(%rbp), %eax
	je	.LBB637_27
# BB#60:
	leaq	ng8(%rip), %r8
	jmp	.LBB637_28
.LBB637_27:
	leaq	ng28(%rip), %r8
	jmp	.LBB637_28

	.def	 _execute_792;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_792
	.align	16, 0x90
_execute_792:                           # @_execute_792
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$440, %rsp              # imm = 0x1B8
	movq	%rdx, %rsi
	leaq	1792(%rsi), %r15
	.align	16, 0x90
.LBB638_1:                              # =>This Inner Loop Header: Depth=1
	movl	$102, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	movq	1832(%rsi), %rax
	testq	%rax, %rax
	je	.LBB638_17
# BB#2:                                 #   in Loop: Header=BB638_1 Depth=1
	jmpq	*%rax
.Ltmp1973:                              # Block address taken
.LBB638_3:
	movq	%r15, -264(%rbp)        # 8-byte Spill
	movb	$0, 1912(%rsi)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movl	(%rax), %edx
	xorl	(%rcx), %edx
	movl	%edx, -64(%rbp)
	movl	4(%rax), %eax
	orl	4(%rcx), %eax
	movl	%eax, -60(%rbp)
	je	.LBB638_4
# BB#18:
	orl	%eax, -64(%rbp)
.LBB638_4:
	movq	1056(%rsi), %rcx
	movl	-64(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -68(%rbp)
	je	.LBB638_5
# BB#19:
	orl	%eax, -72(%rbp)
.LBB638_5:
	movq	1112(%rsi), %rcx
	movl	-72(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -76(%rbp)
	je	.LBB638_6
# BB#20:
	orl	%eax, -80(%rbp)
.LBB638_6:
	movq	1168(%rsi), %rcx
	movl	-80(%rbp), %eax
	xorl	(%rcx), %eax
	movl	%eax, -88(%rbp)
	movl	-76(%rbp), %eax
	orl	4(%rcx), %eax
	movl	%eax, -84(%rbp)
	je	.LBB638_7
# BB#21:
	orl	%eax, -88(%rbp)
.LBB638_7:
	leaq	768(%rsi), %r14
	leaq	1920(%rsi), %rdx
	leaq	-88(%rbp), %r8
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movq	776(%rsi), %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB638_9
# BB#8:
	testl	%ebx, %ebx
	movl	$1, -64(%rbp)
	je	.LBB638_9
# BB#22:
	movl	$1, -60(%rbp)
.LBB638_9:
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-64(%rbp), %ecx
	testb	$1, %cl
	je	.LBB638_10
# BB#23:
	movl	$1, -72(%rbp)
	jmp	.LBB638_11
.LBB638_10:
	testl	%eax, %eax
	je	.LBB638_11
# BB#24:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB638_11:
	cmpl	$0, -72(%rbp)
	movb	$1, %al
	je	.LBB638_13
# BB#12:
	cmpl	$0, -68(%rbp)
	setne	%al
.LBB638_13:
	testb	%al, %al
	je	.LBB638_14
# BB#25:
	movq	8(%r14), %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB638_27
# BB#26:
	testl	%ebx, %ebx
	movl	$1, -80(%rbp)
	je	.LBB638_27
# BB#31:
	movl	$1, -76(%rbp)
.LBB638_27:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB638_28
# BB#32:
	movl	$1, -88(%rbp)
	jmp	.LBB638_29
.LBB638_14:
	leaq	-96(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -96(%rbp)
	andl	$1, -92(%rbp)
	jmp	.LBB638_15
.LBB638_28:
	testl	%eax, %eax
	je	.LBB638_29
# BB#33:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB638_29:
	movl	-72(%rbp), %eax
	orl	-88(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	orl	-84(%rbp), %eax
	movl	%eax, -92(%rbp)
	je	.LBB638_15
# BB#30:
	orl	%eax, -96(%rbp)
	movl	-68(%rbp), %eax
	notl	%eax
	andl	-72(%rbp), %eax
	notl	%eax
	andl	-92(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB638_15:
	movl	-92(%rbp), %eax
	notl	%eax
	testl	-96(%rbp), %eax
	je	.LBB638_16
# BB#34:
	movq	552(%rsi), %r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r12
	leaq	-112(%rbp), %rbx
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	movq	%rbx, %rcx
	callq	*%r12
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r13
	leaq	-104(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r15, %r9
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	movq	__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip), %r15
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	movq	608(%rsi), %r14
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	1112(%rsi), %rbx
	movq	1168(%rsi), %rdi
	movq	%rax, 96(%rsp)
	movq	%rcx, 80(%rsp)
	movq	%rdx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 104(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$5, %edx
	movl	$5, %r8d
	movl	$5, %r9d
	leaq	-72(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*%r12
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$5, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$31, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r13
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rax, %r8
	callq	*%r15
	jmp	.LBB638_17
.LBB638_16:
	leaq	5144(%rsi), %rdx
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	__imp__iki_initialize_function_call(%rip), %rdi
	movl	$167181192, %ecx        # imm = 0x9F6FB88
	movl	$152, %r8d
	callq	*%rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	leaq	4704(%rsi), %rdx
	movq	%rdx, -280(%rbp)        # 8-byte Spill
	movl	$167181648, %ecx        # imm = 0x9F6FD50
	movl	$152, %r8d
	callq	*%rdi
	movq	%rdi, %r15
	movq	%rax, -272(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-72(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-80(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	leaq	4592(%rsi), %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	leaq	2656(%rsi), %rdx
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movl	$7, 32(%rsp)
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r12
	xorl	%r9d, %r9d
	movq	%rcx, %r14
	movq	%rdx, %r13
	movq	%rdi, %r8
	callq	*%r12
	leaq	4648(%rsi), %rcx
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	leaq	2688(%rsi), %rdx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*%r12
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_6292fdcb_116(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	leaq	4536(%rsi), %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %r12
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rcx
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%r12, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167181648, %ecx        # imm = 0x9F6FD50
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%r15
	movq	%rax, %r15
	movq	552(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-96(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-104(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r14, %rcx
	movq	%r13, %rdx
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %r14
	movq	%r14, %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r15, %rdx
	leaq	_subprog_m_7ddf9423_6292fdcb_116(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %r15        # 8-byte Reload
	movq	%r15, %rcx
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r13
	callq	*%r13
	movq	%rax, %rbx
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167181648, %ecx        # imm = 0x9F6FD50
	movl	$152, %r8d
	movq	-280(%rbp), %r14        # 8-byte Reload
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	552(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	-312(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_6292fdcb_116(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-192(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r13
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r15
	callq	*%r15
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167181648, %ecx        # imm = 0x9F6FD50
	movl	$152, %r8d
	movq	%r14, %rdx
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %r14
	movq	552(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-200(%rbp), %rcx
	movl	$1, %edx
	movl	$8, %r8d
	movq	%rcx, %rbx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-232(%rbp), %rcx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rcx, %rdi
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	%r12, %rdx
	movq	%rdi, %r8
	callq	*%rbx
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%r14, %rdx
	leaq	_subprog_m_7ddf9423_6292fdcb_116(%rip), %rax
	movq	%rax, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %r12
	callq	*%r12
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	leaq	-240(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*%r13
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*%r15
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r13
	callq	*%r13
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-64(%rbp), %rcx
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	movq	%rcx, %rdi
	movq	__imp__iki_vlog_concat(%rip), %rbx
	callq	*%rbx
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-248(%rbp), %rcx
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	movq	%rcx, %r15
	callq	*%rbx
	leaq	5032(%rsi), %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	leaq	2400(%rsi), %rdx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	leaq	5088(%rsi), %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	leaq	2432(%rsi), %rdx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r15, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	leaq	_subprog_m_7ddf9423_6292fdcb_117(%rip), %r8
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, %r9
	callq	*%r12
	leaq	4976(%rsi), %rcx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movl	$1, %edx
	callq	*%r14
	movq	%rax, %rbx
	leaq	-256(%rbp), %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r13
	leaq	656(%rsi), %rcx
	leaq	2016(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	movl	$167181192, %ecx        # imm = 0x9F6FB88
	movl	$152, %r8d
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	__imp__iki_initialize_function_call(%rip), %rbx
	movq	%rbx, %rdi
	callq	*%rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movl	$167181648, %ecx        # imm = 0x9F6FD50
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*%rdi
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -128(%rbp)
	movl	$31, -124(%rbp)
	movl	$0, -120(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng24(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng29(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-72(%rbp), %r14
	movq	%r14, %rcx
	movq	__imp__iki_vlog_get_part_select_value(%rip), %r15
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-80(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-296(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_6292fdcb_116(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-88(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*__imp__iki_vlog_delete_function_invocation(%rip)
	movl	$167181648, %ecx        # imm = 0x9F6FD50
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -144(%rbp)
	movl	$31, -140(%rbp)
	movl	$0, -136(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng32(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng31(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-96(%rbp), %r14
	movq	%r14, %rcx
	callq	*%r15
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-104(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%r14, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %r12        # 8-byte Reload
	movq	%r12, %rcx
	movq	-312(%rbp), %r13        # 8-byte Reload
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_6292fdcb_116(%rip), %r14
	movq	%r14, %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-112(%rbp), %r15
	movq	%r15, %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r15
	callq	*%r15
	movl	$167181648, %ecx        # imm = 0x9F6FD50
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movq	608(%rsi), %r9
	movl	$1, -176(%rbp)
	movl	$31, -172(%rbp)
	movl	$0, -168(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng34(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng33(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-152(%rbp), %rdi
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-184(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rdi, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rdi
	callq	*%rdi
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	%r12, %rcx
	movq	%r13, %rdx
	movq	%rbx, %r8
	callq	*%rdi
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%r14, %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	callq	*%rdi
	movq	%rax, %rbx
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-192(%rbp), %r13
	movq	%r13, %rdi
	movq	%rdi, %rcx
	movq	__imp__iki_std_memset(%rip), %r14
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rdi, %rcx
	movq	%rbx, %r8
	movq	__imp__iki_vlog_bit_copy(%rip), %r13
	callq	*%r13
	movq	1872(%rsi), %rcx
	callq	*%r15
	movl	$167181648, %ecx        # imm = 0x9F6FD50
	movl	$152, %r8d
	movq	-280(%rbp), %rdx        # 8-byte Reload
	callq	*__imp__iki_initialize_function_call(%rip)
	movq	%rax, %rdi
	movq	608(%rsi), %r9
	movl	$1, -224(%rbp)
	movl	$31, -220(%rbp)
	movl	$0, -216(%rbp)
	leaq	-224(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	ng35(%rip), %rax
	movq	%rax, 56(%rsp)
	leaq	ng23(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	movl	$1, %edx
	movl	$8, %r8d
	leaq	-200(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	944(%rsi), %rax
	movq	1000(%rsi), %rcx
	movq	1056(%rsi), %rdx
	movq	%rax, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rdx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	leaq	-232(%rbp), %r15
	movq	%r15, %rcx
	movq	__imp__iki_vlog_concat(%rip), %r12
	callq	*%r12
	movl	$7, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-288(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	movq	__imp__iki_vlog_schedule_transaction_blocking_var(%rip), %rbx
	callq	*%rbx
	movl	$2, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %rdx        # 8-byte Reload
	movq	%r15, %r8
	callq	*%rbx
	movq	%rbx, %r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	%rdi, %rdx
	leaq	_subprog_m_7ddf9423_6292fdcb_116(%rip), %r8
	movq	%rsi, %r9
	movq	__imp__iki_vlog_invoke_function(%rip), %rax
	callq	*%rax
	movl	$1, %edx
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	__imp__iki_vlog_signal_handle_value(%rip), %rdi
	movq	%rdi, %rax
	callq	*%rax
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-240(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%r14
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*%r13
	movq	1872(%rsi), %rcx
	movq	__imp__iki_vlog_delete_function_invocation(%rip), %r14
	callq	*%r14
	leaq	-88(%rbp), %rax
	movq	%rax, 80(%rsp)
	leaq	-112(%rbp), %rax
	movq	%rax, 64(%rsp)
	leaq	-192(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	%rbx, 32(%rsp)
	movl	$1, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$4, %edx
	movl	$4, %r8d
	movl	$4, %r9d
	leaq	-64(%rbp), %r13
	movq	%r13, %rcx
	movq	%r12, %rdi
	callq	*%rdi
	movq	1112(%rsi), %rax
	movq	1168(%rsi), %rcx
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movl	$2, %edx
	movl	$2, %r8d
	movl	$2, %r9d
	leaq	-248(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*%rdi
	movl	$3, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%r13, %r8
	callq	*%r15
	movl	$1, 32(%rsp)
	xorl	%r9d, %r9d
	movq	-352(%rbp), %rcx        # 8-byte Reload
	movq	-360(%rbp), %rdx        # 8-byte Reload
	movq	%rbx, %r8
	callq	*%r15
	movl	$0, 32(%rsp)
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	leaq	_subprog_m_7ddf9423_6292fdcb_117(%rip), %r8
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_invoke_function(%rip)
	movl	$1, %edx
	movq	-328(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value(%rip)
	movq	%rax, %rdi
	xorl	%edx, %edx
	movl	$8, %r8d
	leaq	-256(%rbp), %rbx
	movq	%rbx, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	$1, 32(%rsp)
	xorl	%edx, %edx
	xorl	%r9d, %r9d
	movq	%rbx, %rcx
	movq	%rdi, %r8
	callq	*__imp__iki_vlog_bit_copy(%rip)
	movq	1872(%rsi), %rcx
	callq	*%r14
	leaq	712(%rsi), %rcx
	leaq	2368(%rsi), %rdx
	xorl	%r9d, %r9d
	movq	%rbx, %r8
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
.LBB638_17:
	movb	$1, 1912(%rsi)
	leaq	.Ltmp1973(%rip), %rax
	movq	%rax, 1832(%rsi)
	addq	$440, %rsp              # imm = 0x1B8
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret

	.def	 _subprog_m_7ddf9423_6292fdcb_116;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_6292fdcb_116
	.align	16, 0x90
_subprog_m_7ddf9423_6292fdcb_116:       # @_subprog_m_7ddf9423_6292fdcb_116
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$520, %rsp              # imm = 0x208
	movq	%rdx, %r12
	leaq	4648(%r12), %r15
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rdi
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rbx), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movl	4(%rbx), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -76(%rbp)
	je	.LBB639_1
# BB#149:
	orl	%ecx, -80(%rbp)
.LBB639_1:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rbx
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %ecx
	movl	4(%rbx), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_3
# BB#2:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB639_3
# BB#150:
	movl	$1, -92(%rbp)
.LBB639_3:
	movl	-80(%rbp), %eax
	xorl	-96(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-76(%rbp), %eax
	orl	-92(%rbp), %eax
	movl	%eax, -100(%rbp)
	je	.LBB639_4
# BB#151:
	orl	%eax, -104(%rbp)
.LBB639_4:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_5
# BB#152:
	movl	$1, -112(%rbp)
	jmp	.LBB639_6
.LBB639_5:
	testl	%eax, %eax
	je	.LBB639_6
# BB#153:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB639_6:
	cmpl	$0, -112(%rbp)
	movb	$1, %al
	je	.LBB639_8
# BB#7:
	cmpl	$0, -108(%rbp)
	setne	%al
.LBB639_8:
	testb	%al, %al
	je	.LBB639_9
# BB#154:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-120(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*%r13
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movl	(%rsi), %ecx
	xorl	(%rax), %ecx
	movl	%ecx, -136(%rbp)
	movl	4(%rsi), %ecx
	orl	4(%rax), %ecx
	movl	%ecx, -132(%rbp)
	je	.LBB639_155
# BB#162:
	orl	%ecx, -136(%rbp)
.LBB639_155:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_157
# BB#156:
	testl	%ebx, %ebx
	movl	$1, -152(%rbp)
	je	.LBB639_157
# BB#163:
	movl	$1, -148(%rbp)
.LBB639_157:
	movl	-136(%rbp), %eax
	xorl	-152(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-132(%rbp), %eax
	orl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	je	.LBB639_158
# BB#164:
	orl	%eax, -160(%rbp)
.LBB639_158:
	movq	%r13, %r14
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_159
# BB#165:
	movl	$1, -168(%rbp)
	jmp	.LBB639_160
.LBB639_9:
	movq	%r13, %r14
	leaq	-176(%rbp), %rcx
	leaq	-112(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB639_10
.LBB639_159:
	testl	%eax, %eax
	je	.LBB639_160
# BB#166:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB639_160:
	movl	-112(%rbp), %eax
	orl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB639_10
# BB#161:
	orl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	notl	%eax
	andl	-112(%rbp), %eax
	notl	%eax
	andl	-172(%rbp), %eax
	movl	-164(%rbp), %ecx
	notl	%ecx
	andl	-168(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -172(%rbp)
.LBB639_10:
	movl	-176(%rbp), %esi
	movl	-172(%rbp), %edi
	notl	%edi
	leaq	4592(%r12), %rbx
	movl	$8, %edx
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %r13
	testl	%edi, %esi
	je	.LBB639_11
# BB#167:
	movl	$3, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
.LBB639_229:
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4536(%r12), %rcx
	addq	$4504, %r12             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB639_148
.LBB639_11:
	movq	%r15, %rsi
	movq	%rbx, %r15
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%r13), %eax
	movl	%eax, %ecx
	notl	%ecx
	andb	(%r13), %cl
	je	.LBB639_12
# BB#168:
	movl	$1, -72(%rbp)
	movq	%r14, %rdi
	jmp	.LBB639_13
.LBB639_12:
	testl	%eax, %eax
	movq	%r14, %rdi
	je	.LBB639_13
# BB#169:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -72(%rbp)
.LBB639_13:
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	notl	%ecx
	orl	%eax, %ecx
	andl	$1, %ecx
	movl	%ecx, -64(%rbp)
	movl	-60(%rbp), %eax
	notl	%eax
	testl	%eax, %ecx
	je	.LBB639_14
# BB#170:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng7(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB639_148
.LBB639_14:
	movl	$8, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	leaq	-64(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	4(%rbx), %eax
	movl	(%rbx), %ecx
	orl	%eax, %ecx
	cmpl	$255, %ecx
	jne	.LBB639_17
# BB#15:
	testl	%eax, %eax
	movl	$1, -64(%rbp)
	je	.LBB639_17
# BB#16:
	movl	$1, -60(%rbp)
.LBB639_17:
	movl	-60(%rbp), %eax
	notl	%eax
	testl	-64(%rbp), %eax
	je	.LBB639_18
# BB#172:
	movq	%r12, %rdx
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng8(%rip), %r8
	xorl	%r9d, %r9d
.LBB639_148:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$520, %rsp              # imm = 0x208
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB639_18:
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	callq	*%r14
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r13
	callq	*%rdi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng8(%rip), %ecx
	movl	ng8+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_20
# BB#19:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB639_20
# BB#173:
	movl	$1, -76(%rbp)
.LBB639_20:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB639_21
# BB#174:
	orl	%eax, -88(%rbp)
.LBB639_21:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	movq	%r15, %r14
	je	.LBB639_22
# BB#175:
	movl	$1, -96(%rbp)
	movq	%r13, %rcx
	jmp	.LBB639_23
.LBB639_22:
	testl	%eax, %eax
	movq	%r13, %rcx
	je	.LBB639_23
# BB#176:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB639_23:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r13
	movq	%r13, %r15
	je	.LBB639_25
# BB#24:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB639_25:
	testb	%al, %al
	movq	%rcx, %r13
	je	.LBB639_26
# BB#177:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng7(%rip), %ecx
	movl	ng7+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_179
# BB#178:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB639_179
# BB#184:
	movl	$1, -116(%rbp)
.LBB639_179:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB639_180
# BB#185:
	orl	%eax, -128(%rbp)
.LBB639_180:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_181
# BB#186:
	movl	$1, -136(%rbp)
	jmp	.LBB639_182
.LBB639_26:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB639_27
.LBB639_181:
	testl	%eax, %eax
	je	.LBB639_182
# BB#187:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB639_182:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB639_27
# BB#183:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB639_27:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_28
# BB#188:
	movl	$1, -152(%rbp)
	jmp	.LBB639_29
.LBB639_28:
	testl	%eax, %eax
	je	.LBB639_29
# BB#189:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB639_29:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB639_31
# BB#30:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB639_31:
	testb	%al, %al
	je	.LBB639_32
# BB#190:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -208(%rbp)
	movl	$2, -204(%rbp)
	movl	$0, -200(%rbp)
	leaq	-208(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-176(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movq	%rbx, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rdi, %r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%r13, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rbx, %rcx
	movq	%rbx, %r13
	callq	*%rdi
	movl	$1, -240(%rbp)
	movl	$2, -236(%rbp)
	movl	$0, -232(%rbp)
	leaq	-240(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rbx, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rbx, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-216(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-184(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-248(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_193
# BB#191:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_193
# BB#192:
	movl	$1, -248(%rbp)
.LBB639_193:
	leaq	-256(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-244(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-248(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_194
# BB#197:
	movl	$1, -256(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB639_195
.LBB639_32:
	leaq	-264(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -264(%rbp)
	andl	$1, -260(%rbp)
	jmp	.LBB639_33
.LBB639_194:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB639_195
# BB#198:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -256(%rbp)
.LBB639_195:
	movl	-152(%rbp), %eax
	andl	-256(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	-148(%rbp), %eax
	orl	-252(%rbp), %eax
	movl	%eax, -260(%rbp)
	movq	%rdi, %r15
	movq	-448(%rbp), %r12        # 8-byte Reload
	je	.LBB639_33
# BB#196:
	orl	%eax, -264(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-260(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -260(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	movl	-256(%rbp), %eax
	movl	-252(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -264(%rbp)
.LBB639_33:
	movl	-260(%rbp), %eax
	notl	%eax
	testl	-264(%rbp), %eax
	je	.LBB639_34
# BB#199:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	movl	$1, -304(%rbp)
	movl	$2, -300(%rbp)
	movl	$0, -296(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, 80(%rsp)
	leaq	ng24(%rip), %rcx
	movq	%rcx, 56(%rsp)
	leaq	ng27(%rip), %rcx
	movq	%rcx, 32(%rsp)
	movl	$1, 112(%rsp)
	movl	$2, 104(%rsp)
	movl	$1, 96(%rsp)
	movq	$0, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$32, 64(%rsp)
	movl	$1, 48(%rsp)
	movl	$32, 40(%rsp)
	leaq	-288(%rbp), %rdi
	movl	$1, %edx
	movl	$2, %r8d
	movq	%rdi, %rcx
	movq	%rax, %r9
	callq	*__imp__iki_vlog_get_part_select_value(%rip)
	movq	%rdi, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$2, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$2, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	jmp	.LBB639_228
.LBB639_34:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_36
# BB#35:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB639_36
# BB#200:
	movl	$1, -76(%rbp)
.LBB639_36:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB639_37
# BB#201:
	orl	%eax, -88(%rbp)
.LBB639_37:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_38
# BB#202:
	movl	$1, -96(%rbp)
	jmp	.LBB639_39
.LBB639_38:
	testl	%eax, %eax
	je	.LBB639_39
# BB#203:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB639_39:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB639_41
# BB#40:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB639_41:
	testb	%al, %al
	je	.LBB639_42
# BB#204:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_206
# BB#205:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB639_206
# BB#211:
	movl	$1, -116(%rbp)
.LBB639_206:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB639_207
# BB#212:
	orl	%eax, -128(%rbp)
.LBB639_207:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_208
# BB#213:
	movl	$1, -136(%rbp)
	jmp	.LBB639_209
.LBB639_42:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB639_43
.LBB639_208:
	testl	%eax, %eax
	je	.LBB639_209
# BB#214:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB639_209:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB639_43
# BB#210:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB639_43:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_44
# BB#215:
	movl	$1, -152(%rbp)
	jmp	.LBB639_45
.LBB639_44:
	testl	%eax, %eax
	je	.LBB639_45
# BB#216:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB639_45:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB639_47
# BB#46:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB639_47:
	testb	%al, %al
	je	.LBB639_48
# BB#217:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rbx, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_220
# BB#218:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_220
# BB#219:
	movl	$1, -264(%rbp)
.LBB639_220:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_221
# BB#224:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB639_222
.LBB639_48:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB639_49
.LBB639_221:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB639_222
# BB#225:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB639_222:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB639_49
# BB#223:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB639_49:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB639_50
# BB#226:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rbx, 64(%rsp)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 48(%rsp)
	jmp	.LBB639_227
.LBB639_50:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_52
# BB#51:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB639_52
# BB#231:
	movl	$1, -76(%rbp)
.LBB639_52:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB639_53
# BB#232:
	orl	%eax, -88(%rbp)
.LBB639_53:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_54
# BB#233:
	movl	$1, -96(%rbp)
	jmp	.LBB639_55
.LBB639_54:
	testl	%eax, %eax
	je	.LBB639_55
# BB#234:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB639_55:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB639_57
# BB#56:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB639_57:
	testb	%al, %al
	je	.LBB639_58
# BB#235:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-104(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-112(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rsi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_237
# BB#236:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB639_237
# BB#242:
	movl	$1, -116(%rbp)
.LBB639_237:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB639_238
# BB#243:
	orl	%eax, -128(%rbp)
.LBB639_238:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_239
# BB#244:
	movl	$1, -136(%rbp)
	jmp	.LBB639_240
.LBB639_58:
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB639_59
.LBB639_239:
	testl	%eax, %eax
	je	.LBB639_240
# BB#245:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB639_240:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB639_59
# BB#241:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB639_59:
	leaq	-152(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-140(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-144(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_60
# BB#246:
	movl	$1, -152(%rbp)
	jmp	.LBB639_61
.LBB639_60:
	testl	%eax, %eax
	je	.LBB639_61
# BB#247:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -152(%rbp)
.LBB639_61:
	cmpl	$0, -152(%rbp)
	movb	$1, %al
	jne	.LBB639_63
# BB#62:
	cmpl	$0, -148(%rbp)
	setne	%al
.LBB639_63:
	testb	%al, %al
	je	.LBB639_64
# BB#248:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-176(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rsi
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-184(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-168(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rdi
	leaq	-160(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rdi
	movq	%rdi, %r12
	movq	%r15, %rdi
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r14, %rcx
	movq	%r14, -440(%rbp)        # 8-byte Spill
	callq	*%rdi
	movq	%rax, %r14
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-248(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-256(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rsi
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-224(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-216(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r14, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-264(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_251
# BB#249:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_251
# BB#250:
	movl	$1, -264(%rbp)
.LBB639_251:
	leaq	-272(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-260(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-264(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_252
# BB#255:
	movl	$1, -272(%rbp)
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB639_253
.LBB639_64:
	leaq	-280(%rbp), %rcx
	leaq	-152(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -280(%rbp)
	andl	$1, -276(%rbp)
	jmp	.LBB639_65
.LBB639_252:
	testl	%eax, %eax
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB639_253
# BB#256:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -272(%rbp)
.LBB639_253:
	movl	-152(%rbp), %eax
	andl	-272(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-148(%rbp), %eax
	orl	-268(%rbp), %eax
	movl	%eax, -276(%rbp)
	movq	-448(%rbp), %r12        # 8-byte Reload
	movq	%rdi, %r15
	je	.LBB639_65
# BB#254:
	orl	%eax, -280(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-276(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -276(%rbp)
	movl	-152(%rbp), %eax
	movl	-148(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-280(%rbp), %ecx
	movl	-272(%rbp), %eax
	movl	-268(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -280(%rbp)
.LBB639_65:
	movl	-276(%rbp), %eax
	notl	%eax
	testl	-280(%rbp), %eax
	je	.LBB639_66
# BB#257:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-320(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, %rbx
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-328(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rbx, 48(%rsp)
.LBB639_227:
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-312(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-288(%rbp), %rcx
.LBB639_228:
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	jmp	.LBB639_229
.LBB639_66:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_68
# BB#67:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB639_68
# BB#258:
	movl	$1, -68(%rbp)
.LBB639_68:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_69
# BB#259:
	movl	$1, -80(%rbp)
	jmp	.LBB639_70
.LBB639_69:
	testl	%eax, %eax
	je	.LBB639_70
# BB#260:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB639_70:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB639_72
# BB#71:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB639_72:
	testb	%al, %al
	je	.LBB639_73
# BB#261:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_263
# BB#262:
	testl	%ebx, %ebx
	movl	$1, -96(%rbp)
	je	.LBB639_263
# BB#267:
	movl	$1, -92(%rbp)
.LBB639_263:
	movq	%r13, %rsi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_264
# BB#268:
	movl	$1, -104(%rbp)
	jmp	.LBB639_265
.LBB639_73:
	leaq	-112(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB639_74
.LBB639_264:
	testl	%eax, %eax
	je	.LBB639_265
# BB#269:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB639_265:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movq	%rsi, %r13
	je	.LBB639_74
# BB#266:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB639_74:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_75
# BB#270:
	movl	$1, -120(%rbp)
	jmp	.LBB639_76
.LBB639_75:
	testl	%eax, %eax
	je	.LBB639_76
# BB#271:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB639_76:
	movq	%r12, -448(%rbp)        # 8-byte Spill
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB639_78
# BB#77:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB639_78:
	testb	%al, %al
	je	.LBB639_79
# BB#272:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r14, %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-136(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-128(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rbx
	leaq	-168(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-176(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_275
# BB#273:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_275
# BB#274:
	movl	$1, -176(%rbp)
.LBB639_275:
	leaq	-184(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_276
# BB#279:
	movl	$1, -184(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB639_277
.LBB639_79:
	leaq	-216(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB639_80
.LBB639_276:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	%r15, %rcx
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB639_277
# BB#280:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB639_277:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	movq	%rcx, %r15
	je	.LBB639_80
# BB#278:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB639_80:
	leaq	-224(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_81
# BB#281:
	movl	$1, -224(%rbp)
	jmp	.LBB639_82
.LBB639_81:
	testl	%eax, %eax
	je	.LBB639_82
# BB#282:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB639_82:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB639_84
# BB#83:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB639_84:
	testb	%al, %al
	je	.LBB639_85
# BB#283:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-264(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %rdi
	callq	*%rdi
	movq	%rax, 64(%rsp)
	movq	%r13, %rsi
	movq	%r14, %r13
	movq	%r13, -440(%rbp)        # 8-byte Spill
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %r14
	leaq	-256(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-248(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%rbx
	movq	%rbx, %r12
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%r13, %rcx
	callq	*%rbx
	movq	%rax, %r13
	movl	$3, %edx
	movq	%rsi, %rcx
	callq	*%rbx
	leaq	-288(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%rdi
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%r14
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r13, %r9
	callq	*%r12
	movq	%rax, %rbx
	leaq	-312(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_286
# BB#284:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_286
# BB#285:
	movl	$1, -312(%rbp)
.LBB639_286:
	leaq	-320(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_287
# BB#290:
	movl	$1, -320(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	jmp	.LBB639_288
.LBB639_85:
	leaq	-328(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB639_86
.LBB639_287:
	testl	%eax, %eax
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %r15
	movq	-440(%rbp), %r14        # 8-byte Reload
	je	.LBB639_288
# BB#291:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB639_288:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	%rsi, %r13
	je	.LBB639_86
# BB#289:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB639_86:
	leaq	-336(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_87
# BB#292:
	movl	$1, -336(%rbp)
	jmp	.LBB639_88
.LBB639_87:
	testl	%eax, %eax
	je	.LBB639_88
# BB#293:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB639_88:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB639_90
# BB#89:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB639_90:
	testb	%al, %al
	je	.LBB639_91
# BB#294:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %r12
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%r13, %rdi
	movq	%rax, %r13
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	%r14, %rsi
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %r14
	leaq	-344(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%r12, %r9
	callq	*%r14
	movq	%r15, %rbx
	movq	%rax, %r15
	movl	$8, %edx
	movq	%rsi, %rcx
	movq	%rsi, %r12
	callq	*%rbx
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%rdi, %rcx
	callq	*%rbx
	leaq	-384(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, 64(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rsi, %r9
	callq	*%r14
	movq	%rax, %rbx
	leaq	-392(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%r15), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_297
# BB#295:
	movl	4(%r15), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_297
# BB#296:
	movl	$1, -392(%rbp)
.LBB639_297:
	leaq	-400(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_298
# BB#301:
	movl	$1, -400(%rbp)
	jmp	.LBB639_299
.LBB639_91:
	leaq	-408(%rbp), %rcx
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB639_92
.LBB639_298:
	testl	%eax, %eax
	je	.LBB639_299
# BB#302:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB639_299:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	movq	%r12, %r14
	movq	%rdi, %r13
	je	.LBB639_92
# BB#300:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB639_92:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB639_93
# BB#303:
	movl	$8, %edx
	movq	%r14, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-432(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, 64(%rsp)
	leaq	ng7(%rip), %rax
	movq	%rax, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	jmp	.LBB639_351
.LBB639_93:
	movq	%r14, %r12
	movq	%r13, %rcx
	movl	$3, %edx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB639_95
# BB#94:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB639_95
# BB#304:
	movl	$1, -68(%rbp)
.LBB639_95:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_96
# BB#305:
	movl	$1, -80(%rbp)
	jmp	.LBB639_97
.LBB639_96:
	testl	%eax, %eax
	je	.LBB639_97
# BB#306:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB639_97:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB639_99
# BB#98:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB639_99:
	testb	%al, %al
	je	.LBB639_100
# BB#307:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB639_309
# BB#308:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB639_309
# BB#313:
	movl	$1, -92(%rbp)
.LBB639_309:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_310
# BB#314:
	movl	$1, -104(%rbp)
	jmp	.LBB639_311
.LBB639_100:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB639_101
.LBB639_310:
	testl	%eax, %eax
	je	.LBB639_311
# BB#315:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB639_311:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB639_101
# BB#312:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB639_101:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_102
# BB#316:
	movl	$1, -120(%rbp)
	jmp	.LBB639_103
.LBB639_102:
	testl	%eax, %eax
	je	.LBB639_103
# BB#317:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB639_103:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB639_105
# BB#104:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB639_105:
	testb	%al, %al
	je	.LBB639_106
# BB#318:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_321
# BB#319:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_321
# BB#320:
	movl	$1, -176(%rbp)
.LBB639_321:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_322
# BB#325:
	movl	$1, -184(%rbp)
	jmp	.LBB639_323
.LBB639_106:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB639_107
.LBB639_322:
	testl	%eax, %eax
	je	.LBB639_323
# BB#326:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB639_323:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB639_107
# BB#324:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB639_107:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_108
# BB#327:
	movl	$1, -224(%rbp)
	jmp	.LBB639_109
.LBB639_108:
	testl	%eax, %eax
	je	.LBB639_109
# BB#328:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB639_109:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB639_111
# BB#110:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB639_111:
	testb	%al, %al
	je	.LBB639_112
# BB#329:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rdi, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	movq	%rax, 48(%rsp)
	leaq	ng8(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_332
# BB#330:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_332
# BB#331:
	movl	$1, -312(%rbp)
.LBB639_332:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_333
# BB#336:
	movl	$1, -320(%rbp)
	jmp	.LBB639_334
.LBB639_112:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB639_113
.LBB639_333:
	testl	%eax, %eax
	je	.LBB639_334
# BB#337:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB639_334:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB639_113
# BB#335:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB639_113:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_114
# BB#338:
	movl	$1, -336(%rbp)
	jmp	.LBB639_115
.LBB639_114:
	testl	%eax, %eax
	je	.LBB639_115
# BB#339:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB639_115:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB639_117
# BB#116:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB639_117:
	testb	%al, %al
	je	.LBB639_118
# BB#340:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_343
# BB#341:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_343
# BB#342:
	movl	$1, -392(%rbp)
.LBB639_343:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_344
# BB#347:
	movl	$1, -400(%rbp)
	jmp	.LBB639_345
.LBB639_118:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB639_119
.LBB639_344:
	testl	%eax, %eax
	je	.LBB639_345
# BB#348:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB639_345:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB639_119
# BB#346:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB639_119:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB639_120
# BB#349:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	%rcx, 32(%rsp)
	jmp	.LBB639_350
.LBB639_120:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-72(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB639_122
# BB#121:
	testl	%eax, %eax
	movl	$1, -72(%rbp)
	je	.LBB639_122
# BB#352:
	movl	$1, -68(%rbp)
.LBB639_122:
	leaq	-80(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_123
# BB#353:
	movl	$1, -80(%rbp)
	jmp	.LBB639_124
.LBB639_123:
	testl	%eax, %eax
	je	.LBB639_124
# BB#354:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB639_124:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	je	.LBB639_126
# BB#125:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB639_126:
	testb	%al, %al
	je	.LBB639_127
# BB#355:
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rsi
	leaq	-96(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %ecx
	movl	4(%rsi), %eax
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%eax, %ebx
	xorl	%edx, %ebx
	orl	%ecx, %ebx
	orl	%edx, %eax
	movl	%eax, %ecx
	notl	%ecx
	testl	%ecx, %ebx
	jne	.LBB639_357
# BB#356:
	testl	%eax, %eax
	movl	$1, -96(%rbp)
	je	.LBB639_357
# BB#361:
	movl	$1, -92(%rbp)
.LBB639_357:
	leaq	-104(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-96(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_358
# BB#362:
	movl	$1, -104(%rbp)
	jmp	.LBB639_359
.LBB639_127:
	leaq	-112(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -112(%rbp)
	andl	$1, -108(%rbp)
	jmp	.LBB639_128
.LBB639_358:
	testl	%eax, %eax
	je	.LBB639_359
# BB#363:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -104(%rbp)
.LBB639_359:
	movl	-80(%rbp), %eax
	orl	-104(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	orl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	je	.LBB639_128
# BB#360:
	orl	%eax, -112(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	andl	-80(%rbp), %eax
	notl	%eax
	andl	-108(%rbp), %eax
	movl	-100(%rbp), %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB639_128:
	leaq	-120(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_129
# BB#364:
	movl	$1, -120(%rbp)
	jmp	.LBB639_130
.LBB639_129:
	testl	%eax, %eax
	je	.LBB639_130
# BB#365:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB639_130:
	cmpl	$0, -120(%rbp)
	movb	$1, %al
	jne	.LBB639_132
# BB#131:
	cmpl	$0, -116(%rbp)
	setne	%al
.LBB639_132:
	testb	%al, %al
	je	.LBB639_133
# BB#366:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-144(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-136(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-128(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-168(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-160(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-176(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_369
# BB#367:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_369
# BB#368:
	movl	$1, -176(%rbp)
.LBB639_369:
	leaq	-184(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-172(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_370
# BB#373:
	movl	$1, -184(%rbp)
	jmp	.LBB639_371
.LBB639_133:
	leaq	-216(%rbp), %rax
	leaq	-120(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -216(%rbp)
	andl	$1, -212(%rbp)
	jmp	.LBB639_134
.LBB639_370:
	testl	%eax, %eax
	je	.LBB639_371
# BB#374:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -184(%rbp)
.LBB639_371:
	movl	-120(%rbp), %eax
	andl	-184(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-116(%rbp), %eax
	orl	-180(%rbp), %eax
	movl	%eax, -212(%rbp)
	je	.LBB639_134
# BB#372:
	orl	%eax, -216(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-212(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -212(%rbp)
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	movl	-184(%rbp), %eax
	movl	-180(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -216(%rbp)
.LBB639_134:
	leaq	-224(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-212(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-216(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_135
# BB#375:
	movl	$1, -224(%rbp)
	jmp	.LBB639_136
.LBB639_135:
	testl	%eax, %eax
	je	.LBB639_136
# BB#376:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -224(%rbp)
.LBB639_136:
	cmpl	$0, -224(%rbp)
	movb	$1, %al
	jne	.LBB639_138
# BB#137:
	cmpl	$0, -220(%rbp)
	setne	%al
.LBB639_138:
	testb	%al, %al
	je	.LBB639_139
# BB#377:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-264(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rdi
	movq	%rdi, 64(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rbx
	leaq	-256(%rbp), %r15
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r15, %rcx
	callq	*%rbx
	movq	%r15, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-248(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rcx
	movq	%rcx, %r15
	leaq	-288(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rdi, 64(%rsp)
	leaq	ng8(%rip), %rcx
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-280(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*%rbx
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-272(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	%rax, %rbx
	leaq	-312(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_380
# BB#378:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_380
# BB#379:
	movl	$1, -312(%rbp)
.LBB639_380:
	leaq	-320(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-312(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_381
# BB#384:
	movl	$1, -320(%rbp)
	jmp	.LBB639_382
.LBB639_139:
	leaq	-328(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -328(%rbp)
	andl	$1, -324(%rbp)
	jmp	.LBB639_140
.LBB639_381:
	testl	%eax, %eax
	je	.LBB639_382
# BB#385:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -320(%rbp)
.LBB639_382:
	movl	-224(%rbp), %eax
	andl	-320(%rbp), %eax
	movl	%eax, -328(%rbp)
	movl	-220(%rbp), %eax
	orl	-316(%rbp), %eax
	movl	%eax, -324(%rbp)
	je	.LBB639_140
# BB#383:
	orl	%eax, -328(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-324(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -324(%rbp)
	movl	-224(%rbp), %eax
	movl	-220(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	movl	-320(%rbp), %eax
	movl	-316(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -328(%rbp)
.LBB639_140:
	leaq	-336(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-324(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-328(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_141
# BB#386:
	movl	$1, -336(%rbp)
	jmp	.LBB639_142
.LBB639_141:
	testl	%eax, %eax
	je	.LBB639_142
# BB#387:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -336(%rbp)
.LBB639_142:
	cmpl	$0, -336(%rbp)
	movb	$1, %al
	jne	.LBB639_144
# BB#143:
	cmpl	$0, -332(%rbp)
	setne	%al
.LBB639_144:
	testb	%al, %al
	je	.LBB639_145
# BB#388:
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-360(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %rax
	movq	%rax, %r14
	callq	*%r14
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	movq	__imp__iki_vlog_concat(%rip), %rdi
	leaq	-352(%rbp), %rbx
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rbx, %rcx
	callq	*%rdi
	movq	%rbx, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	movq	__imp__iki_vlog_get_bit_select_value_p_input(%rip), %rbx
	leaq	-344(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	%rsi, %r9
	callq	*%rbx
	movq	%rax, %rsi
	movl	$8, %edx
	movq	%r12, %rcx
	callq	*%r15
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%r15
	leaq	-384(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r14
	leaq	ng8(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-376(%rbp), %r14
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%r14, %rcx
	callq	*%rdi
	movq	%r14, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-368(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
	movq	-456(%rbp), %r9         # 8-byte Reload
	callq	*%rbx
	movq	%rax, %rbx
	leaq	-392(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rsi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB639_391
# BB#389:
	movl	4(%rsi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB639_391
# BB#390:
	movl	$1, -392(%rbp)
.LBB639_391:
	leaq	-400(%rbp), %rax
	xorl	%edx, %edx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memset(%rip)
	movl	-388(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-392(%rbp), %ecx
	testb	$1, %cl
	je	.LBB639_392
# BB#395:
	movl	$1, -400(%rbp)
	jmp	.LBB639_393
.LBB639_145:
	leaq	-408(%rbp), %rax
	leaq	-336(%rbp), %rdx
	movl	$8, %r8d
	movq	%rax, %rcx
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -408(%rbp)
	andl	$1, -404(%rbp)
	jmp	.LBB639_146
.LBB639_392:
	testl	%eax, %eax
	je	.LBB639_393
# BB#396:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -400(%rbp)
.LBB639_393:
	movl	-336(%rbp), %eax
	andl	-400(%rbp), %eax
	movl	%eax, -408(%rbp)
	movl	-332(%rbp), %eax
	orl	-396(%rbp), %eax
	movl	%eax, -404(%rbp)
	je	.LBB639_146
# BB#394:
	orl	%eax, -408(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-404(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -404(%rbp)
	movl	-336(%rbp), %eax
	movl	-332(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-408(%rbp), %ecx
	movl	-400(%rbp), %eax
	movl	-396(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -408(%rbp)
.LBB639_146:
	movl	-404(%rbp), %eax
	notl	%eax
	testl	-408(%rbp), %eax
	je	.LBB639_147
# BB#397:
	movl	$8, %edx
	movq	%r12, %rcx
	movq	%r15, %rdi
	callq	*%rdi
	movq	%rax, %rsi
	movl	$3, %edx
	movq	%r13, %rcx
	callq	*%rdi
	leaq	-432(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	leaq	ng7(%rip), %rcx
	movq	%rcx, 64(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 32(%rsp)
.LBB639_350:
	movl	$1, 72(%rsp)
	movl	$1, 56(%rsp)
	movl	$1, 40(%rsp)
	leaq	-424(%rbp), %rdi
	movl	$3, %edx
	movl	$3, %r8d
	movl	$3, %r9d
	movq	%rdi, %rcx
	callq	*__imp__iki_vlog_concat(%rip)
	movq	%rdi, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$3, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$7, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-416(%rbp), %rax
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rax, %rcx
.LBB639_351:
	movq	%rsi, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rcx
	addq	$4504, %rdx             # imm = 0x1198
	xorl	%r9d, %r9d
	movq	%rax, %r8
	jmp	.LBB639_148
.LBB639_147:
	movq	-448(%rbp), %rdx        # 8-byte Reload
	leaq	4536(%rdx), %rax
	addq	$4504, %rdx             # imm = 0x1198
	leaq	ng28(%rip), %rbx
	xorl	%r9d, %r9d
	movq	%rax, %rcx
	movq	%rbx, %r8
	jmp	.LBB639_148

	.def	 _subprog_m_7ddf9423_6292fdcb_117;
	.scl	2;
	.type	32;
	.endef
	.globl	_subprog_m_7ddf9423_6292fdcb_117
	.align	16, 0x90
_subprog_m_7ddf9423_6292fdcb_117:       # @_subprog_m_7ddf9423_6292fdcb_117
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$248, %rsp
	leaq	5088(%rdx), %r15
	movq	%rdx, %r12
	movq	__imp__iki_vlog_signal_handle_value_input(%rip), %rsi
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	movq	__imp__iki_vlog_get_bit_select_value_simple(%rip), %r14
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-72(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB640_2
# BB#1:
	testl	%edi, %edi
	movl	$1, -80(%rbp)
	je	.LBB640_2
# BB#64:
	movl	$1, -76(%rbp)
.LBB640_2:
	movl	(%rbx), %eax
	xorl	-80(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	4(%rbx), %eax
	orl	-76(%rbp), %eax
	movl	%eax, -84(%rbp)
	je	.LBB640_3
# BB#65:
	orl	%eax, -88(%rbp)
.LBB640_3:
	leaq	-96(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-88(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_4
# BB#66:
	movl	$1, -96(%rbp)
	jmp	.LBB640_5
.LBB640_4:
	testl	%eax, %eax
	je	.LBB640_5
# BB#67:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -96(%rbp)
.LBB640_5:
	cmpl	$0, -96(%rbp)
	movb	$1, %al
	je	.LBB640_7
# BB#6:
	cmpl	$0, -92(%rbp)
	setne	%al
.LBB640_7:
	testb	%al, %al
	je	.LBB640_8
# BB#68:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*%rsi
	leaq	-112(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%rax, %rdi
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %edi
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%edi, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %edi
	movl	%edi, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB640_70
# BB#69:
	testl	%edi, %edi
	movl	$1, -120(%rbp)
	je	.LBB640_70
# BB#75:
	movl	$1, -116(%rbp)
.LBB640_70:
	movl	(%rbx), %eax
	xorl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	4(%rbx), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB640_71
# BB#76:
	orl	%eax, -128(%rbp)
.LBB640_71:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_72
# BB#77:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	movl	$1, -136(%rbp)
	jmp	.LBB640_73
.LBB640_8:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	leaq	-144(%rbp), %rcx
	leaq	-96(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -144(%rbp)
	andl	$1, -140(%rbp)
	jmp	.LBB640_9
.LBB640_72:
	movq	%r15, -192(%rbp)        # 8-byte Spill
	testl	%eax, %eax
	je	.LBB640_73
# BB#78:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB640_73:
	movl	-96(%rbp), %eax
	orl	-136(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	orl	-132(%rbp), %eax
	movl	%eax, -140(%rbp)
	je	.LBB640_9
# BB#74:
	orl	%eax, -144(%rbp)
	movl	-92(%rbp), %eax
	notl	%eax
	andl	-96(%rbp), %eax
	notl	%eax
	andl	-140(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%ecx
	andl	-136(%rbp), %ecx
	notl	%ecx
	andl	%eax, %ecx
	movl	%ecx, -140(%rbp)
.LBB640_9:
	movl	-144(%rbp), %edi
	movl	-140(%rbp), %r13d
	notl	%r13d
	leaq	5032(%r12), %r15
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, %rbx
	testl	%r13d, %edi
	je	.LBB640_10
# BB#79:
	movl	$2, %edx
	movq	-192(%rbp), %rcx        # 8-byte Reload
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	movq	%rax, 80(%rsp)
	movl	$2, 96(%rsp)
	movl	$2, 88(%rsp)
	movl	$1, 72(%rsp)
	movl	$2, 64(%rsp)
	movl	$1, 56(%rsp)
	movl	$0, 48(%rsp)
	movl	$3, 40(%rsp)
	movl	$1, 32(%rsp)
	leaq	-152(%rbp), %rcx
	movl	$1, %edx
	movl	$1, %r8d
	movq	%rbx, %r9
	callq	*__imp__iki_vlog_get_bit_select_value_p_input(%rip)
	leaq	4976(%r12), %rcx
	addq	$4944, %r12             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%r12, %rdx
	movq	%rax, %r8
	jmp	.LBB640_63
.LBB640_10:
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rbx, %rdx
	callq	*%r14
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-72(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r14
	movq	%r14, %r13
	movq	%rax, %rdi
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB640_13
# BB#11:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB640_13
# BB#12:
	movl	$1, -80(%rbp)
.LBB640_13:
	leaq	-88(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-76(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-80(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_14
# BB#80:
	movl	$1, -88(%rbp)
	jmp	.LBB640_15
.LBB640_14:
	testl	%eax, %eax
	je	.LBB640_15
# BB#81:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -88(%rbp)
.LBB640_15:
	cmpl	$0, -88(%rbp)
	movb	$1, %al
	movq	%r15, %r14
	jne	.LBB640_17
# BB#16:
	cmpl	$0, -84(%rbp)
	setne	%al
.LBB640_17:
	testb	%al, %al
	je	.LBB640_18
# BB#82:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-104(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB640_85
# BB#83:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB640_85
# BB#84:
	movl	$1, -112(%rbp)
.LBB640_85:
	leaq	-120(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-108(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-112(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_86
# BB#89:
	movl	$1, -120(%rbp)
	jmp	.LBB640_87
.LBB640_18:
	leaq	-128(%rbp), %rcx
	leaq	-88(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -128(%rbp)
	andl	$1, -124(%rbp)
	jmp	.LBB640_19
.LBB640_86:
	testl	%eax, %eax
	je	.LBB640_87
# BB#90:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -120(%rbp)
.LBB640_87:
	movl	-88(%rbp), %eax
	andl	-120(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-84(%rbp), %eax
	orl	-116(%rbp), %eax
	movl	%eax, -124(%rbp)
	je	.LBB640_19
# BB#88:
	orl	%eax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-124(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -124(%rbp)
	movl	-88(%rbp), %eax
	movl	-84(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	movl	-120(%rbp), %eax
	movl	-116(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -128(%rbp)
.LBB640_19:
	leaq	-136(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-128(%rbp), %ecx
	testb	$1, %cl
	movq	-192(%rbp), %r15        # 8-byte Reload
	je	.LBB640_20
# BB#91:
	movl	$1, -136(%rbp)
	jmp	.LBB640_21
.LBB640_20:
	testl	%eax, %eax
	je	.LBB640_21
# BB#92:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -136(%rbp)
.LBB640_21:
	cmpl	$0, -136(%rbp)
	movb	$1, %al
	jne	.LBB640_23
# BB#22:
	cmpl	$0, -132(%rbp)
	setne	%al
.LBB640_23:
	testb	%al, %al
	je	.LBB640_24
# BB#93:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-144(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-152(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-160(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB640_96
# BB#94:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB640_96
# BB#95:
	movl	$1, -160(%rbp)
.LBB640_96:
	leaq	-168(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-160(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_97
# BB#100:
	movl	$1, -168(%rbp)
	jmp	.LBB640_98
.LBB640_24:
	leaq	-176(%rbp), %rcx
	leaq	-136(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -176(%rbp)
	andl	$1, -172(%rbp)
	jmp	.LBB640_25
.LBB640_97:
	testl	%eax, %eax
	je	.LBB640_98
# BB#101:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -168(%rbp)
.LBB640_98:
	movl	-136(%rbp), %eax
	andl	-168(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-132(%rbp), %eax
	orl	-164(%rbp), %eax
	movl	%eax, -172(%rbp)
	je	.LBB640_25
# BB#99:
	orl	%eax, -176(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-172(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -172(%rbp)
	movl	-136(%rbp), %eax
	movl	-132(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-176(%rbp), %ecx
	movl	-168(%rbp), %eax
	movl	-164(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -176(%rbp)
.LBB640_25:
	movl	-172(%rbp), %eax
	notl	%eax
	testl	-176(%rbp), %eax
	je	.LBB640_26
# BB#102:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-184(%rbp), %rcx
	jmp	.LBB640_103
.LBB640_26:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB640_28
# BB#27:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB640_28
# BB#106:
	movl	$1, -68(%rbp)
.LBB640_28:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_29
# BB#107:
	movl	$1, -80(%rbp)
	jmp	.LBB640_30
.LBB640_29:
	testl	%eax, %eax
	je	.LBB640_30
# BB#108:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB640_30:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB640_32
# BB#31:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB640_32:
	testb	%al, %al
	je	.LBB640_33
# BB#109:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB640_112
# BB#110:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB640_112
# BB#111:
	movl	$1, -104(%rbp)
.LBB640_112:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_113
# BB#116:
	movl	$1, -112(%rbp)
	jmp	.LBB640_114
.LBB640_33:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB640_34
.LBB640_113:
	testl	%eax, %eax
	je	.LBB640_114
# BB#117:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB640_114:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB640_34
# BB#115:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB640_34:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	jne	.LBB640_143
# BB#35:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB640_37
# BB#36:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB640_37
# BB#118:
	movl	$1, -68(%rbp)
.LBB640_37:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_38
# BB#119:
	movl	$1, -80(%rbp)
	jmp	.LBB640_39
.LBB640_38:
	testl	%eax, %eax
	je	.LBB640_39
# BB#120:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB640_39:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB640_41
# BB#40:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB640_41:
	testb	%al, %al
	je	.LBB640_42
# BB#121:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB640_124
# BB#122:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB640_124
# BB#123:
	movl	$1, -104(%rbp)
.LBB640_124:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_125
# BB#128:
	movl	$1, -112(%rbp)
	jmp	.LBB640_126
.LBB640_42:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB640_43
.LBB640_125:
	testl	%eax, %eax
	je	.LBB640_126
# BB#129:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB640_126:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB640_43
# BB#127:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB640_43:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB640_44
# BB#130:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$2, %r8d
	jmp	.LBB640_104
.LBB640_44:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng24(%rip), %ecx
	movl	ng24+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB640_46
# BB#45:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB640_46
# BB#131:
	movl	$1, -68(%rbp)
.LBB640_46:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_47
# BB#132:
	movl	$1, -80(%rbp)
	jmp	.LBB640_48
.LBB640_47:
	testl	%eax, %eax
	je	.LBB640_48
# BB#133:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB640_48:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB640_50
# BB#49:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB640_50:
	testb	%al, %al
	je	.LBB640_51
# BB#134:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$2, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rbx), %eax
	cmpl	(%rdi), %eax
	jne	.LBB640_137
# BB#135:
	movl	4(%rbx), %eax
	cmpl	4(%rdi), %eax
	jne	.LBB640_137
# BB#136:
	movl	$1, -104(%rbp)
.LBB640_137:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_138
# BB#141:
	movl	$1, -112(%rbp)
	jmp	.LBB640_139
.LBB640_51:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB640_52
.LBB640_138:
	testl	%eax, %eax
	je	.LBB640_139
# BB#142:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB640_139:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB640_52
# BB#140:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB640_52:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB640_53
.LBB640_143:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
.LBB640_103:
	xorl	%r8d, %r8d
.LBB640_104:
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	xorl	%r9d, %r9d
	movq	%rax, %r8
.LBB640_63:
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var_setback0(%rip)
	addq	$248, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB640_53:
	movl	$2, %edx
	movq	%r15, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-64(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rax, %rdx
	callq	*__imp__iki_vlog_get_bit_select_value_simple(%rip)
	movq	%rax, %rdi
	leaq	-72(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %ecx
	movl	4(%rdi), %ebx
	xorl	ng27(%rip), %ecx
	movl	ng27+4(%rip), %edx
	movl	%ebx, %eax
	xorl	%edx, %eax
	orl	%ecx, %eax
	orl	%edx, %ebx
	movl	%ebx, %ecx
	notl	%ecx
	testl	%ecx, %eax
	jne	.LBB640_55
# BB#54:
	testl	%ebx, %ebx
	movl	$1, -72(%rbp)
	je	.LBB640_55
# BB#144:
	movl	$1, -68(%rbp)
.LBB640_55:
	leaq	-80(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-72(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_56
# BB#145:
	movl	$1, -80(%rbp)
	jmp	.LBB640_57
.LBB640_56:
	testl	%eax, %eax
	je	.LBB640_57
# BB#146:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -80(%rbp)
.LBB640_57:
	cmpl	$0, -80(%rbp)
	movb	$1, %al
	jne	.LBB640_59
# BB#58:
	cmpl	$0, -76(%rbp)
	setne	%al
.LBB640_59:
	testb	%al, %al
	je	.LBB640_60
# BB#147:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-88(%rbp), %rcx
	movl	$1, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rdi
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*%rsi
	leaq	-96(%rbp), %rcx
	movl	$3, %r8d
	movq	%rax, %rdx
	callq	*%r13
	movq	%rax, %rbx
	leaq	-104(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	(%rdi), %eax
	cmpl	(%rbx), %eax
	jne	.LBB640_150
# BB#148:
	movl	4(%rdi), %eax
	cmpl	4(%rbx), %eax
	jne	.LBB640_150
# BB#149:
	movl	$1, -104(%rbp)
.LBB640_150:
	leaq	-112(%rbp), %rcx
	xorl	%edx, %edx
	movl	$8, %r8d
	callq	*__imp__iki_std_memset(%rip)
	movl	-100(%rbp), %eax
	movl	%eax, %ecx
	notl	%ecx
	andl	-104(%rbp), %ecx
	testb	$1, %cl
	je	.LBB640_151
# BB#154:
	movl	$1, -112(%rbp)
	jmp	.LBB640_152
.LBB640_60:
	leaq	-120(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movl	$8, %r8d
	callq	*__imp__iki_std_memcpy(%rip)
	andl	$1, -120(%rbp)
	andl	$1, -116(%rbp)
	jmp	.LBB640_61
.LBB640_151:
	testl	%eax, %eax
	je	.LBB640_152
# BB#155:
	movabsq	$4294967297, %rax       # imm = 0x100000001
	movq	%rax, -112(%rbp)
.LBB640_152:
	movl	-80(%rbp), %eax
	andl	-112(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %eax
	orl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	je	.LBB640_61
# BB#153:
	orl	%eax, -120(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-116(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -116(%rbp)
	movl	-80(%rbp), %eax
	movl	-76(%rbp), %ecx
	notl	%eax
	notl	%ecx
	andl	%eax, %ecx
	notl	%ecx
	andl	-120(%rbp), %ecx
	movl	-112(%rbp), %eax
	movl	-108(%rbp), %edx
	notl	%eax
	notl	%edx
	andl	%eax, %edx
	notl	%edx
	andl	%ecx, %edx
	movl	%edx, -120(%rbp)
.LBB640_61:
	movl	-116(%rbp), %eax
	notl	%eax
	testl	-120(%rbp), %eax
	je	.LBB640_62
# BB#156:
	movl	$4, %edx
	movq	%r14, %rcx
	callq	*__imp__iki_vlog_signal_handle_value_input(%rip)
	leaq	-128(%rbp), %rcx
	movl	$1, %r8d
	jmp	.LBB640_104
.LBB640_62:
	movq	%r12, %rdx
	leaq	4976(%rdx), %rcx
	addq	$4944, %rdx             # imm = 0x1350
	leaq	ng28(%rip), %r8
	xorl	%r9d, %r9d
	jmp	.LBB640_63

	.def	 _execute_795;
	.scl	2;
	.type	32;
	.endef
	.globl	_execute_795
	.align	16, 0x90
_execute_795:                           # @_execute_795
# BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%rsi
	subq	$40, %rsp
	movq	%rdx, %rsi
	movl	$103, %edx
	movq	%rsi, %rcx
	callq	*__imp__iki_vlog_set_threadId_for_unrandom(%rip)
	leaq	488(%rsi), %rcx
	addq	$2840, %rsi             # imm = 0xB18
	movl	$63, 32(%rsp)
	leaq	ng117(%rip), %r8
	xorl	%r9d, %r9d
	movq	%rsi, %rdx
	callq	*__imp__iki_vlog_schedule_transaction_blocking_var(%rip)
	addq	$40, %rsp
	popq	%rsi
	popq	%rbp
	ret

	.data
	.align	16                      # @ng6
ng6:
	.quad	162100096               # 0x9a97380
	.quad	162100328               # 0x9a97468
	.quad	162100560               # 0x9a97550
	.quad	162100792               # 0x9a97638
	.quad	162106104               # 0x9a98af8
	.quad	162106336               # 0x9a98be0
	.quad	162106568               # 0x9a98cc8
	.quad	162106800               # 0x9a98db0
	.quad	162108488               # 0x9a99448
	.quad	162109520               # 0x9a99850

	.align	16                      # @ng0
ng0:
	.quad	167449952               # 0x9fb1560
	.quad	167584328               # 0x9fd2248
	.quad	167635744               # 0x9fdeb20
	.quad	167659560               # 0x9fe4828
	.quad	167693776               # 0x9fecdd0
	.quad	167717592               # 0x9ff2ad8
	.quad	167760024               # 0x9ffd098
	.quad	167783840               # 0xa002da0
	.quad	167794304               # 0xa005680
	.quad	167818056               # 0xa00b348
	.quad	167976488               # 0xa031e28

	.align	16                      # @ng1
ng1:
	.quad	167320792               # 0x9f91cd8
	.quad	167335880               # 0x9f957c8
	.quad	167382096               # 0x9fa0c50
	.quad	167414640               # 0x9fa8b70
	.quad	167450288               # 0x9fb16b0
	.quad	167482832               # 0x9fb95d0
	.quad	167601848               # 0x9fd66b8
	.quad	167670192               # 0x9fe71b0
	.quad	167728224               # 0x9ff5460
	.quad	167794472               # 0xa005728
	.quad	167895272               # 0xa01e0e8
	.quad	167903576               # 0xa020158
	.quad	167907464               # 0xa021088
	.quad	167916344               # 0xa023338
	.quad	167925432               # 0xa0256b8
	.quad	167935808               # 0xa027f40

	.align	16                      # @ng2
ng2:
	.quad	167517808               # 0x9fc1e70
	.quad	167523176               # 0x9fc3368
	.quad	167607048               # 0x9fd7b08
	.quad	167849608               # 0xa012e88
	.quad	167873424               # 0xa018b90
	.quad	167895440               # 0xa01e190
	.quad	167916512               # 0xa0233e0
	.quad	167921544               # 0xa024788
	.quad	167925600               # 0xa025760
	.quad	167940672               # 0xa029240
	.quad	167988616               # 0xa034d88
	.quad	168116864               # 0xa054280

	.align	16                      # @ng3
ng3:
	.quad	167517976               # 0x9fc1f18
	.quad	167523344               # 0x9fc3410
	.quad	167528208               # 0x9fc4710
	.quad	167565520               # 0x9fcd8d0
	.quad	167849776               # 0xa012f30
	.quad	167895608               # 0xa01e238
	.quad	167907632               # 0xa021130
	.quad	167911584               # 0xa0220a0
	.quad	167921712               # 0xa024830
	.quad	167925768               # 0xa025808
	.quad	167940840               # 0xa0292e8
	.quad	167988784               # 0xa034e30
	.quad	168106824               # 0xa051b48
	.quad	168117032               # 0xa054328

	.align	16                      # @ng4
ng4:
	.quad	167518144               # 0x9fc1fc0
	.quad	167523512               # 0x9fc34b8
	.quad	167528376               # 0x9fc47b8
	.quad	167565688               # 0x9fcd978
	.quad	167849944               # 0xa012fd8
	.quad	167895776               # 0xa01e2e0
	.quad	167907800               # 0xa0211d8
	.quad	167911752               # 0xa022148
	.quad	167925936               # 0xa0258b0
	.quad	167941008               # 0xa029390
	.quad	168106992               # 0xa051bf0
	.quad	168117200               # 0xa0543d0

	.align	16                      # @ng5
ng5:
	.quad	167518312               # 0x9fc2068
	.quad	167523680               # 0x9fc3560
	.quad	167528544               # 0x9fc4860
	.quad	167555312               # 0x9fcb0f0
	.quad	167565856               # 0x9fcda20
	.quad	167850112               # 0xa013080
	.quad	167895944               # 0xa01e388
	.quad	167907968               # 0xa021280
	.quad	167911920               # 0xa0221f0
	.quad	167926104               # 0xa025958
	.quad	167941176               # 0xa029438
	.quad	167976656               # 0xa031ed0
	.quad	168107160               # 0xa051c98
	.quad	168117368               # 0xa054478

	.lcomm	ng7,8,4                 # @ng7
	.align	4                       # @ng8
ng8:
	.long	1                       # 0x1
	.long	0                       # 0x0

	.align	4                       # @ng9
ng9:
	.long	0                       # 0x0
	.long	1                       # 0x1

	.align	16                      # @ng10
ng10:
	.quad	162101024               # 0x9a97720
	.quad	162101256               # 0x9a97808

	.align	16                      # @ng11
ng11:
	.quad	162101488               # 0x9a978f0
	.quad	162101720               # 0x9a979d8

	.align	16                      # @ng12
ng12:
	.quad	162107032               # 0x9a98e98
	.quad	162107264               # 0x9a98f80

	.align	16                      # @ng13
ng13:
	.quad	162107496               # 0x9a99068
	.quad	162107728               # 0x9a99150

	.align	16                      # @ng14
ng14:
	.quad	162100096               # 0x9a97380
	.quad	162100560               # 0x9a97550
	.quad	162105344               # 0x9a98800
	.quad	162106104               # 0x9a98af8
	.quad	162106568               # 0x9a98cc8

	.align	16                      # @ng15
ng15:
	.quad	162095568               # 0x9a961d0
	.quad	162095848               # 0x9a962e8
	.quad	162096128               # 0x9a96400
	.quad	162096408               # 0x9a96518
	.quad	162096688               # 0x9a96630
	.quad	162096968               # 0x9a96748
	.quad	162097248               # 0x9a96860
	.quad	162097528               # 0x9a96978

	.align	16                      # @ng16
ng16:
	.quad	167325504               # 0x9f92f40
	.quad	167340592               # 0x9f96a30
	.quad	167354264               # 0x9f99f98
	.quad	167367936               # 0x9f9d500
	.quad	167386808               # 0x9fa1eb8
	.quad	167400480               # 0x9fa5420
	.quad	167419352               # 0x9fa9dd8
	.quad	167436128               # 0x9fadf60
	.quad	167455000               # 0x9fb2918
	.quad	167468672               # 0x9fb5e80
	.quad	167487544               # 0x9fba838
	.quad	167504320               # 0x9fbe9c0
	.quad	167551528               # 0x9fca228
	.quad	167560256               # 0x9fcc440
	.quad	167869168               # 0xa017af0
	.quad	167946040               # 0xa02a738
	.quad	167998944               # 0xa0375e0
	.quad	168012192               # 0xa03a9a0
	.quad	168022336               # 0xa03d140
	.quad	168032480               # 0xa03f8e0
	.quad	168042624               # 0xa042080
	.quad	168093408               # 0xa04e6e0
	.quad	168127192               # 0xa056ad8

	.align	16                      # @ng17
ng17:
	.quad	167312424               # 0x9f8fc28
	.quad	167349488               # 0x9f98cf0
	.quad	167363160               # 0x9f9c258
	.quad	167376832               # 0x9f9f7c0
	.quad	167395704               # 0x9fa4178
	.quad	167409376               # 0x9fa76e0
	.quad	167428248               # 0x9fac098
	.quad	167445024               # 0x9fb0220
	.quad	167463896               # 0x9fb4bd8
	.quad	167477568               # 0x9fb8140
	.quad	167496440               # 0x9fbcaf8
	.quad	167513216               # 0x9fc0c80
	.quad	167268632               # 0x9f85118

	.align	16                      # @ng18
ng18:
	.quad	167312592               # 0x9f8fcd0
	.quad	167349656               # 0x9f98d98
	.quad	167363328               # 0x9f9c300
	.quad	167377000               # 0x9f9f868
	.quad	167395872               # 0x9fa4220
	.quad	167409544               # 0x9fa7788
	.quad	167428416               # 0x9fac140
	.quad	167445192               # 0x9fb02c8
	.quad	167464064               # 0x9fb4c80
	.quad	167477736               # 0x9fb81e8
	.quad	167496608               # 0x9fbcba0
	.quad	167513384               # 0x9fc0d28

	.align	16                      # @ng19
ng19:
	.quad	167312760               # 0x9f8fd78
	.quad	167349824               # 0x9f98e40
	.quad	167363496               # 0x9f9c3a8
	.quad	167377168               # 0x9f9f910
	.quad	167396040               # 0x9fa42c8
	.quad	167409712               # 0x9fa7830
	.quad	167428584               # 0x9fac1e8
	.quad	167445360               # 0x9fb0370
	.quad	167464232               # 0x9fb4d28
	.quad	167477904               # 0x9fb8290
	.quad	167496776               # 0x9fbcc48
	.quad	167513552               # 0x9fc0dd0

	.align	16                      # @ng20
ng20:
	.quad	168056040               # 0xa0454e8
	.quad	168057384               # 0xa045a28
	.quad	168057552               # 0xa045ad0
	.quad	168057720               # 0xa045b78
	.quad	168057888               # 0xa045c20
	.quad	168058056               # 0xa045cc8
	.quad	168058224               # 0xa045d70
	.quad	168062288               # 0xa046d50
	.quad	168063632               # 0xa047290
	.quad	168063800               # 0xa047338
	.quad	168063968               # 0xa0473e0
	.quad	168064136               # 0xa047488
	.quad	168064304               # 0xa047530
	.quad	168064472               # 0xa0475d8

	.align	16                      # @ng21
ng21:
	.quad	162100328               # 0x9a97468
	.quad	162100792               # 0x9a97638
	.quad	162106336               # 0x9a98be0
	.quad	162106800               # 0x9a98db0

	.align	16                      # @ng22
ng22:
	.quad	167325168               # 0x9f92df0
	.quad	167340256               # 0x9f968e0
	.quad	167353928               # 0x9f99e48
	.quad	167367600               # 0x9f9d3b0
	.quad	167386472               # 0x9fa1d68
	.quad	167400144               # 0x9fa52d0
	.quad	167419016               # 0x9fa9c88
	.quad	167435792               # 0x9fade10
	.quad	167454664               # 0x9fb27c8
	.quad	167468336               # 0x9fb5d30
	.quad	167487208               # 0x9fba6e8
	.quad	167503984               # 0x9fbe870
	.quad	167555816               # 0x9fcb2e8
	.quad	167868832               # 0xa0179a0
	.quad	167922216               # 0xa024a28
	.quad	167936144               # 0xa028090
	.quad	167989288               # 0xa035028
	.quad	168007312               # 0xa039690
	.quad	168017456               # 0xa03be30
	.quad	168027600               # 0xa03e5d0
	.quad	168037744               # 0xa040d70
	.quad	168050992               # 0xa044130
	.quad	168057048               # 0xa0458d8
	.quad	168063296               # 0xa047140
	.quad	168092904               # 0xa04e4e8

	.align	4                       # @ng23
ng23:
	.long	31                      # 0x1f
	.long	0                       # 0x0

	.lcomm	ng24,8,4                # @ng24
	.align	4                       # @ng25
ng25:
	.long	63                      # 0x3f
	.long	0                       # 0x0

	.align	4                       # @ng26
ng26:
	.long	32                      # 0x20
	.long	0                       # 0x0

	.align	4                       # @ng27
ng27:
	.long	1                       # 0x1
	.long	0                       # 0x0

	.align	4                       # @ng28
ng28:
	.long	1                       # 0x1
	.long	1                       # 0x1

	.align	4                       # @ng29
ng29:
	.long	7                       # 0x7
	.long	0                       # 0x0

	.align	4                       # @ng31
ng31:
	.long	15                      # 0xf
	.long	0                       # 0x0

	.align	4                       # @ng32
ng32:
	.long	8                       # 0x8
	.long	0                       # 0x0

	.align	4                       # @ng33
ng33:
	.long	23                      # 0x17
	.long	0                       # 0x0

	.align	4                       # @ng34
ng34:
	.long	16                      # 0x10
	.long	0                       # 0x0

	.align	4                       # @ng35
ng35:
	.long	24                      # 0x18
	.long	0                       # 0x0

	.align	16                      # @ng37
ng37:
	.long	2155905152              # 0x80808080
	.long	0                       # 0x0
	.long	3425959680              # 0xcc33ff00
	.long	0                       # 0x0

	.align	4                       # @ng39
ng39:
	.long	39                      # 0x27
	.long	0                       # 0x0

	.align	4                       # @ng40
ng40:
	.long	47                      # 0x2f
	.long	0                       # 0x0

	.align	4                       # @ng41
ng41:
	.long	40                      # 0x28
	.long	0                       # 0x0

	.align	4                       # @ng42
ng42:
	.long	55                      # 0x37
	.long	0                       # 0x0

	.align	4                       # @ng43
ng43:
	.long	48                      # 0x30
	.long	0                       # 0x0

	.align	4                       # @ng44
ng44:
	.long	56                      # 0x38
	.long	0                       # 0x0

	.align	4                       # @ng45
ng45:
	.long	2                       # 0x2
	.long	0                       # 0x0

	.align	16                      # @ng48
ng48:
	.long	3435965098              # 0xccccaaaa
	.long	0                       # 0x0
	.long	4278251760              # 0xff00f0f0
	.long	0                       # 0x0

	.align	16                      # @ng51
ng51:
	.long	69206016                # 0x4200000
	.long	0                       # 0x0
	.long	63569920                # 0x3ca0000
	.long	0                       # 0x0

	.align	16                      # @ng54
ng54:
	.long	3840                    # 0xf00
	.long	0                       # 0x0
	.long	1997012992              # 0x77080000
	.long	0                       # 0x0

	.align	16                      # @ng57
ng57:
	.long	33554432                # 0x2000000
	.long	0                       # 0x0
	.long	3489660928              # 0xd0000000
	.long	0                       # 0x0

	.align	16                      # @ng60
ng60:
	.long	4037672960              # 0xf0aa0000
	.long	0                       # 0x0
	.long	859024076               # 0x3333aacc
	.long	0                       # 0x0

	.align	16                      # @ng63
ng63:
	.long	3435921408              # 0xcccc0000
	.long	0                       # 0x0
	.long	1768517258              # 0x69696e8a
	.long	0                       # 0x0

	.lcomm	ng64,16,16              # @ng64
	.align	16                      # @ng65
ng65:
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0
	.long	4294967295              # 0xffffffff
	.long	0                       # 0x0

	.align	8                       # @ng66
ng66:
	.quad	.L.str4

	.align	8                       # @ng67
ng67:
	.quad	.L.str3

	.align	8                       # @ng68
ng68:
	.quad	.L.str2

	.align	8                       # @ng69
ng69:
	.quad	.L.str1

	.align	8                       # @ng70
ng70:
	.quad	.L.str

	.align	4                       # @ng71
ng71:
	.long	3                       # 0x3
	.long	0                       # 0x0

	.align	4                       # @ng73
ng73:
	.long	4                       # 0x4
	.long	0                       # 0x0

	.align	4                       # @ng74
ng74:
	.long	11                      # 0xb
	.long	0                       # 0x0

	.align	4                       # @ng75
ng75:
	.long	12                      # 0xc
	.long	0                       # 0x0

	.align	16                      # @ng78
ng78:
	.long	2048                    # 0x800
	.long	0                       # 0x0
	.long	1048576                 # 0x100000
	.long	0                       # 0x0

	.align	16                      # @ng81
ng81:
	.long	2272788480              # 0x87780000
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0

	.align	16                      # @ng84
ng84:
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0

	.align	16                      # @ng87
ng87:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	13                      # 0xd
	.long	0                       # 0x0

	.align	16                      # @ng90
ng90:
	.long	512                     # 0x200
	.long	0                       # 0x0
	.long	2004288119              # 0x77770277
	.long	0                       # 0x0

	.align	16                      # @ng93
ng93:
	.long	9215                    # 0x23ff
	.long	0                       # 0x0
	.long	61440                   # 0xf000
	.long	0                       # 0x0

	.align	16                      # @ng96
ng96:
	.long	8192                    # 0x2000
	.long	0                       # 0x0
	.long	4294905856              # 0xffff1000
	.long	0                       # 0x0

	.align	16                      # @ng99
ng99:
	.long	16777216                # 0x1000000
	.long	0                       # 0x0
	.long	1073741824              # 0x40000000
	.long	0                       # 0x0

	.align	16                      # @ng102
ng102:
	.long	2695495680              # 0xa0aa0000
	.long	0                       # 0x0
	.long	3234594816              # 0xc0cc0000
	.long	0                       # 0x0

	.align	16                      # @ng105
ng105:
	.long	1112014                 # 0x10f7ce
	.long	0                       # 0x0
	.long	81727                   # 0x13f3f
	.long	0                       # 0x0

	.align	16                      # @ng108
ng108:
	.long	3822                    # 0xeee
	.long	0                       # 0x0
	.long	4294964565              # 0xfffff555
	.long	0                       # 0x0

	.align	16                      # @ng111
ng111:
	.long	536870912               # 0x20000000
	.long	0                       # 0x0
	.long	2147483648              # 0x80000000
	.long	0                       # 0x0

	.align	16                      # @ng114
ng114:
	.long	2863311530              # 0xaaaaaaaa
	.long	0                       # 0x0
	.long	1386922                 # 0x1529aa
	.long	0                       # 0x0

	.align	16                      # @ng117
ng117:
	.long	2863311530              # 0xaaaaaaaa
	.long	0                       # 0x0
	.long	2762026                 # 0x2a252a
	.long	0                       # 0x0

	.section	.rdata,"r"
.L.str:                                 # @.str
	.asciz	"Error: [Unisim %s-109] IS_WCLK_INVERTED attribute is set to %b.  Legal values for this attribute are 1'b0 to 1'b1. Instance: %m"

.L.str1:                                # @.str1
	.asciz	"Error: [Unisim %s-104] INIT_D attribute is set to %h.  Legal values for this attribute are 64'h0000000000000000 to 64'hFFFFFFFFFFFFFFFF. Instance: %m"

.L.str2:                                # @.str2
	.asciz	"Error: [Unisim %s-103] INIT_C attribute is set to %h.  Legal values for this attribute are 64'h0000000000000000 to 64'hFFFFFFFFFFFFFFFF. Instance: %m"

.L.str3:                                # @.str3
	.asciz	"Error: [Unisim %s-102] INIT_B attribute is set to %h.  Legal values for this attribute are 64'h0000000000000000 to 64'hFFFFFFFFFFFFFFFF. Instance: %m"

.L.str4:                                # @.str4
	.asciz	"Error: [Unisim %s-101] INIT_A attribute is set to %h.  Legal values for this attribute are 64'h0000000000000000 to 64'hFFFFFFFFFFFFFFFF. Instance: %m"


